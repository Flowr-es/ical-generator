{
  "stats": {
    "suites": 120,
    "tests": 408,
    "passes": 408,
    "pending": 0,
    "failures": 0,
    "start": "2021-05-12T18:08:48.024Z",
    "end": "2021-05-12T18:08:48.228Z",
    "duration": 204,
    "testsRegistered": 408,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "877cdb1b-f388-4efa-9bee-1deeb0f755f7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c4c2485d-4ad4-4504-afbd-854787239346",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9cbb8d90-f76c-4408-9d4d-a20cfd6c2e5b",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    // @ts-ignore\n    new alarm_1.default({ type: alarm_1.ICalAlarmType.display }, null);\n}, /`event`/);",
                  "err": {},
                  "uuid": "4700fc70-c1de-4100-8349-46f718bf92b4",
                  "parentUUID": "9cbb8d90-f76c-4408-9d4d-a20cfd6c2e5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    // @ts-ignore\n    unknown: true,\n    type: alarm_1.ICalAlarmType.display\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.type(), 'display');",
                  "err": {},
                  "uuid": "9a9070ab-3dc5-4d7e-a5ab-9a7e7efa90a6",
                  "parentUUID": "9cbb8d90-f76c-4408-9d4d-a20cfd6c2e5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4700fc70-c1de-4100-8349-46f718bf92b4",
                "9a9070ab-3dc5-4d7e-a5ab-9a7e7efa90a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "633f8050-01d6-4c07-a2d3-3c974c9a5371",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.type(null));\nassert_1.default.deepStrictEqual(a, a.type(alarm_1.ICalAlarmType.display));",
                  "err": {},
                  "uuid": "6fc17e5d-8fc2-4095-ba0a-01807284d466",
                  "parentUUID": "633f8050-01d6-4c07-a2d3-3c974c9a5371",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.type(), null);\na.type(alarm_1.ICalAlarmType.display);\nassert_1.default.strictEqual(a.type(), 'display');\na.type(null);\nassert_1.default.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "2e9f3749-951e-4349-96c6-75549bcd2d52",
                  "parentUUID": "633f8050-01d6-4c07-a2d3-3c974c9a5371",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.type('BANANA');\n}, /`type`/);",
                  "err": {},
                  "uuid": "1cc7bd6c-45d2-4ad0-9963-467f3e28504c",
                  "parentUUID": "633f8050-01d6-4c07-a2d3-3c974c9a5371",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 60 * 10\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('ACTION:DISPLAY') > -1);",
                  "err": {},
                  "uuid": "370216a4-1796-485f-abea-ad00d147829f",
                  "parentUUID": "633f8050-01d6-4c07-a2d3-3c974c9a5371",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6fc17e5d-8fc2-4095-ba0a-01807284d466",
                "2e9f3749-951e-4349-96c6-75549bcd2d52",
                "1cc7bd6c-45d2-4ad0-9963-467f3e28504c",
                "370216a4-1796-485f-abea-ad00d147829f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "294d0949-6f13-42bd-b35e-f00c796ffd04",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.trigger(null));\nassert_1.default.deepStrictEqual(a, a.trigger(60 * 10));",
                  "err": {},
                  "uuid": "aea50bc9-3df5-498c-bcad-58e0e72ea21a",
                  "parentUUID": "294d0949-6f13-42bd-b35e-f00c796ffd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nconst now = new Date();\nassert_1.default.strictEqual(a.trigger(), null);\nassert_1.default.strictEqual(a.triggerAfter(), null);\na.trigger(300);\nassert_1.default.strictEqual(a.trigger(), 300);\nassert_1.default.strictEqual(a.triggerAfter(), -300);\n// Date\na.trigger(now);\nconst dateResult = a.trigger();\nassert_1.default.deepStrictEqual(dateResult, now);\n// Null\na.trigger(null);\nassert_1.default.strictEqual(a.trigger(), null);\nassert_1.default.strictEqual(a.triggerAfter(), null);",
                  "err": {},
                  "uuid": "2c29febc-408d-4fb8-a352-eb2b0a77cd7d",
                  "parentUUID": "294d0949-6f13-42bd-b35e-f00c796ffd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.trigger(Infinity);\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.trigger('hi');\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.trigger(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "3b58f9d0-7611-40ba-b431-dda79e77fa45",
                  "parentUUID": "294d0949-6f13-42bd-b35e-f00c796ffd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(60 * 10);\na.trigger(null);\nassert_1.default.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "a525e2fd-13f1-479e-84c7-c268b463defc",
                  "parentUUID": "294d0949-6f13-42bd-b35e-f00c796ffd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(new Date());\nassert_1.default.ok(a.trigger() instanceof Date);",
                  "err": {},
                  "uuid": "402c8469-9888-444b-97b4-ca22eaee4fce",
                  "parentUUID": "294d0949-6f13-42bd-b35e-f00c796ffd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(moment_timezone_1.default());\nassert_1.default.ok(moment_timezone_1.default.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "b46a9091-a53e-470a-a6f4-693af1b4f975",
                  "parentUUID": "294d0949-6f13-42bd-b35e-f00c796ffd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(2 * 60);\nassert_1.default.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "4bb0fb97-2dc3-47fd-8c73-c90c6dd5a2d9",
                  "parentUUID": "294d0949-6f13-42bd-b35e-f00c796ffd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment_timezone_1.default('2015-02-01T13:38:45.000Z');\nconst a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, trigger: 60 * 10 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.trigger(trigger);\nassert_1.default.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "e35378aa-bf67-482b-a023-44dcaa5356a2",
                  "parentUUID": "294d0949-6f13-42bd-b35e-f00c796ffd04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aea50bc9-3df5-498c-bcad-58e0e72ea21a",
                "2c29febc-408d-4fb8-a352-eb2b0a77cd7d",
                "3b58f9d0-7611-40ba-b431-dda79e77fa45",
                "a525e2fd-13f1-479e-84c7-c268b463defc",
                "402c8469-9888-444b-97b4-ca22eaee4fce",
                "b46a9091-a53e-470a-a6f4-693af1b4f975",
                "4bb0fb97-2dc3-47fd-8c73-c90c6dd5a2d9",
                "e35378aa-bf67-482b-a023-44dcaa5356a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "010c6b64-b9d7-4f8f-83fb-a033d2a20595",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.triggerAfter(60 * 10));",
                  "err": {},
                  "uuid": "28fa3472-7a58-4081-8916-95b1ab5f6000",
                  "parentUUID": "010c6b64-b9d7-4f8f-83fb-a033d2a20595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default())).triggerAfter(300);\nassert_1.default.strictEqual(a.triggerAfter(), 300);\nassert_1.default.strictEqual(a.trigger(), -300);",
                  "err": {},
                  "uuid": "6e9624d6-01c8-4b52-9d1a-18b4d47a1cb7",
                  "parentUUID": "010c6b64-b9d7-4f8f-83fb-a033d2a20595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerAfter(120);\nassert_1.default.strictEqual(a.trigger(), -120);",
                  "err": {},
                  "uuid": "f1ca1a9a-0e22-43c0-8cd8-0c2507dff1dc",
                  "parentUUID": "010c6b64-b9d7-4f8f-83fb-a033d2a20595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.triggerAfter(Infinity);\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerAfter('hi');\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerAfter(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "8767547b-754b-4f00-9ab9-fdfbde4bf4d7",
                  "parentUUID": "010c6b64-b9d7-4f8f-83fb-a033d2a20595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment_timezone_1.default('20150201T133845Z');\nconst a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, triggerAfter: 60 * 10 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('TRIGGER;RELATED=END:PT10M') > -1);\na.triggerAfter(trigger);\nassert_1.default.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "c8d3892f-dfd2-4260-9a8f-d99ba7e0dd2c",
                  "parentUUID": "010c6b64-b9d7-4f8f-83fb-a033d2a20595",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28fa3472-7a58-4081-8916-95b1ab5f6000",
                "6e9624d6-01c8-4b52-9d1a-18b4d47a1cb7",
                "f1ca1a9a-0e22-43c0-8cd8-0c2507dff1dc",
                "8767547b-754b-4f00-9ab9-fdfbde4bf4d7",
                "c8d3892f-dfd2-4260-9a8f-d99ba7e0dd2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c5033dad-6d25-4296-99c1-7c98c39382e3",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.triggerBefore(null));\nassert_1.default.deepStrictEqual(a, a.triggerBefore(60 * 10));",
                  "err": {},
                  "uuid": "713fd736-1f77-4812-a52e-e56fbaa378f5",
                  "parentUUID": "c5033dad-6d25-4296-99c1-7c98c39382e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nconst now = new Date();\nassert_1.default.strictEqual(a.triggerBefore(), null);\na.trigger(300);\nassert_1.default.strictEqual(a.triggerBefore(), 300);\n// Date\na.trigger(now);\nconst dateResult = a.triggerBefore();\nassert_1.default.deepStrictEqual(dateResult, now);\n// Null\na.trigger(null);\nassert_1.default.strictEqual(a.triggerBefore(), null);",
                  "err": {},
                  "uuid": "6fe0004c-2b8c-4189-a6a5-5b41c8ef2e5b",
                  "parentUUID": "c5033dad-6d25-4296-99c1-7c98c39382e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.triggerBefore(Infinity);\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerBefore('hi');\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerBefore(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "35aa251f-1db2-4991-bd95-5967a7e314fd",
                  "parentUUID": "c5033dad-6d25-4296-99c1-7c98c39382e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore(60 * 10);\na.triggerBefore(null);\nassert_1.default.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "754ba2d4-1374-4884-98de-9347efe305c7",
                  "parentUUID": "c5033dad-6d25-4296-99c1-7c98c39382e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nconst now = new Date();\na.triggerBefore(now);\nassert_1.default.deepStrictEqual(a.trigger(), now);",
                  "err": {},
                  "uuid": "f8b8b139-58d9-45a5-8dd1-9320c56b12b3",
                  "parentUUID": "c5033dad-6d25-4296-99c1-7c98c39382e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore(moment_timezone_1.default());\nassert_1.default.ok(moment_timezone_1.default.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "e0313127-96a5-4942-928d-1ca3c846e10c",
                  "parentUUID": "c5033dad-6d25-4296-99c1-7c98c39382e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore(2 * 60);\nassert_1.default.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "0188dc24-b32f-4795-ab52-861e824cfdcb",
                  "parentUUID": "c5033dad-6d25-4296-99c1-7c98c39382e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment_timezone_1.default('2015-02-01T13:38:45.000Z');\nconst a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, triggerBefore: 60 * 10 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.triggerBefore(trigger);\nassert_1.default.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "7a524f1c-185c-48c0-879b-69ed8bc1d975",
                  "parentUUID": "c5033dad-6d25-4296-99c1-7c98c39382e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "713fd736-1f77-4812-a52e-e56fbaa378f5",
                "6fe0004c-2b8c-4189-a6a5-5b41c8ef2e5b",
                "35aa251f-1db2-4991-bd95-5967a7e314fd",
                "754ba2d4-1374-4884-98de-9347efe305c7",
                "f8b8b139-58d9-45a5-8dd1-9320c56b12b3",
                "e0313127-96a5-4942-928d-1ca3c846e10c",
                "0188dc24-b32f-4795-ab52-861e824cfdcb",
                "7a524f1c-185c-48c0-879b-69ed8bc1d975"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "805cc375-c217-4a25-b9b1-b881f5b00657",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.repeat(null));\nassert_1.default.deepStrictEqual(a, a.repeat(4));",
                  "err": {},
                  "uuid": "207eb760-771c-419f-9590-b2a83a4ba135",
                  "parentUUID": "805cc375-c217-4a25-b9b1-b881f5b00657",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.repeat(), null);\na.repeat(100);\nassert_1.default.strictEqual(a.repeat(), 100);\na.repeat(null);\nassert_1.default.strictEqual(a.repeat(), null);",
                  "err": {},
                  "uuid": "7616cfc2-6069-4e3b-935f-89ca59f1049a",
                  "parentUUID": "805cc375-c217-4a25-b9b1-b881f5b00657",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.repeat(Infinity);\n}, /`repeat`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.repeat('hi');\n}, /`repeat`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.repeat(true);\n}, /`repeat`/);",
                  "err": {},
                  "uuid": "a11a401e-064c-4328-b7df-200a212299d1",
                  "parentUUID": "805cc375-c217-4a25-b9b1-b881f5b00657",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 60\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('REPEAT:42') > -1);",
                  "err": {},
                  "uuid": "65fc9084-4fb7-4ca8-abdb-ca4ffe6a6d9c",
                  "parentUUID": "805cc375-c217-4a25-b9b1-b881f5b00657",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "207eb760-771c-419f-9590-b2a83a4ba135",
                "7616cfc2-6069-4e3b-935f-89ca59f1049a",
                "a11a401e-064c-4328-b7df-200a212299d1",
                "65fc9084-4fb7-4ca8-abdb-ca4ffe6a6d9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e73a7aa2-d080-4dec-a85d-089e2018de3d",
              "title": "interval()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm interval() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.interval(null));\nassert_1.default.deepStrictEqual(a, a.interval(60));",
                  "err": {},
                  "uuid": "0fe1c177-ef3d-4428-ab9b-c17d5a337cb4",
                  "parentUUID": "e73a7aa2-d080-4dec-a85d-089e2018de3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm interval() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.interval(), null);\na.interval(30);\nassert_1.default.strictEqual(a.interval(), 30);\na.interval(null);\nassert_1.default.strictEqual(a.interval(), null);",
                  "err": {},
                  "uuid": "5ee62cbb-2d91-422a-83fe-1dde30094e23",
                  "parentUUID": "e73a7aa2-d080-4dec-a85d-089e2018de3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm interval() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.interval(Infinity);\n}, /`interval`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.interval('hi');\n}, /`interval`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.interval(true);\n}, /`interval`/);",
                  "err": {},
                  "uuid": "c35f4915-1595-4071-9be4-688d6ea23ad8",
                  "parentUUID": "e73a7aa2-d080-4dec-a85d-089e2018de3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm interval() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 90\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('DURATION:PT1M30S') > -1);",
                  "err": {},
                  "uuid": "ceebf582-983d-4828-b8aa-496b6ab3dbe3",
                  "parentUUID": "e73a7aa2-d080-4dec-a85d-089e2018de3d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fe1c177-ef3d-4428-ab9b-c17d5a337cb4",
                "5ee62cbb-2d91-422a-83fe-1dde30094e23",
                "c35f4915-1595-4071-9be4-688d6ea23ad8",
                "ceebf582-983d-4828-b8aa-496b6ab3dbe3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "94bb53c5-316d-47a7-8b72-109bb55bc270",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.attach(null));\nassert_1.default.deepStrictEqual(a, a.attach('https://sebbo.net/beep.aud'));",
                  "err": {},
                  "uuid": "03e6fb2f-6e57-4f60-ace6-3177f29558b5",
                  "parentUUID": "94bb53c5-316d-47a7-8b72-109bb55bc270",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t = { uri: 'https://example.com/alarm.aud', mime: 'audio/basic' };\nconst a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.attach(), null);\na.attach(t);\nassert_1.default.deepStrictEqual(a.attach(), t);\na.attach('https://www.example.com/beep.aud');\nassert_1.default.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach({\n    uri: 'https://www.example.com/beep.aud'\n});\nassert_1.default.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach(null);\nassert_1.default.strictEqual(a.attach(), null);",
                  "err": {},
                  "uuid": "67de9320-bd8f-4ab3-96a8-4c6bfcc6ff67",
                  "parentUUID": "94bb53c5-316d-47a7-8b72-109bb55bc270",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.attach({ mime: 'audio/basic' });\n}, /`attach.uri`/);",
                  "err": {},
                  "uuid": "08a1699f-4a5a-4069-b20b-175cde9365ed",
                  "parentUUID": "94bb53c5-316d-47a7-8b72-109bb55bc270",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.attach(Infinity);\n}, /`attachment`/);",
                  "err": {},
                  "uuid": "012e5474-75c4-491a-b3e5-20fbc158fa0b",
                  "parentUUID": "94bb53c5-316d-47a7-8b72-109bb55bc270",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.audio,\n    trigger: 300\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:Basso') > -1);\na.attach('https://example.com/beep.aud');\nassert_1.default.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud') > -1);\na.attach({\n    uri: 'https://example.com/beep.aud',\n    mime: 'audio/basic'\n});\nassert_1.default.ok(a.toString().indexOf('\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud') > -1);",
                  "err": {},
                  "uuid": "b2dd3daf-3aa6-4e3a-9662-edf66ad62498",
                  "parentUUID": "94bb53c5-316d-47a7-8b72-109bb55bc270",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03e6fb2f-6e57-4f60-ace6-3177f29558b5",
                "67de9320-bd8f-4ab3-96a8-4c6bfcc6ff67",
                "08a1699f-4a5a-4069-b20b-175cde9365ed",
                "012e5474-75c4-491a-b3e5-20fbc158fa0b",
                "b2dd3daf-3aa6-4e3a-9662-edf66ad62498"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9348c950-2aa2-40c3-9922-a82f211796e3",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.description(null));\nassert_1.default.deepStrictEqual(a, a.description('Hey Ho!'));",
                  "err": {},
                  "uuid": "7e01d574-4c0f-4e62-87cf-b6f412b0bad1",
                  "parentUUID": "9348c950-2aa2-40c3-9922-a82f211796e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a.description(), null);\na.description('blablabla');\nassert_1.default.deepStrictEqual(a.description(), 'blablabla');\na.description(null);\nassert_1.default.deepStrictEqual(a.description(), null);",
                  "err": {},
                  "uuid": "13744e49-c658-4c84-bad1-dd0d6d5d9edf",
                  "parentUUID": "9348c950-2aa2-40c3-9922-a82f211796e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    description: 'Huibuh!'\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Huibuh') > -1);",
                  "err": {},
                  "uuid": "1d12a598-e468-405b-864a-a0fbb9a769af",
                  "parentUUID": "9348c950-2aa2-40c3-9922-a82f211796e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300\n}, new event_1.default({\n    summary: 'Example Event'\n}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Example Event') > -1);",
                  "err": {},
                  "uuid": "49c00402-f2f0-4f08-a513-e68d716c63cb",
                  "parentUUID": "9348c950-2aa2-40c3-9922-a82f211796e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e01d574-4c0f-4e62-87cf-b6f412b0bad1",
                "13744e49-c658-4c84-bad1-dd0d6d5d9edf",
                "1d12a598-e468-405b-864a-a0fbb9a769af",
                "49c00402-f2f0-4f08-a513-e68d716c63cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3cfc8bc0-722b-4412-99e0-db1ffaff7900",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "e866cba8-86c7-46a6-b854-daf2eeb4f51c",
                  "parentUUID": "3cfc8bc0-722b-4412-99e0-db1ffaff7900",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e866cba8-86c7-46a6-b854-daf2eeb4f51c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "13b638a2-7b03-4448-a2fc-9c7708b5f818",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.type(alarm_1.ICalAlarmType.display);\na.trigger(120);\nassert_1.default.deepStrictEqual(a.toJSON(), {\n    attach: null,\n    description: null,\n    interval: null,\n    repeat: null,\n    trigger: 120,\n    type: 'display',\n    x: []\n});",
                  "err": {},
                  "uuid": "9be8ee53-8c61-422b-8665-f35dfceef8a9",
                  "parentUUID": "13b638a2-7b03-4448-a2fc-9c7708b5f818",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Alarm toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nnew alarm_1.default(a.toJSON(), new event_1.default({}, new calendar_1.default()));",
                  "err": {},
                  "uuid": "730bf6e6-a7c1-4632-9239-740871388f10",
                  "parentUUID": "13b638a2-7b03-4448-a2fc-9c7708b5f818",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9be8ee53-8c61-422b-8665-f35dfceef8a9",
                "730bf6e6-a7c1-4632-9239-740871388f10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a33c240-4188-41fb-9935-0fe5f3174c9d",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without type",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({ trigger: 300 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /`type`/);",
                  "err": {},
                  "uuid": "db696524-8c49-425f-8a2b-d3174814b137",
                  "parentUUID": "1a33c240-4188-41fb-9935-0fe5f3174c9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without trigger",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without trigger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "10bb09cf-ae54-4ca4-9180-7fdf6ad40b12",
                  "parentUUID": "1a33c240-4188-41fb-9935-0fe5f3174c9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, trigger: 300, repeat: 4 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /for `interval`/);",
                  "err": {},
                  "uuid": "94b55f13-fd3b-4216-af8a-a0e17fac82c0",
                  "parentUUID": "1a33c240-4188-41fb-9935-0fe5f3174c9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    interval: 60\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /for `repeat`/);",
                  "err": {},
                  "uuid": "a7969118-adbb-4b29-a4e0-e1244e421701",
                  "parentUUID": "1a33c240-4188-41fb-9935-0fe5f3174c9d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db696524-8c49-425f-8a2b-d3174814b137",
                "10bb09cf-ae54-4ca4-9180-7fdf6ad40b12",
                "94b55f13-fd3b-4216-af8a-a0e17fac82c0",
                "a7969118-adbb-4b29-a4e0-e1244e421701"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "757560cf-3751-42a5-aa35-68aca5e7bb0f",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7db33771-2b4e-49b5-b7ad-c9e47bbef9df",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Attendee constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    name: 'John Doe',\n    email: 'john@example.org',\n    mailto: 'john+calendar@example.org',\n    status: attendee_1.ICalAttendeeStatus.ACCEPTED,\n    role: attendee_1.ICalAttendeeRole.REQ,\n    rsvp: false,\n    type: attendee_1.ICalAttendeeType.INDIVIDUAL,\n    delegatedTo: null,\n    delegatedFrom: null,\n    x: []\n};\nconst event = new attendee_1.default(data, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "7d0939fc-6cb2-4f69-b363-bfcea0f6f029",
                  "parentUUID": "7db33771-2b4e-49b5-b7ad-c9e47bbef9df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    // @ts-ignore\n    new attendee_1.default({ email: 'foo@bar.com' });\n}, /`event`/);",
                  "err": {},
                  "uuid": "8f61d787-18bc-4407-b92b-8bdaa1c439e6",
                  "parentUUID": "7db33771-2b4e-49b5-b7ad-c9e47bbef9df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d0939fc-6cb2-4f69-b363-bfcea0f6f029",
                "8f61d787-18bc-4407-b92b-8bdaa1c439e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e8c01a0d-b3aa-4c1a-bee8-9dc092a84d14",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.name(), null);\na.name('Sebastian');\nassert_1.default.strictEqual(a.name(), 'Sebastian');",
                  "err": {},
                  "uuid": "b6af07a1-2447-45da-9273-8beb4921a481",
                  "parentUUID": "e8c01a0d-b3aa-4c1a-bee8-9dc092a84d14",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.name(null));\nassert_1.default.deepStrictEqual(a, a.name('Sebastian'));",
                  "err": {},
                  "uuid": "4fd016f1-2824-4780-a09d-20dfb3322639",
                  "parentUUID": "e8c01a0d-b3aa-4c1a-bee8-9dc092a84d14",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\na.name('Sebastian');\nassert_1.default.strictEqual(a.name(), 'Sebastian');\na.name(null);\nassert_1.default.strictEqual(a.name(), null);",
                  "err": {},
                  "uuid": "861f4865-479f-40f6-a067-1105627937c2",
                  "parentUUID": "e8c01a0d-b3aa-4c1a-bee8-9dc092a84d14",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b6af07a1-2447-45da-9273-8beb4921a481",
                "4fd016f1-2824-4780-a09d-20dfb3322639",
                "861f4865-479f-40f6-a067-1105627937c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "46d07af4-e6cb-45db-b96a-d793dbe74e60",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default())).email('foo@example.com');\nassert_1.default.strictEqual(a.email(), 'foo@example.com');",
                  "err": {},
                  "uuid": "e39bafe1-291d-4a88-bfe0-3235deb12803",
                  "parentUUID": "46d07af4-e6cb-45db-b96a-d793dbe74e60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.email('foo@example.com'));",
                  "err": {},
                  "uuid": "7f6824b5-b2b6-4190-a3f6-61d2a58565b9",
                  "parentUUID": "46d07af4-e6cb-45db-b96a-d793dbe74e60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('mail@example.com') > -1);",
                  "err": {},
                  "uuid": "9c2d65dc-a477-4d75-8c7f-e08a0934fa06",
                  "parentUUID": "46d07af4-e6cb-45db-b96a-d793dbe74e60",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e39bafe1-291d-4a88-bfe0-3235deb12803",
                "7f6824b5-b2b6-4190-a3f6-61d2a58565b9",
                "9c2d65dc-a477-4d75-8c7f-e08a0934fa06"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3038a1a-5589-4d04-8caa-80e8b3caf00a",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.mailto(), null);\na.mailto('foo@example.com');\nassert_1.default.strictEqual(a.mailto(), 'foo@example.com');",
                  "err": {},
                  "uuid": "61000db1-dd4f-4fca-8453-a3f2624ecde4",
                  "parentUUID": "b3038a1a-5589-4d04-8caa-80e8b3caf00a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.mailto(null));\nassert_1.default.deepStrictEqual(a, a.mailto('foo@example.com'));",
                  "err": {},
                  "uuid": "7eb079b7-c52a-418c-ab82-2173f1afbc9f",
                  "parentUUID": "b3038a1a-5589-4d04-8caa-80e8b3caf00a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com' }, new event_1.default({}, new calendar_1.default()));\na.mailto('mail2@example2.com');\nassert_1.default.ok(a.toString().indexOf('EMAIL=mail@example.com') > -1 &&\n    a.toString().indexOf('MAILTO:mail2@example2.com') > -1);",
                  "err": {},
                  "uuid": "446561e9-dca4-4ef2-8aab-9f90a83b60be",
                  "parentUUID": "b3038a1a-5589-4d04-8caa-80e8b3caf00a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61000db1-dd4f-4fca-8453-a3f2624ecde4",
                "7eb079b7-c52a-418c-ab82-2173f1afbc9f",
                "446561e9-dca4-4ef2-8aab-9f90a83b60be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7973d71-269f-4fda-918f-c9037b38e5b4",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.role(attendee_1.ICalAttendeeRole.REQ));",
                  "err": {},
                  "uuid": "1eafd38b-6dd8-49e7-b36f-689faf195ea8",
                  "parentUUID": "b7973d71-269f-4fda-918f-c9037b38e5b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default())).role(attendee_1.ICalAttendeeRole.REQ);\nassert_1.default.strictEqual(a.role(), 'REQ-PARTICIPANT');",
                  "err": {},
                  "uuid": "523a8de1-b555-4e1a-a0e1-46c4ac75cc7a",
                  "parentUUID": "b7973d71-269f-4fda-918f-c9037b38e5b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.role('');\n}, /Input must be one of the following: CHAIR, REQ-PARTICIPANT, OPT-PARTICIPANT, NON-PARTICIPANT/);",
                  "err": {},
                  "uuid": "2855a633-dc04-4457-88d2-e6769b22a4c6",
                  "parentUUID": "b7973d71-269f-4fda-918f-c9037b38e5b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.role('COOKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "56fd6b62-c5fd-4d87-9c42-bbe55da671ce",
                  "parentUUID": "b7973d71-269f-4fda-918f-c9037b38e5b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mail@example.com',\n    role: attendee_1.ICalAttendeeRole.NON\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('NON-PARTICIPANT') > -1);",
                  "err": {},
                  "uuid": "3a1a591e-42bc-4f14-8f51-1ff8be193e6c",
                  "parentUUID": "b7973d71-269f-4fda-918f-c9037b38e5b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1eafd38b-6dd8-49e7-b36f-689faf195ea8",
                "523a8de1-b555-4e1a-a0e1-46c4ac75cc7a",
                "2855a633-dc04-4457-88d2-e6769b22a4c6",
                "56fd6b62-c5fd-4d87-9c42-bbe55da671ce",
                "3a1a591e-42bc-4f14-8f51-1ff8be193e6c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eb6d09e7-598f-4399-9c78-3759c1acfc0c",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.rsvp(null));\nassert_1.default.deepStrictEqual(a, a.rsvp(true));",
                  "err": {},
                  "uuid": "41958a96-86a9-4fbd-8517-0f23c82848d8",
                  "parentUUID": "eb6d09e7-598f-4399-9c78-3759c1acfc0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\na.rsvp(true);\nassert_1.default.strictEqual(a.rsvp(), true);\na.rsvp(false);\nassert_1.default.strictEqual(a.rsvp(), false);",
                  "err": {},
                  "uuid": "7ea3a93d-5734-4e2d-a47e-9cea91089bd8",
                  "parentUUID": "eb6d09e7-598f-4399-9c78-3759c1acfc0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.rsvp(), null);\na.rsvp(false);\nassert_1.default.strictEqual(a.rsvp(), false);\na.rsvp(null);\nassert_1.default.strictEqual(a.rsvp(), null);",
                  "err": {},
                  "uuid": "37bcecbc-c641-46c6-a81c-f7a609dc6d67",
                  "parentUUID": "eb6d09e7-598f-4399-9c78-3759c1acfc0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com', rsvp: true }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf(';RSVP=TRUE') > -1);",
                  "err": {},
                  "uuid": "984f9b27-ee24-4cd5-9f5f-e300cd97c390",
                  "parentUUID": "eb6d09e7-598f-4399-9c78-3759c1acfc0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41958a96-86a9-4fbd-8517-0f23c82848d8",
                "7ea3a93d-5734-4e2d-a47e-9cea91089bd8",
                "37bcecbc-c641-46c6-a81c-f7a609dc6d67",
                "984f9b27-ee24-4cd5-9f5f-e300cd97c390"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7b8c553b-26d9-4526-b42b-5da6dc926b22",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.status(null));\nassert_1.default.deepStrictEqual(a, a.status(attendee_1.ICalAttendeeStatus.ACCEPTED));",
                  "err": {},
                  "uuid": "b5fffcdf-221e-4975-a4d5-34fc95fb5544",
                  "parentUUID": "7b8c553b-26d9-4526-b42b-5da6dc926b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.status(), null);\na.status(attendee_1.ICalAttendeeStatus.ACCEPTED);\nassert_1.default.strictEqual(a.status(), 'ACCEPTED');\na.status(null);\nassert_1.default.strictEqual(a.status(), null);",
                  "err": {},
                  "uuid": "40abe2c7-0ba2-4e70-bdbb-00b97c1b8fbe",
                  "parentUUID": "7b8c553b-26d9-4526-b42b-5da6dc926b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.status('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "d1f87c0c-8b71-48f7-b048-4699dd114044",
                  "parentUUID": "7b8c553b-26d9-4526-b42b-5da6dc926b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com', status: attendee_1.ICalAttendeeStatus.DECLINED }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('DECLINED') > -1);",
                  "err": {},
                  "uuid": "c6defa88-43f4-4e51-b333-210c0b410a12",
                  "parentUUID": "7b8c553b-26d9-4526-b42b-5da6dc926b22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com', status: attendee_1.ICalAttendeeStatus.NEEDSACTION }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('NEEDS-ACTION') > -1);",
                  "err": {},
                  "uuid": "8cdc52df-59c4-4934-a567-77cdde902a4c",
                  "parentUUID": "7b8c553b-26d9-4526-b42b-5da6dc926b22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5fffcdf-221e-4975-a4d5-34fc95fb5544",
                "40abe2c7-0ba2-4e70-bdbb-00b97c1b8fbe",
                "d1f87c0c-8b71-48f7-b048-4699dd114044",
                "c6defa88-43f4-4e51-b333-210c0b410a12",
                "8cdc52df-59c4-4934-a567-77cdde902a4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "54744ff3-15a7-4c08-94d8-b3088d9a0711",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a.type(null), a);\nassert_1.default.deepStrictEqual(a.type(attendee_1.ICalAttendeeType.INDIVIDUAL), a);",
                  "err": {},
                  "uuid": "21060ece-a36a-46af-9e7f-dc3ca603751d",
                  "parentUUID": "54744ff3-15a7-4c08-94d8-b3088d9a0711",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.type(), null);\na.type(attendee_1.ICalAttendeeType.ROOM);\nassert_1.default.strictEqual(a.type(), 'ROOM');\na.type(null);\nassert_1.default.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "8ad38f8f-413a-4322-9581-ccea75c3c8ed",
                  "parentUUID": "54744ff3-15a7-4c08-94d8-b3088d9a0711",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.type('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "c8d65983-ca0a-43e8-b8b2-125eaadc9e05",
                  "parentUUID": "54744ff3-15a7-4c08-94d8-b3088d9a0711",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mailing-list@example.com',\n    type: attendee_1.ICalAttendeeType.GROUP\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('GROUP') > -1);",
                  "err": {},
                  "uuid": "85392a90-2034-43a3-8257-48cb63016fde",
                  "parentUUID": "54744ff3-15a7-4c08-94d8-b3088d9a0711",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "21060ece-a36a-46af-9e7f-dc3ca603751d",
                "8ad38f8f-413a-4322-9581-ccea75c3c8ed",
                "c8d65983-ca0a-43e8-b8b2-125eaadc9e05",
                "85392a90-2034-43a3-8257-48cb63016fde"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e865fe30-0a9b-4922-a20e-9a2f0eae5311",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.delegatedTo(null));\nassert_1.default.deepStrictEqual(a, a.delegatedTo('foo@example.com'));",
                  "err": {},
                  "uuid": "7d1b4312-5455-4e1d-8ec4-3c3e40f28166",
                  "parentUUID": "e865fe30-0a9b-4922-a20e-9a2f0eae5311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.delegatedTo(), null);\na.delegatedTo('foo@example.com');\nconst result = a.delegatedTo();\nassert_1.default.ok(result);\nassert_1.default.strictEqual(result.email(), 'foo@example.com');\na.delegatedTo(null);\nassert_1.default.strictEqual(a.delegatedTo(), null);",
                  "err": {},
                  "uuid": "1bcd9c40-6891-4ecf-82e3-677c5e940929",
                  "parentUUID": "e865fe30-0a9b-4922-a20e-9a2f0eae5311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mail@example.com',\n    delegatedTo: 'foo@example.com'\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('foo@example') > -1);",
                  "err": {},
                  "uuid": "95cffaf0-3f42-4766-9d88-7c2adf19508a",
                  "parentUUID": "e865fe30-0a9b-4922-a20e-9a2f0eae5311",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d1b4312-5455-4e1d-8ec4-3c3e40f28166",
                "1bcd9c40-6891-4ecf-82e3-677c5e940929",
                "95cffaf0-3f42-4766-9d88-7c2adf19508a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9c951cc-53a3-48c2-9578-55d3fd1728fb",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.delegatedFrom(null));\nassert_1.default.deepStrictEqual(a, a.delegatedFrom('foo@example.com'));",
                  "err": {},
                  "uuid": "8e8b5874-7e46-45d9-a176-73693f898a0c",
                  "parentUUID": "a9c951cc-53a3-48c2-9578-55d3fd1728fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.delegatedFrom(), null);\na.delegatedFrom('foo@example.com');\nconst result = a.delegatedFrom();\nassert_1.default.ok(result);\nassert_1.default.strictEqual(result.email(), 'foo@example.com');\na.delegatedFrom(null);\nassert_1.default.strictEqual(a.delegatedFrom(), null);",
                  "err": {},
                  "uuid": "73ad8ace-7739-4951-b10b-feee08943fbc",
                  "parentUUID": "a9c951cc-53a3-48c2-9578-55d3fd1728fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com', delegatedFrom: 'foo@example.com' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('foo@example.com') > -1);",
                  "err": {},
                  "uuid": "25ec0748-1140-4870-952c-f215468c70fb",
                  "parentUUID": "a9c951cc-53a3-48c2-9578-55d3fd1728fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e8b5874-7e46-45d9-a176-73693f898a0c",
                "73ad8ace-7739-4951-b10b-feee08943fbc",
                "25ec0748-1140-4870-952c-f215468c70fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b1764bd-24bf-42d4-8ff3-4ad273bb03c2",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.delegatesTo({}) instanceof attendee_1.default);",
                  "err": {},
                  "uuid": "f00462a1-6506-4d6a-979c-81367acefb08",
                  "parentUUID": "4b1764bd-24bf-42d4-8ff3-4ad273bb03c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = new attendee_1.default({ name: 'Muh' }, event);\nassert_1.default.deepStrictEqual(new attendee_1.default({}, event).delegatesTo(attendee), attendee);",
                  "err": {},
                  "uuid": "118cfbe5-8013-4c9d-8ce4-a2491a1817c2",
                  "parentUUID": "4b1764bd-24bf-42d4-8ff3-4ad273bb03c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee = new attendee_1.default({ name: 'Zac' }, new event_1.default({}, new calendar_1.default()))\n    .delegatesTo({ name: 'Cody' });\nassert_1.default.strictEqual(attendee.name(), 'Cody');",
                  "err": {},
                  "uuid": "8cd77ef4-a55c-49d9-b025-2eb1dfa58df6",
                  "parentUUID": "4b1764bd-24bf-42d4-8ff3-4ad273bb03c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f00462a1-6506-4d6a-979c-81367acefb08",
                "118cfbe5-8013-4c9d-8ce4-a2491a1817c2",
                "8cd77ef4-a55c-49d9-b025-2eb1dfa58df6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f278651-2228-4bfc-8497-83235f618588",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.delegatesFrom({}) instanceof attendee_1.default);",
                  "err": {},
                  "uuid": "918f803c-adb8-4266-9ecf-7a9b946fa622",
                  "parentUUID": "3f278651-2228-4bfc-8497-83235f618588",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = new attendee_1.default({ name: 'Muh' }, event);\nassert_1.default.deepStrictEqual(new attendee_1.default({}, event).delegatesFrom(attendee), attendee);",
                  "err": {},
                  "uuid": "f311f17c-b871-473f-941c-19c17237dcba",
                  "parentUUID": "3f278651-2228-4bfc-8497-83235f618588",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ name: 'Zac' }, new event_1.default({}, new calendar_1.default())).delegatesFrom({ name: 'Cody' });\nassert_1.default.strictEqual(a.name(), 'Cody');",
                  "err": {},
                  "uuid": "d8ac7e2b-7310-4b41-8b94-0070bf3ba837",
                  "parentUUID": "3f278651-2228-4bfc-8497-83235f618588",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "918f803c-adb8-4266-9ecf-7a9b946fa622",
                "f311f17c-b871-473f-941c-19c17237dcba",
                "d8ac7e2b-7310-4b41-8b94-0070bf3ba837"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac47d919-a359-45b6-9408-46c990f777f6",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works as expected",
                  "fullTitle": "ical-generator Attendee x() works as expected",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'foo@example.org' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.x('X-NUM-GUESTS', '5'));\nassert_1.default.ok(a.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;X-NUM-GUESTS=5:MAILTO:foo@example.org'));",
                  "err": {},
                  "uuid": "3f305073-5889-49dc-b594-c72c363c2445",
                  "parentUUID": "ac47d919-a359-45b6-9408-46c990f777f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f305073-5889-49dc-b594-c72c363c2445"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f3fcd64a-08d7-4b42-a170-6c47649a2706",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\na.name('Max Mustermann');\na.delegatesTo('Moritz <moritz@example.com>');\nassert_1.default.deepStrictEqual(a.toJSON(), {\n    delegatedFrom: null,\n    delegatedTo: 'moritz@example.com',\n    email: null,\n    mailto: null,\n    name: 'Max Mustermann',\n    role: 'REQ-PARTICIPANT',\n    rsvp: null,\n    status: 'DELEGATED',\n    type: null,\n    x: []\n});",
                  "err": {},
                  "uuid": "b8a264a4-e452-4ed1-938c-ab4ba7d22353",
                  "parentUUID": "f3fcd64a-08d7-4b42-a170-6c47649a2706",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Attendee toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nnew attendee_1.default(a.toJSON(), new event_1.default({}, new calendar_1.default()));",
                  "err": {},
                  "uuid": "728e03fd-4866-4795-bfb0-c98ec6687354",
                  "parentUUID": "f3fcd64a-08d7-4b42-a170-6c47649a2706",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8a264a4-e452-4ed1-938c-ab4ba7d22353",
                "728e03fd-4866-4795-bfb0-c98ec6687354"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "347b6c51-f8b6-4804-8bba-c4de2644b99f",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee generate() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ name: 'Testuser' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /`email`/);",
                  "err": {},
                  "uuid": "247237f8-b633-480a-b47e-93e0e2a599b7",
                  "parentUUID": "347b6c51-f8b6-4804-8bba-c4de2644b99f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "247237f8-b633-480a-b47e-93e0e2a599b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1f7f3b2a-23fa-4b2f-a19f-2eac1b698cf7",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b5f37bd7-6c8d-4bc0-b8b5-af6efc178cfe",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    prodId: '//sebbo.net//ical-generator//EN',\n    method: calendar_1.ICalCalendarMethod.PUBLISH,\n    name: 'Test Calendar',\n    description: 'Hi, I am the description.',\n    timezone: null,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    scale: null,\n    ttl: null,\n    events: [],\n    x: []\n};\nconst cal = new calendar_1.default(data);\nassert_1.default.deepStrictEqual(cal.toJSON(), data);",
                  "err": {},
                  "uuid": "29cb93b0-3781-41b6-baca-4a49b5c9b4c3",
                  "parentUUID": "b5f37bd7-6c8d-4bc0-b8b5-af6efc178cfe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29cb93b0-3781-41b6-baca-4a49b5c9b4c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "581d64f7-e9f0-4f12-9d1a-30fbe34194d9",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.prodId('//loremipsum.de//ical-tests//EN');\nassert_1.default.strictEqual(cal.prodId(), '//loremipsum.de//ical-tests//EN');",
                  "err": {},
                  "uuid": "15d8e891-c9b9-40e5-9b83-7489e075761d",
                  "parentUUID": "581d64f7-e9f0-4f12-9d1a-30fbe34194d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.prodId('//loremipsum.de//ical-tests//EN'));",
                  "err": {},
                  "uuid": "3244cddc-74a5-4a42-83bf-c7d4e392e5ae",
                  "parentUUID": "581d64f7-e9f0-4f12-9d1a-30fbe34194d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformed",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when string misformed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    cal.prodId('enemenemuh!');\n}, /`prodId`/);",
                  "err": {},
                  "uuid": "d515fa05-2794-4286-aa76-50791f511818",
                  "parentUUID": "581d64f7-e9f0-4f12-9d1a-30fbe34194d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    cal.prodId(256);\n}, /`prodid`/);",
                  "err": {},
                  "uuid": "acf389fc-36bb-43b3-ad2e-acaaa11dca1d",
                  "parentUUID": "581d64f7-e9f0-4f12-9d1a-30fbe34194d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        product: 'ical-tests'\n    });\n}, /`prodid\\.company`/);",
                  "err": {},
                  "uuid": "2f0454f6-9bb6-4155-a43e-46071ecb21ec",
                  "parentUUID": "581d64f7-e9f0-4f12-9d1a-30fbe34194d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        company: 'sebbo.net'\n    });\n}, /`prodid\\.product`/);",
                  "err": {},
                  "uuid": "5d4c9c44-ca32-4b76-96d6-f647b3ed6b97",
                  "parentUUID": "581d64f7-e9f0-4f12-9d1a-30fbe34194d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests'\n});\nassert_1.default.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//EN');",
                  "err": {},
                  "uuid": "236de882-c20c-43fe-851f-8ae3d2f250f2",
                  "parentUUID": "581d64f7-e9f0-4f12-9d1a-30fbe34194d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests',\n    language: 'DE'\n});\nassert_1.default.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//DE');",
                  "err": {},
                  "uuid": "e3cfbe72-878f-4bf5-a6aa-23365abcca5b",
                  "parentUUID": "581d64f7-e9f0-4f12-9d1a-30fbe34194d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15d8e891-c9b9-40e5-9b83-7489e075761d",
                "3244cddc-74a5-4a42-83bf-c7d4e392e5ae",
                "d515fa05-2794-4286-aa76-50791f511818",
                "acf389fc-36bb-43b3-ad2e-acaaa11dca1d",
                "2f0454f6-9bb6-4155-a43e-46071ecb21ec",
                "5d4c9c44-ca32-4b76-96d6-f647b3ed6b97",
                "236de882-c20c-43fe-851f-8ae3d2f250f2",
                "e3cfbe72-878f-4bf5-a6aa-23365abcca5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "407b6c04-891c-4d96-8234-f29d522a823f",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default();\nassert_1.default.deepStrictEqual(c, c.method(null), 'method(null)');\nassert_1.default.deepStrictEqual(c, c.method(calendar_1.ICalCalendarMethod.PUBLISH), 'method(enum)');",
                  "err": {},
                  "uuid": "b8aa8fe0-b0ea-4e51-bf76-cb9b8df6e421",
                  "parentUUID": "407b6c04-891c-4d96-8234-f29d522a823f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default();\nassert_1.default.strictEqual(c.method(), null);\nc.method(null);\nassert_1.default.strictEqual(c.method(), null);\nc.method(calendar_1.ICalCalendarMethod.PUBLISH);\nassert_1.default.strictEqual(c.method(), 'PUBLISH');\nc.method(null);\nassert_1.default.strictEqual(c.method(), null);",
                  "err": {},
                  "uuid": "96658d64-a64f-45cf-9eee-6729403b9080",
                  "parentUUID": "407b6c04-891c-4d96-8234-f29d522a823f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    c.method('KICK ASS');\n}, /Input must be one of the following: PUBLISH, REQUEST, REPLY, ADD, CANCEL, REFRESH, COUNTER, DECLINECOUNTER/);",
                  "err": {},
                  "uuid": "d96b4d95-ffec-4db3-8ba3-520456cc0e37",
                  "parentUUID": "407b6c04-891c-4d96-8234-f29d522a823f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default({ method: calendar_1.ICalCalendarMethod.PUBLISH });\nassert_1.default.strictEqual(c.method(), 'PUBLISH');\nc.method(calendar_1.ICalCalendarMethod.ADD);\nassert_1.default.strictEqual(c.method(), 'ADD');",
                  "err": {},
                  "uuid": "24367405-fe8b-4b4c-be03-c1000e366e7f",
                  "parentUUID": "407b6c04-891c-4d96-8234-f29d522a823f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8aa8fe0-b0ea-4e51-bf76-cb9b8df6e421",
                "96658d64-a64f-45cf-9eee-6729403b9080",
                "d96b4d95-ffec-4db3-8ba3-520456cc0e37",
                "24367405-fe8b-4b4c-be03-c1000e366e7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "128888a9-2f45-409f-9528-47f79406e45d",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.name(null));\nassert_1.default.deepStrictEqual(cal, cal.name('Testevents'));",
                  "err": {},
                  "uuid": "8f7f48ae-738c-429f-a3e3-7130745fe3c3",
                  "parentUUID": "128888a9-2f45-409f-9528-47f79406e45d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.name(), null);\ncal.name('Testevents');\nassert_1.default.strictEqual(cal.name(), 'Testevents');\ncal.name(null);\nassert_1.default.strictEqual(cal.name(), null);",
                  "err": {},
                  "uuid": "f1f70fef-aebe-4c09-82e8-37f801a9c718",
                  "parentUUID": "128888a9-2f45-409f-9528-47f79406e45d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().name('Testevents');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert_1.default.strictEqual(cal.name(), 'Testevents');",
                  "err": {},
                  "uuid": "9536abd1-c088-4864-979d-b4592552f041",
                  "parentUUID": "128888a9-2f45-409f-9528-47f79406e45d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f7f48ae-738c-429f-a3e3-7130745fe3c3",
                "f1f70fef-aebe-4c09-82e8-37f801a9c718",
                "9536abd1-c088-4864-979d-b4592552f041"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4be56b0a-9558-4bae-bb9b-dc43ed5f8488",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.description(null));\nassert_1.default.deepStrictEqual(cal, cal.description('Testbeschreibung'));",
                  "err": {},
                  "uuid": "d262aa16-4c6c-45df-8500-a80c6315439b",
                  "parentUUID": "4be56b0a-9558-4bae-bb9b-dc43ed5f8488",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.description(), null);\ncal.description('Testbeschreibung');\nassert_1.default.strictEqual(cal.description(), 'Testbeschreibung');\ncal.description(null);\nassert_1.default.strictEqual(cal.description(), null);",
                  "err": {},
                  "uuid": "8e31f3e4-1052-4b2a-b499-67ee8545fd3b",
                  "parentUUID": "4be56b0a-9558-4bae-bb9b-dc43ed5f8488",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().description('Testbeschreibung');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.description(), 'Testbeschreibung');",
                  "err": {},
                  "uuid": "a07a8765-c624-46a7-8628-da993048e6ec",
                  "parentUUID": "4be56b0a-9558-4bae-bb9b-dc43ed5f8488",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d262aa16-4c6c-45df-8500-a80c6315439b",
                "8e31f3e4-1052-4b2a-b499-67ee8545fd3b",
                "a07a8765-c624-46a7-8628-da993048e6ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22ffa48a-f2cb-4dcf-87a1-99c45abe5ab0",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.timezone('Europe/Berlin'));\nassert_1.default.deepStrictEqual(cal, cal.timezone(null));\nassert_1.default.deepStrictEqual(cal, cal.timezone({\n    name: 'Europe/Berlin',\n    generator: ical_timezones_1.getVtimezoneComponent\n}));",
                  "err": {},
                  "uuid": "2814fc3f-ebd2-471a-86ea-2630839251bf",
                  "parentUUID": "22ffa48a-f2cb-4dcf-87a1-99c45abe5ab0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().timezone('Europe/Berlin');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert_1.default.strictEqual(cal.timezone(), null);\ncal.timezone({ name: 'Europe/Berlin' });\nassert_1.default.strictEqual(cal.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "707e939e-729e-4139-ab2a-e3a669006d61",
                  "parentUUID": "22ffa48a-f2cb-4dcf-87a1-99c45abe5ab0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2814fc3f-ebd2-471a-86ea-2630839251bf",
                "707e939e-729e-4139-ab2a-e3a669006d61"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "82472bbc-0aea-4587-96d5-ae043d3def72",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal.ttl(60 * 60 * 24), cal);\nassert_1.default.deepStrictEqual(cal.ttl(moment_1.default.duration(2, 'days')), cal);\nassert_1.default.deepStrictEqual(cal.ttl(null), cal);",
                  "err": {},
                  "uuid": "a2d48520-2831-42e2-8b2e-e6f1d9a48c5f",
                  "parentUUID": "82472bbc-0aea-4587-96d5-ae043d3def72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.ttl(), null);\ncal.ttl(86400);\nassert_1.default.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "46ed1b52-5f00-4fbf-aa23-fd542e895b4a",
                  "parentUUID": "82472bbc-0aea-4587-96d5-ae043d3def72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().ttl(86400);\nassert_1.default.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "ef75b5df-2a88-44b2-813c-77bb09ebffff",
                  "parentUUID": "82472bbc-0aea-4587-96d5-ae043d3def72",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2d48520-2831-42e2-8b2e-e6f1d9a48c5f",
                "46ed1b52-5f00-4fbf-aa23-fd542e895b4a",
                "ef75b5df-2a88-44b2-813c-77bb09ebffff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9048f8df-90ad-4001-94dc-c1908d17520b",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.url('https://example.com/calendar.ical'));",
                  "err": {},
                  "uuid": "c1bd113f-abf1-4ea4-992c-b84e13699712",
                  "parentUUID": "9048f8df-90ad-4001-94dc-c1908d17520b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.url(), null);\ncal.url('https://example.com/calendar.ical');\nassert_1.default.strictEqual(cal.url(), 'https://example.com/calendar.ical');\ncal.url(null);\nassert_1.default.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "f9489444-13d5-49dc-81c7-d2d1437b14db",
                  "parentUUID": "9048f8df-90ad-4001-94dc-c1908d17520b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().url('https://example.com/calendar.ical');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.url(), 'https://example.com/calendar.ical');",
                  "err": {},
                  "uuid": "304eb723-cb4e-4cdb-acb3-3d127afbd719",
                  "parentUUID": "9048f8df-90ad-4001-94dc-c1908d17520b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1bd113f-abf1-4ea4-992c-b84e13699712",
                "f9489444-13d5-49dc-81c7-d2d1437b14db",
                "304eb723-cb4e-4cdb-acb3-3d127afbd719"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9d293518-ea12-43d8-8c59-f296528d52f0",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.scale('gregorian'));",
                  "err": {},
                  "uuid": "f23548b3-91ab-48b0-a4da-494639b99186",
                  "parentUUID": "9d293518-ea12-43d8-8c59-f296528d52f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.scale(), null);\ncal.scale('GREGORIAN');\nassert_1.default.strictEqual(cal.scale(), 'GREGORIAN');\ncal.scale(null);\nassert_1.default.strictEqual(cal.scale(), null);",
                  "err": {},
                  "uuid": "aa5a9a19-0f26-45e2-9517-c72eacc9a097",
                  "parentUUID": "9d293518-ea12-43d8-8c59-f296528d52f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().scale('gregorian');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.scale(), 'GREGORIAN');",
                  "err": {},
                  "uuid": "c975dbeb-8000-4bd0-bd96-bbf4b441e54d",
                  "parentUUID": "9d293518-ea12-43d8-8c59-f296528d52f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f23548b3-91ab-48b0-a4da-494639b99186",
                "aa5a9a19-0f26-45e2-9517-c72eacc9a097",
                "c975dbeb-8000-4bd0-bd96-bbf4b441e54d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6c298a45-ed02-4825-bdf6-9a3ba75a91df",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.ok(cal.createEvent({}) instanceof event_1.default);",
                  "err": {},
                  "uuid": "a121e6f9-f106-4124-9bf2-60e9c34757ee",
                  "parentUUID": "6c298a45-ed02-4825-bdf6-9a3ba75a91df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nconst event = cal.createEvent({ summary: 'Patch-Day' });\nassert_1.default.strictEqual(event.summary(), 'Patch-Day');",
                  "err": {},
                  "uuid": "85cfd7a7-a50d-4a82-88c2-25eaba1f39e7",
                  "parentUUID": "6c298a45-ed02-4825-bdf6-9a3ba75a91df",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.doesNotThrow(function () {\n    new calendar_1.default().createEvent({\n        start: new Date(),\n        summary: 'Patch-Day'\n    });\n}, Error);",
                  "err": {},
                  "uuid": "94743090-2f0b-4f83-ade5-461b910469c6",
                  "parentUUID": "6c298a45-ed02-4825-bdf6-9a3ba75a91df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a121e6f9-f106-4124-9bf2-60e9c34757ee",
                "85cfd7a7-a50d-4a82-88c2-25eaba1f39e7",
                "94743090-2f0b-4f83-ade5-461b910469c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "94e1ef32-27fe-4a7d-a1fa-7bab75e69f80",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.events().length, 0);\nconst event = cal.createEvent({});\nassert_1.default.strictEqual(cal.events().length, 1);\nassert_1.default.deepStrictEqual(cal.events()[0], event);",
                  "err": {},
                  "uuid": "9995206d-ddc7-4a45-a60f-131f5076dcd7",
                  "parentUUID": "94e1ef32-27fe-4a7d-a1fa-7bab75e69f80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.length(), 0);\nconst cal2 = cal.events([{ summary: 'Event A' }, { summary: 'Event B' }]);\nassert_1.default.strictEqual(cal.length(), 2);\nassert_1.default.deepStrictEqual(cal2, cal);",
                  "err": {},
                  "uuid": "91b50cc2-5763-4dab-85c4-38a66ad0ee4e",
                  "parentUUID": "94e1ef32-27fe-4a7d-a1fa-7bab75e69f80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9995206d-ddc7-4a45-a60f-131f5076dcd7",
                "91b50cc2-5763-4dab-85c4-38a66ad0ee4e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "080949ad-3669-4065-b9cc-5219db2fe916",
              "title": "clear()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do the job",
                  "fullTitle": "ical-generator Calendar clear() should do the job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.createEvent({});\nassert_1.default.strictEqual(cal.events().length, 1);\nassert_1.default.deepStrictEqual(cal.clear(), cal);\nassert_1.default.strictEqual(cal.events().length, 0);",
                  "err": {},
                  "uuid": "7d6b1a5f-33bb-44f2-be84-54283b5edcfc",
                  "parentUUID": "080949ad-3669-4065-b9cc-5219db2fe916",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d6b1a5f-33bb-44f2-be84-54283b5edcfc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84088539-e501-462c-adf9-fbb905dbce48",
              "title": "save()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all public methods and save it",
                  "fullTitle": "ical-generator Calendar save() should return all public methods and save it",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = path_1.join(__dirname, 'save.ical');\nconst cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.save(file, function () {\n    assert_1.default.ok(fs_1.existsSync(file));\n    fs_1.unlinkSync(file);\n    assert_1.default.deepStrictEqual(cal, cal.save(file, function () {\n        assert_1.default.ok(fs_1.existsSync(file));\n        fs_1.unlinkSync(file);\n        done();\n    }));\n}));",
                  "err": {},
                  "uuid": "6805989a-9a7b-44e1-9e60-dc057870984a",
                  "parentUUID": "84088539-e501-462c-adf9-fbb905dbce48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be usable with promises",
                  "fullTitle": "ical-generator Calendar save() should be usable with promises",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const file = path_1.join(__dirname, 'save.ical');\n    const cal = new calendar_1.default();\n    yield cal.save(file);\n    assert_1.default.ok(fs_1.existsSync(file));\n    fs_1.unlinkSync(file);\n});",
                  "err": {},
                  "uuid": "c344fca9-29b5-41e9-872b-1a53dfb77aa1",
                  "parentUUID": "84088539-e501-462c-adf9-fbb905dbce48",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar save() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = path_1.join(__dirname, 'save.ical');\nconst cal = new calendar_1.default();\ncal.createEvent({});\nassert_1.default.throws(function () {\n    cal.save(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "be783ab8-1eb4-49ac-8f78-2dc4c017d0df",
                  "parentUUID": "84088539-e501-462c-adf9-fbb905dbce48",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6805989a-9a7b-44e1-9e60-dc057870984a",
                "c344fca9-29b5-41e9-872b-1a53dfb77aa1",
                "be783ab8-1eb4-49ac-8f78-2dc4c017d0df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3dc897da-5967-4590-8ced-492847004adb",
              "title": "saveSync()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should save it",
                  "fullTitle": "ical-generator Calendar saveSync() should save it",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = path_1.join(__dirname, 'save_sync.ical');\nconst cal = new calendar_1.default();\ncal.saveSync(file);\nassert_1.default.ok(fs_1.existsSync(file));\nfs_1.unlinkSync(file);\ncal.saveSync(file);\nassert_1.default.ok(fs_1.existsSync(file));\nfs_1.unlinkSync(file);",
                  "err": {},
                  "uuid": "dc1b1623-471a-4a6c-bbf8-282be2752c57",
                  "parentUUID": "3dc897da-5967-4590-8ced-492847004adb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar saveSync() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = path_1.join(__dirname, 'save_sync.ical');\nconst cal = new calendar_1.default();\ncal.createEvent({});\nassert_1.default.throws(function () {\n    cal.saveSync(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "c98edf8b-1ec0-422d-a781-2e87aa41a4b7",
                  "parentUUID": "3dc897da-5967-4590-8ced-492847004adb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc1b1623-471a-4a6c-bbf8-282be2752c57",
                "c98edf8b-1ec0-422d-a781-2e87aa41a4b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c71034d-99f5-4834-a13b-aa38b96613b1",
              "title": "serve()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar serve() should work",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = new calendar_1.default();\n    cal.createEvent({\n        start: new Date(),\n        end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n        summary: 'HTTP Calendar Event'\n    });\n    const port = yield portfinder_1.getPortPromise();\n    return new Promise(done => {\n        const server = http.createServer((req, res) => {\n            cal.serve(res);\n        }).listen(port, function () {\n            function request(cb) {\n                // make request\n                const req = http.request({ port }, function (res) {\n                    let file = '';\n                    assert_1.default.strictEqual(res.headers['content-type'], 'text/calendar; charset=utf-8', 'Header: text/calendar; charset=utf-8');\n                    assert_1.default.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"calendar.ics\"', 'Content-Disposition');\n                    res.setEncoding('utf8');\n                    res.on('data', function (chunk) {\n                        file += chunk;\n                    });\n                    res.on('end', function () {\n                        assert_1.default.strictEqual(file, cal.toString());\n                        cb();\n                    });\n                });\n                req.on('error', function (err) {\n                    assert_1.default.fail(err);\n                });\n                req.end();\n            }\n            request(() => {\n                request(() => {\n                    server.close(() => done());\n                });\n            });\n        });\n    });\n});",
                  "err": {},
                  "uuid": "c5281414-3b74-4c3c-a857-8a92b85c28a3",
                  "parentUUID": "0c71034d-99f5-4834-a13b-aa38b96613b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c5281414-3b74-4c3c-a857-8a92b85c28a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "57fce570-31a4-47c0-ba29-39d621a9273a",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "d9ee1069-3bc4-4a2e-b5a9-5e93d0986e5b",
                  "parentUUID": "57fce570-31a4-47c0-ba29-39d621a9273a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));\nassert_1.default.deepEqual(cal.x(), [{\n        key: 'X-FOO',\n        value: 'bar'\n    }]);\nassert_1.default.deepStrictEqual(cal, cal.x('X-LOREM', 'ipsum'));\nassert_1.default.deepEqual(cal.x(), [\n    { key: 'X-FOO', value: 'bar' },\n    { key: 'X-LOREM', value: 'ipsum' }\n]);\nassert_1.default.throws(() => {\n    cal.x('LOREM', 'ipsum');\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x('X-LOREM', 1337);\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x(5, 'ipsum');\n});",
                  "err": {},
                  "uuid": "187e26e2-9f05-48ef-858f-8ac1f8576d2c",
                  "parentUUID": "57fce570-31a4-47c0-ba29-39d621a9273a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x([{ key: 'X-FOO', value: 'bar' }]));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert_1.default.deepStrictEqual(cal, cal.x([{ key: 'X-LOREM', value: 'ipsum' }]));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert_1.default.throws(() => {\n    cal.x([{ key: 'LOREM', value: 'ipsum' }]);\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 'X-LOREM', value: 1337 }]);\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 5, value: 'ipsum' }]);\n});",
                  "err": {},
                  "uuid": "90346a4d-c7fa-4cd6-a6c8-e084ec0bd7ed",
                  "parentUUID": "57fce570-31a4-47c0-ba29-39d621a9273a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x({ 'X-FOO': 'bar' }));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert_1.default.deepStrictEqual(cal, cal.x({ 'X-LOREM': 'ipsum' }));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert_1.default.throws(() => {\n    cal.x({ 'LOREM': 'ipsum' });\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x({ 'X-LOREM': 1337 });\n});\nassert_1.default.throws(() => {\n    cal.x({ 5: 'ipsum' });\n});",
                  "err": {},
                  "uuid": "5ed0851e-94aa-421c-83f3-3833a74bbe7f",
                  "parentUUID": "57fce570-31a4-47c0-ba29-39d621a9273a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepEqual(cal.x(), []);\ncal.x('X-FOO', 'BAR');\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'BAR' }]);\ncal.x({});\nassert_1.default.deepEqual(cal.x().length, 0);",
                  "err": {},
                  "uuid": "d251e94e-522e-40ac-8c33-de2bd2070885",
                  "parentUUID": "57fce570-31a4-47c0-ba29-39d621a9273a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().x('X-FOO', 'BAR');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.toString().includes('X-FOO'));",
                  "err": {},
                  "uuid": "9951b659-86fd-4b13-a9e1-68fdc03bf3bc",
                  "parentUUID": "57fce570-31a4-47c0-ba29-39d621a9273a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9ee1069-3bc4-4a2e-b5a9-5e93d0986e5b",
                "187e26e2-9f05-48ef-858f-8ac1f8576d2c",
                "90346a4d-c7fa-4cd6-a6c8-e084ec0bd7ed",
                "5ed0851e-94aa-421c-83f3-3833a74bbe7f",
                "d251e94e-522e-40ac-8c33-de2bd2070885",
                "9951b659-86fd-4b13-a9e1-68fdc03bf3bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5745a71e-d751-4c27-813a-366d9dcb5aaa",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst cal = new calendar_1.default();\nconst prodId = cal.toJSON().prodId;\nassert_1.default.strictEqual(typeof prodId, 'string');\nassert_1.default.ok(prodId.length > 0);\nassert_1.default.strictEqual((_a = cal.toJSON().events) === null || _a === void 0 ? void 0 : _a.length, 0);",
                  "err": {},
                  "uuid": "63834d88-8c80-4086-a1bc-e986767ed089",
                  "parentUUID": "5745a71e-d751-4c27-813a-366d9dcb5aaa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n    summary: 'HTTP Calendar Event',\n    x: [\n        { key: 'X-FOO', value: 'bar' },\n        { key: 'X-LOREM', value: 'ipsum' }\n    ]\n});\nconst prodId = cal.toJSON().prodId;\nassert_1.default.strictEqual(typeof prodId, 'string');\nassert_1.default.ok(prodId.length > 0);\nconst events = cal.toJSON().events;\nassert_1.default.strictEqual(events === null || events === void 0 ? void 0 : events.length, 1);\nassert_1.default.deepEqual(events[0].x, [\n    { 'key': 'X-FOO', 'value': 'bar' },\n    { 'key': 'X-LOREM', 'value': 'ipsum' }\n]);",
                  "err": {},
                  "uuid": "87eeacf4-4278-4ffc-843a-b7f76334a5e3",
                  "parentUUID": "5745a71e-d751-4c27-813a-366d9dcb5aaa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Calendar toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new calendar_1.default();\nnew calendar_1.default(a.toJSON());",
                  "err": {},
                  "uuid": "67554773-e16d-448b-86ac-b111136de200",
                  "parentUUID": "5745a71e-d751-4c27-813a-366d9dcb5aaa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63834d88-8c80-4086-a1bc-e986767ed089",
                "87eeacf4-4278-4ffc-843a-b7f76334a5e3",
                "67554773-e16d-448b-86ac-b111136de200"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b3bb64b-e956-498b-8811-39520c7482e0",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.length(), 0);\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.strictEqual(cal.length(), 1);",
                  "err": {},
                  "uuid": "d11ae040-ab00-4ffa-9190-1aec4b1126a2",
                  "parentUUID": "2b3bb64b-e956-498b-8811-39520c7482e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d11ae040-ab00-4ffa-9190-1aec4b1126a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff80a7fd-6ade-401f-967d-67e6669f51f5",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.url('https://sebbo.net/foo');\nassert_1.default.ok(cal.toString().indexOf('URL:https://sebbo.net/foo') > -1);",
                  "err": {},
                  "uuid": "5bceef61-8b8b-463f-9739-120df4bf471f",
                  "parentUUID": "ff80a7fd-6ade-401f-967d-67e6669f51f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.method(calendar_1.ICalCalendarMethod.REFRESH);\nassert_1.default.ok(cal.toString().indexOf('METHOD:REFRESH') > -1);",
                  "err": {},
                  "uuid": "7b89af1f-3020-4845-a761-a2081e8fe847",
                  "parentUUID": "ff80a7fd-6ade-401f-967d-67e6669f51f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.name('TEST');\nassert_1.default.ok(cal.toString().indexOf('NAME:TEST') > -1);\nassert_1.default.ok(cal.toString().indexOf('X-WR-CALNAME:TEST') > -1);",
                  "err": {},
                  "uuid": "dfa12107-9cf1-443c-acc4-a12ef39fc4ae",
                  "parentUUID": "ff80a7fd-6ade-401f-967d-67e6669f51f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.description('TEST');\nassert_1.default.ok(cal.toString().indexOf('X-WR-CALDESC:TEST') > -1);",
                  "err": {},
                  "uuid": "17e27138-8573-414a-b406-c9c9d02f118b",
                  "parentUUID": "ff80a7fd-6ade-401f-967d-67e6669f51f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.timezone('TEST');\nassert_1.default.ok(cal.toString().indexOf('TIMEZONE-ID:TEST') > -1);\nassert_1.default.ok(cal.toString().indexOf('X-WR-TIMEZONE:TEST') > -1);",
                  "err": {},
                  "uuid": "75437f82-731b-4ab6-802b-845245ddfb70",
                  "parentUUID": "ff80a7fd-6ade-401f-967d-67e6669f51f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include VTimezone objects if generator was supplied",
                  "fullTitle": "ical-generator Calendar toString() should include VTimezone objects if generator was supplied",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.timezone({ name: 'Europe/Berlin', generator: ical_timezones_1.getVtimezoneComponent });\ncal.createEvent({\n    start: new Date(),\n    timezone: 'Europe/London'\n});\nassert_1.default.ok(cal.toString().includes('BEGIN:VTIMEZONE\\r\\n'), 'BEGIN:VTIMEZONE');\nassert_1.default.ok(cal.toString().includes('TZID:Europe/Berlin\\r\\n'), 'TZID:Europe/Berlin');\nassert_1.default.ok(cal.toString().includes('TZID:Europe/London\\r\\n'), 'TZID:Europe/London');",
                  "err": {},
                  "uuid": "da4e4ae7-b05b-47fb-ab7b-7bc0ae818000",
                  "parentUUID": "ff80a7fd-6ade-401f-967d-67e6669f51f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if VTimezone was not found",
                  "fullTitle": "ical-generator Calendar toString() should also work if VTimezone was not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.timezone({ name: 'FOO', generator: ical_timezones_1.getVtimezoneComponent });\nassert_1.default.ok(!cal.toString().includes('TZID:Foo\\r\\n'));",
                  "err": {},
                  "uuid": "12f514ea-6110-4e7b-998f-64ca878a36b2",
                  "parentUUID": "ff80a7fd-6ade-401f-967d-67e6669f51f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore global timezone ids",
                  "fullTitle": "ical-generator Calendar toString() should ignore global timezone ids",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.timezone({ name: '/Europe/Berlin', generator: ical_timezones_1.getVtimezoneComponent });\nassert_1.default.ok(!cal.toString().includes('TZID:/Europe/Berlin\\r\\n'));",
                  "err": {},
                  "uuid": "d694838c-3e21-4174-840e-c0265b19199f",
                  "parentUUID": "ff80a7fd-6ade-401f-967d-67e6669f51f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the ttl",
                  "fullTitle": "ical-generator Calendar toString() should include the ttl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.ttl(moment_1.default.duration(3, 'days'));\nassert_1.default.ok(cal.toString().indexOf('REFRESH-INTERVAL;VALUE=DURATION:P3D') > -1);\nassert_1.default.ok(cal.toString().indexOf('X-PUBLISHED-TTL:P3D') > -1);",
                  "err": {},
                  "uuid": "d8cc98e9-256e-4310-9a15-ef246dd3a69e",
                  "parentUUID": "ff80a7fd-6ade-401f-967d-67e6669f51f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5bceef61-8b8b-463f-9739-120df4bf471f",
                "7b89af1f-3020-4845-a761-a2081e8fe847",
                "dfa12107-9cf1-443c-acc4-a12ef39fc4ae",
                "17e27138-8573-414a-b406-c9c9d02f118b",
                "75437f82-731b-4ab6-802b-845245ddfb70",
                "da4e4ae7-b05b-47fb-ab7b-7bc0ae818000",
                "12f514ea-6110-4e7b-998f-64ca878a36b2",
                "d694838c-3e21-4174-840e-c0265b19199f",
                "d8cc98e9-256e-4310-9a15-ef246dd3a69e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2fa4fbb4-c559-40e2-9c35-d46ea8e14f96",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event'\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_01.ics', 'utf8'));\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "defb3fb5-4a18-4d7a-ac9c-a9b2359d8c38",
              "parentUUID": "2fa4fbb4-c559-40e2-9c35-d46ea8e14f96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: 'localhost',\n        description: {\n            plain: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop',\n            html: '<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>'\n        }\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_02.ics', 'utf8'));\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "1ad270ae-1dbb-455d-a7e2-76b10624482f",
              "parentUUID": "2fa4fbb4-c559-40e2-9c35-d46ea8e14f96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({\n        method: calendar_1.ICalCalendarMethod.ADD,\n        prodId: '//sebbo.net//ical-generator.tests//EN'\n    });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: {\n            title: 'Apple Store Kurfürstendamm',\n            address: 'Kurfürstendamm 26, 10719 Berlin, Deutschland',\n            radius: 141.1751386318387,\n            geo: { lat: 52.503630, lon: 13.328650 }\n        },\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        status: event_1.ICalEventStatus.CONFIRMED,\n        categories: [{ name: 'WORK' }],\n        url: 'http://sebbo.net/'\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_03.ics', 'utf8'), 'toString');\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "1ccc2658-a853-4d8d-a4f3-4918c3692b19",
              "parentUUID": "2fa4fbb4-c559-40e2-9c35-d46ea8e14f96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.timezone({ name: null, generator: ical_timezones_1.getVtimezoneComponent });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                exclude: new Date('Fr Oct 06 2013 23:15:00 UTC')\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30'),\n            end: new Date('Fr Oct 06 2013 23:15:00'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            timezone: 'Europe/Berlin',\n            summary: 'repeating by day, twice',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.DAILY,\n                count: 2\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by 3 weeks, until 2014',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.WEEKLY,\n                interval: 3,\n                until: new Date('We Jan 01 2014 00:00:00 UTC')\n            }\n        }\n    ]);\n    assert_1.default.strictEqual(cal.toString(), yield fs_1.promises.readFile(__dirname + '/results/generate_04.ics', 'utf8'), 'first check');\n    // Wount be same, as reference to VTimezone generator is not exported\n    // assert.strictEqual(ical(cal.toJSON()).toString(), string);\n    cal.timezone(null);\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), cal.toString(), 'second check');\n});",
              "err": {},
              "uuid": "f17f1529-38e2-4de5-934c-095c496240f6",
              "parentUUID": "2fa4fbb4-c559-40e2-9c35-d46ea8e14f96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '1',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'floating',\n        floating: true\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_05.ics', 'utf8'));\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "f927eb5a-4830-4808-ba36-0fa4ba64a0ef",
              "parentUUID": "2fa4fbb4-c559-40e2-9c35-d46ea8e14f96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN', method: calendar_1.ICalCalendarMethod.PUBLISH });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        attendees: [\n            {\n                name: 'Matt',\n                email: 'matt@example.com',\n                delegatesTo: {\n                    name: 'John',\n                    email: 'john@example.com',\n                    status: attendee_1.ICalAttendeeStatus.ACCEPTED\n                }\n            }\n        ],\n        alarms: [\n            {\n                type: alarm_1.ICalAlarmType.display,\n                trigger: 60 * 10,\n                repeat: 2,\n                interval: 60\n            },\n            {\n                type: alarm_1.ICalAlarmType.display,\n                trigger: 60 * 60,\n                description: 'I\\'m a reminder :)'\n            }\n        ],\n        status: event_1.ICalEventStatus.CONFIRMED,\n        url: 'http://sebbo.net/'\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_06.ics', 'utf8'));\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "bfbbff71-659f-4a89-910f-64e5d6035ec3",
              "parentUUID": "2fa4fbb4-c559-40e2-9c35-d46ea8e14f96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                byMonth: [1, 4, 7, 10]\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on Mo/We/Fr, twice',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.DAILY,\n                count: 2,\n                byDay: [types_1.ICalWeekday.MO, types_1.ICalWeekday.WE, types_1.ICalWeekday.FR]\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on 1st and 15th',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.DAILY,\n                interval: 1,\n                byMonthDay: [1, 15]\n            }\n        }\n    ]);\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_07.ics', 'utf8'));\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "492807bb-4fa6-445b-827f-d45d44d035ad",
              "parentUUID": "2fa4fbb4-c559-40e2-9c35-d46ea8e14f96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event',\n        attendees: [{\n                type: attendee_1.ICalAttendeeType.INDIVIDUAL,\n                role: attendee_1.ICalAttendeeRole.REQ,\n                status: attendee_1.ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_08.ics', 'utf8'));\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "587d27ed-dd3a-4503-adb9-9b14a2e2da01",
              "parentUUID": "2fa4fbb4-c559-40e2-9c35-d46ea8e14f96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ method: calendar_1.ICalCalendarMethod.REQUEST, prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: {\n            name: 'Sebastian Pekarek',\n            email: 'mail@sebbo.net',\n            mailto: 'mail2@example2.com'\n        },\n        attendees: [{\n                type: attendee_1.ICalAttendeeType.INDIVIDUAL,\n                role: attendee_1.ICalAttendeeRole.REQ,\n                status: attendee_1.ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_09.ics', 'utf8'), 'toString');\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "4af3eee0-fa24-42f8-a859-9665a1040135",
              "parentUUID": "2fa4fbb4-c559-40e2-9c35-d46ea8e14f96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "defb3fb5-4a18-4d7a-ac9c-a9b2359d8c38",
            "1ad270ae-1dbb-455d-a7e2-76b10624482f",
            "1ccc2658-a853-4d8d-a4f3-4918c3692b19",
            "f17f1529-38e2-4de5-934c-095c496240f6",
            "f927eb5a-4830-4808-ba36-0fa4ba64a0ef",
            "bfbbff71-659f-4a89-910f-64e5d6035ec3",
            "492807bb-4fa6-445b-827f-d45d44d035ad",
            "587d27ed-dd3a-4503-adb9-9b14a2e2da01",
            "4af3eee0-fa24-42f8-a859-9665a1040135"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f00d6a95-ba53-41a3-9acc-76761e96cdf5",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "56c1f30e-f58e-42a3-a22f-72868896fd58",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new category_1.default({\n    // @ts-ignore\n    unknown: true,\n    name: 'FOO'\n});\nassert_1.default.strictEqual(a.name(), 'FOO');",
                  "err": {},
                  "uuid": "2d66402c-08b0-495f-89fe-32baa9036953",
                  "parentUUID": "56c1f30e-f58e-42a3-a22f-72868896fd58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d66402c-08b0-495f-89fe-32baa9036953"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3afd0cc1-dbdb-4f21-aeee-34253b006ca7",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({});\nassert_1.default.deepStrictEqual(c, c.name('FOO'));\nassert_1.default.deepStrictEqual(c, c.name(null));",
                  "err": {},
                  "uuid": "604f76b2-5af4-4005-b46b-953cbd5141d8",
                  "parentUUID": "3afd0cc1-dbdb-4f21-aeee-34253b006ca7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({});\nassert_1.default.strictEqual(c.name(), null);\nc.name('HELLO-WORLD');\nassert_1.default.strictEqual(c.name(), 'HELLO-WORLD');",
                  "err": {},
                  "uuid": "180eb236-e27b-40b1-b96b-b4e6f2167acf",
                  "parentUUID": "3afd0cc1-dbdb-4f21-aeee-34253b006ca7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({ name: 'BANANA' });\nassert_1.default.ok(c.toString().indexOf('BANANA') > -1);",
                  "err": {},
                  "uuid": "faf0b789-e53e-4d56-a869-d034182e04cd",
                  "parentUUID": "3afd0cc1-dbdb-4f21-aeee-34253b006ca7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "604f76b2-5af4-4005-b46b-953cbd5141d8",
                "180eb236-e27b-40b1-b96b-b4e6f2167acf",
                "faf0b789-e53e-4d56-a869-d034182e04cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a46d29b-30cf-419a-a888-b22730baa26f",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({ name: 'FOOBAR' });\nassert_1.default.deepStrictEqual(c.toJSON(), { name: 'FOOBAR' });",
                  "err": {},
                  "uuid": "89c61f96-8c8c-4be2-9efb-f4ba2e1260a1",
                  "parentUUID": "7a46d29b-30cf-419a-a888-b22730baa26f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89c61f96-8c8c-4be2-9efb-f4ba2e1260a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f27e2945-3b61-4248-942e-e22c2cea8b4d",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category toString() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({});\nassert_1.default.throws(function () {\n    c.toString();\n}, /`name`/);",
                  "err": {},
                  "uuid": "b8dd7305-19ff-41a4-a420-74c8b441ed14",
                  "parentUUID": "f27e2945-3b61-4248-942e-e22c2cea8b4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8dd7305-19ff-41a4-a420-74c8b441ed14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1e10f464-4ff0-4a1e-8dad-52f8c2ff3c3a",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "21abdf68-08da-400f-ba36-233e90d1374f",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Event constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    id: 'FOO',\n    sequence: 1,\n    start: new Date().toJSON(),\n    end: new Date().toJSON(),\n    recurrenceId: new Date().toJSON(),\n    timezone: 'Europe/Berlin',\n    stamp: new Date().toJSON(),\n    allDay: true,\n    floating: false,\n    repeating: null,\n    summary: 'Hello.',\n    location: null,\n    description: null,\n    organizer: null,\n    attendees: [],\n    alarms: [],\n    categories: [],\n    status: null,\n    busystatus: event_1.ICalEventBusyStatus.BUSY,\n    priority: 5,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    transparency: event_1.ICalEventTransparency.TRANSPARENT,\n    created: new Date().toJSON(),\n    lastModified: new Date().toJSON(),\n    x: []\n};\nconst event = new event_1.default(data, new calendar_1.default());\nassert_1.default.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "f181492e-75c3-4ecd-bc47-6716491c132c",
                  "parentUUID": "21abdf68-08da-400f-ba36-233e90d1374f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    // @ts-ignore\n    new event_1.default({ summary: 'Testevent' }, null);\n}, /`calendar`/);",
                  "err": {},
                  "uuid": "37ecff21-ee93-4fff-96f5-b09742422ac3",
                  "parentUUID": "21abdf68-08da-400f-ba36-233e90d1374f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f181492e-75c3-4ecd-bc47-6716491c132c",
                "37ecff21-ee93-4fff-96f5-b09742422ac3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2c867df5-e438-4c70-977e-8beadab92cac",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.id(1048));",
                  "err": {},
                  "uuid": "970e39d9-ead9-4e38-8858-58c6f50784b3",
                  "parentUUID": "2c867df5-e438-4c70-977e-8beadab92cac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).id(512);\nassert_1.default.strictEqual(event.id(), '512');\nevent.id('xyz');\nassert_1.default.strictEqual(event.id(), 'xyz');",
                  "err": {},
                  "uuid": "df6503cf-13a0-444a-9ec2-b0fe95d6658e",
                  "parentUUID": "2c867df5-e438-4c70-977e-8beadab92cac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "970e39d9-ead9-4e38-8858-58c6f50784b3",
                "df6503cf-13a0-444a-9ec2-b0fe95d6658e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5cffb4e9-649f-4b91-bca4-af9ab111dab5",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.uid(1048));",
                  "err": {},
                  "uuid": "6d2a8db9-f858-4402-a3a4-89124d7af434",
                  "parentUUID": "5cffb4e9-649f-4b91-bca4-af9ab111dab5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).uid(512);\nassert_1.default.strictEqual(event.uid(), '512');\nevent.id('xyz');\nassert_1.default.strictEqual(event.uid(), 'xyz');",
                  "err": {},
                  "uuid": "e3191743-d919-4f82-9b14-76fd207d509e",
                  "parentUUID": "5cffb4e9-649f-4b91-bca4-af9ab111dab5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d2a8db9-f858-4402-a3a4-89124d7af434",
                "e3191743-d919-4f82-9b14-76fd207d509e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5530e00f-a6f1-4f9e-8bdf-915eaf9d63e8",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.sequence(1));",
                  "err": {},
                  "uuid": "8f06683c-43da-45ac-9bf0-5406e2141644",
                  "parentUUID": "5530e00f-a6f1-4f9e-8bdf-915eaf9d63e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).sequence(1048);\nassert_1.default.strictEqual(event.sequence(), 1048);",
                  "err": {},
                  "uuid": "863a1fb1-fb43-4843-afc3-96b7ba972bbe",
                  "parentUUID": "5530e00f-a6f1-4f9e-8bdf-915eaf9d63e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.sequence('hello');\n}, /`sequence`/);",
                  "err": {},
                  "uuid": "f2321fe8-89cc-4720-8cd9-1b89b607e0bd",
                  "parentUUID": "5530e00f-a6f1-4f9e-8bdf-915eaf9d63e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).sequence(12);\nassert_1.default.strictEqual(event.sequence(), 12);\nevent.sequence(0);\nassert_1.default.strictEqual(event.sequence(), 0);",
                  "err": {},
                  "uuid": "84442fa0-cb6d-4db9-90a2-fe9d38f96c11",
                  "parentUUID": "5530e00f-a6f1-4f9e-8bdf-915eaf9d63e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f06683c-43da-45ac-9bf0-5406e2141644",
                "863a1fb1-fb43-4843-afc3-96b7ba972bbe",
                "f2321fe8-89cc-4720-8cd9-1b89b607e0bd",
                "84442fa0-cb6d-4db9-90a2-fe9d38f96c11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "75adba74-c061-4166-b920-f1db46b878ab",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment_timezone_1.default();\nconst event = new event_1.default({}, new calendar_1.default());\nevent.start(now);\nassert_1.default.strictEqual(event.start(), now);",
                  "err": {},
                  "uuid": "0c56c087-fdb2-4ba9-a24d-8e6f4d34bde9",
                  "parentUUID": "75adba74-c061-4166-b920-f1db46b878ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.start(date));\nassert_1.default.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "5e62df7f-1ce6-420d-ac70-6c5e1a3c6c1e",
                  "parentUUID": "75adba74-c061-4166-b920-f1db46b878ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.start(date));\nassert_1.default.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "6d430780-44d2-47b9-bdad-cb92fb7d5b75",
                  "parentUUID": "75adba74-c061-4166-b920-f1db46b878ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.start(3);\n}, /`start`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.start(null);\n}, /`start`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.start(NaN);\n}, /`start`/, 'NaN');\nassert_1.default.throws(function () {\n    event.start(new Date('hallo'));\n}, /`start`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "d61ddae0-ad18-44b5-92f7-87148a96b9c6",
                  "parentUUID": "75adba74-c061-4166-b920-f1db46b878ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = moment_timezone_1.default().add(5, 'minutes');\nconst end = moment_timezone_1.default();\nconst event = new event_1.default({}, new calendar_1.default())\n    .end(end)\n    .start(start);\nassert_1.default.deepStrictEqual(event.start(), end);\nassert_1.default.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "be560a51-f0c2-4a53-948a-77dd4d47f74b",
                  "parentUUID": "75adba74-c061-4166-b920-f1db46b878ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.start(moment_timezone_1.default()));\nassert_1.default.deepStrictEqual(event, event.start(new Date()));",
                  "err": {},
                  "uuid": "a644fc38-3cde-4183-877b-7a59c59e47af",
                  "parentUUID": "75adba74-c061-4166-b920-f1db46b878ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c56c087-fdb2-4ba9-a24d-8e6f4d34bde9",
                "5e62df7f-1ce6-420d-ac70-6c5e1a3c6c1e",
                "6d430780-44d2-47b9-bdad-cb92fb7d5b75",
                "d61ddae0-ad18-44b5-92f7-87148a96b9c6",
                "be560a51-f0c2-4a53-948a-77dd4d47f74b",
                "a644fc38-3cde-4183-877b-7a59c59e47af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "875cb585-1925-4f90-b3d5-d9ce24778d71",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment_timezone_1.default();\nconst event = new event_1.default({}, new calendar_1.default());\nevent.end(now);\nassert_1.default.deepStrictEqual(event.end(), now);",
                  "err": {},
                  "uuid": "596288af-d58f-4f90-8703-51b796441c53",
                  "parentUUID": "875cb585-1925-4f90-b3d5-d9ce24778d71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.end(date));\nassert_1.default.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "afdf86e7-46c5-4653-a207-773bb3efb768",
                  "parentUUID": "875cb585-1925-4f90-b3d5-d9ce24778d71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.end(date));\nassert_1.default.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "4d52d5c4-e9ff-48e8-b89b-18ee2bd236ec",
                  "parentUUID": "875cb585-1925-4f90-b3d5-d9ce24778d71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.end(3);\n}, /`end`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.end(NaN);\n}, /`end`/, 'NaN');\nassert_1.default.throws(function () {\n    event.end(new Date('hallo'));\n}, /`end`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "32a2999f-b629-42e5-99e7-81c2f522b65a",
                  "parentUUID": "875cb585-1925-4f90-b3d5-d9ce24778d71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = moment_timezone_1.default().add(5, 'minutes');\nconst end = moment_timezone_1.default();\nconst event = new event_1.default({}, new calendar_1.default())\n    .start(start)\n    .end(end);\nassert_1.default.deepStrictEqual(event.start(), end);\nassert_1.default.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "4ec62aed-091f-415a-8e4a-d170c070ced5",
                  "parentUUID": "875cb585-1925-4f90-b3d5-d9ce24778d71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.end(moment_timezone_1.default()));\nassert_1.default.deepStrictEqual(event, event.end(new Date()));",
                  "err": {},
                  "uuid": "4ecffc6a-a125-44cf-a06c-ddd0ad835817",
                  "parentUUID": "875cb585-1925-4f90-b3d5-d9ce24778d71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "596288af-d58f-4f90-8703-51b796441c53",
                "afdf86e7-46c5-4653-a207-773bb3efb768",
                "4d52d5c4-e9ff-48e8-b89b-18ee2bd236ec",
                "32a2999f-b629-42e5-99e7-81c2f522b65a",
                "4ec62aed-091f-415a-8e4a-d170c070ced5",
                "4ecffc6a-a125-44cf-a06c-ddd0ad835817"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "78ee9385-389f-48c3-8b7a-6e4b6cb515bd",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment_timezone_1.default();\nconst event = new event_1.default({}, new calendar_1.default());\nevent.recurrenceId(now);\nassert_1.default.deepStrictEqual(event.recurrenceId(), now);",
                  "err": {},
                  "uuid": "d2c79e7f-1511-49cb-8009-ca5fa9ee0e84",
                  "parentUUID": "78ee9385-389f-48c3-8b7a-6e4b6cb515bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.recurrenceId(date));\nassert_1.default.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "da5fa579-f0f3-4539-b14b-571e664c2178",
                  "parentUUID": "78ee9385-389f-48c3-8b7a-6e4b6cb515bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.recurrenceId(date));\nassert_1.default.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "20d44987-3ddd-4170-9af7-0e135aa483f9",
                  "parentUUID": "78ee9385-389f-48c3-8b7a-6e4b6cb515bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(3);\n}, /`recurrenceId`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(NaN);\n}, /`recurrenceId`/, 'NaN');\nassert_1.default.throws(function () {\n    event.recurrenceId(new Date('hallo'));\n}, /`recurrenceId`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "efa8c4fd-799e-4706-861d-7bbd90a3c814",
                  "parentUUID": "78ee9385-389f-48c3-8b7a-6e4b6cb515bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.recurrenceId(moment_timezone_1.default()));\nassert_1.default.deepStrictEqual(event, event.recurrenceId(new Date()));",
                  "err": {},
                  "uuid": "d8f77423-5209-4eb7-86ab-675eb5c69a08",
                  "parentUUID": "78ee9385-389f-48c3-8b7a-6e4b6cb515bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2c79e7f-1511-49cb-8009-ca5fa9ee0e84",
                "da5fa579-f0f3-4539-b14b-571e664c2178",
                "20d44987-3ddd-4170-9af7-0e135aa483f9",
                "efa8c4fd-799e-4706-861d-7bbd90a3c814",
                "d8f77423-5209-4eb7-86ab-675eb5c69a08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9767915-4f8a-40dc-82ec-e944ce3eddee",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default()).timezone('Europe/Berlin');\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "be7cce23-9396-43b2-9798-fb7779ef84d8",
                  "parentUUID": "a9767915-4f8a-40dc-82ec-e944ce3eddee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nconst e = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, cal);\nassert_1.default.strictEqual(cal.timezone(), null);\nassert_1.default.strictEqual(e.timezone(), null);\ncal.timezone('Europe/London');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/London');\nassert_1.default.strictEqual(e.timezone(), 'Europe/London');\ne.timezone('Europe/Berlin');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/London');\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert_1.default.strictEqual(cal.timezone(), null);\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone(null);\nassert_1.default.strictEqual(cal.timezone(), null);\nassert_1.default.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "ef7e3742-8a72-41c9-8794-65044fafe702",
                  "parentUUID": "a9767915-4f8a-40dc-82ec-e944ce3eddee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.timezone('Europe/Berlin'));",
                  "err": {},
                  "uuid": "07db76df-a8f1-4ded-aa8f-bfda6c57688c",
                  "parentUUID": "a9767915-4f8a-40dc-82ec-e944ce3eddee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: moment_timezone_1.default(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.timezone('Europe/London');\nassert_1.default.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "2c8c569a-7267-41d4-b75b-4772a83a34c4",
                  "parentUUID": "a9767915-4f8a-40dc-82ec-e944ce3eddee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.floating(true);\ne.timezone('Europe/London');\nassert_1.default.strictEqual(e.floating(), false);",
                  "err": {},
                  "uuid": "c8f8ee7e-7ead-4966-b12b-4eaa9adc1a67",
                  "parentUUID": "a9767915-4f8a-40dc-82ec-e944ce3eddee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.floating(true);\ne.timezone(null);\nassert_1.default.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "9fde27fd-79ed-4622-b077-d27bcf977637",
                  "parentUUID": "a9767915-4f8a-40dc-82ec-e944ce3eddee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be7cce23-9396-43b2-9798-fb7779ef84d8",
                "ef7e3742-8a72-41c9-8794-65044fafe702",
                "07db76df-a8f1-4ded-aa8f-bfda6c57688c",
                "2c8c569a-7267-41d4-b75b-4772a83a34c4",
                "c8f8ee7e-7ead-4966-b12b-4eaa9adc1a67",
                "9fde27fd-79ed-4622-b077-d27bcf977637"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "165624b8-06b4-4227-aafb-ec73108e0b36",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment_timezone_1.default().add(1, 'day');\nconst e = new event_1.default({}, new calendar_1.default()).stamp(now);\nassert_1.default.deepStrictEqual(e.stamp(), now);",
                  "err": {},
                  "uuid": "33180dc3-7b55-48b8-b196-a7e3c0798b89",
                  "parentUUID": "165624b8-06b4-4227-aafb-ec73108e0b36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.stamp(date));\nassert_1.default.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "77a94a72-054a-4a97-ba16-0a7702c36880",
                  "parentUUID": "165624b8-06b4-4227-aafb-ec73108e0b36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.stamp(date));\nassert_1.default.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "45876e7f-8d7b-4fd8-9752-f0db0ee83865",
                  "parentUUID": "165624b8-06b4-4227-aafb-ec73108e0b36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.stamp(3);\n}, /`stamp`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.stamp(null);\n}, /`stamp`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.stamp(NaN);\n}, /`stamp`/, 'NaN');\nassert_1.default.throws(function () {\n    event.stamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "d325195a-a81b-4c23-af91-78cbe11d6202",
                  "parentUUID": "165624b8-06b4-4227-aafb-ec73108e0b36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.stamp(new Date()));",
                  "err": {},
                  "uuid": "19191945-3657-46a1-a0e6-e4928a739a46",
                  "parentUUID": "165624b8-06b4-4227-aafb-ec73108e0b36",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33180dc3-7b55-48b8-b196-a7e3c0798b89",
                "77a94a72-054a-4a97-ba16-0a7702c36880",
                "45876e7f-8d7b-4fd8-9752-f0db0ee83865",
                "d325195a-a81b-4c23-af91-78cbe11d6202",
                "19191945-3657-46a1-a0e6-e4928a739a46"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9ff2798-e712-4b7b-a66c-2603b8405ebc",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment_timezone_1.default().add(1, 'day');\nconst e = new event_1.default({}, new calendar_1.default()).timestamp(now);\nassert_1.default.deepStrictEqual(e.timestamp(), now);",
                  "err": {},
                  "uuid": "1550ce19-fd7d-467b-b22c-c71203cf5319",
                  "parentUUID": "a9ff2798-e712-4b7b-a66c-2603b8405ebc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week').toJSON();\nassert_1.default.deepStrictEqual(event, event.timestamp(date));\nassert_1.default.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "eb98e51c-bff3-446f-9b65-09fa6c2b52f3",
                  "parentUUID": "a9ff2798-e712-4b7b-a66c-2603b8405ebc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week').toDate();\nassert_1.default.deepStrictEqual(event, event.timestamp(date));\nassert_1.default.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "73dbebed-3d5c-4a32-a8d6-8cd2e5823da5",
                  "parentUUID": "a9ff2798-e712-4b7b-a66c-2603b8405ebc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.timestamp(3);\n}, /`stamp`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.timestamp(null);\n}, /`stamp`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.timestamp(NaN);\n}, /`stamp`/, 'NaN');\nassert_1.default.throws(function () {\n    event.timestamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "987afbae-8596-4a5d-b074-ed24b69a80c5",
                  "parentUUID": "a9ff2798-e712-4b7b-a66c-2603b8405ebc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.timestamp(new Date()));",
                  "err": {},
                  "uuid": "8e6c757d-639c-4188-a273-3509df18ea9c",
                  "parentUUID": "a9ff2798-e712-4b7b-a66c-2603b8405ebc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1550ce19-fd7d-467b-b22c-c71203cf5319",
                "eb98e51c-bff3-446f-9b65-09fa6c2b52f3",
                "73dbebed-3d5c-4a32-a8d6-8cd2e5823da5",
                "987afbae-8596-4a5d-b074-ed24b69a80c5",
                "8e6c757d-639c-4188-a273-3509df18ea9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c1f53cf-43ee-48bd-bc8a-addfe8fa451d",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.allDay(true);\nassert_1.default.strictEqual(e.allDay(), true);",
                  "err": {},
                  "uuid": "bfad4c50-1e11-485c-8713-0617fdc54895",
                  "parentUUID": "0c1f53cf-43ee-48bd-bc8a-addfe8fa451d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.allDay(true));",
                  "err": {},
                  "uuid": "ccf87d7d-adb2-4fa7-a35d-2b0fd5742744",
                  "parentUUID": "0c1f53cf-43ee-48bd-bc8a-addfe8fa451d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.allDay(true);\nassert_1.default.strictEqual(event.allDay(), true);",
                  "err": {},
                  "uuid": "f0b0151c-0efa-425f-ad55-cdd7bfbce8dc",
                  "parentUUID": "0c1f53cf-43ee-48bd-bc8a-addfe8fa451d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfad4c50-1e11-485c-8713-0617fdc54895",
                "ccf87d7d-adb2-4fa7-a35d-2b0fd5742744",
                "f0b0151c-0efa-425f-ad55-cdd7bfbce8dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c0f48fa5-01ed-4938-88bb-b70d98175fe1",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default()).floating(true);\nassert_1.default.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "c9821698-a043-4dd4-b51f-90d4ae4de27f",
                  "parentUUID": "c0f48fa5-01ed-4938-88bb-b70d98175fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.floating(false));\nassert_1.default.deepStrictEqual(e, e.floating(true));",
                  "err": {},
                  "uuid": "f96a2bcf-8627-4ee7-84f9-fdd7b942c40f",
                  "parentUUID": "c0f48fa5-01ed-4938-88bb-b70d98175fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.floating(true);\nassert_1.default.strictEqual(event.floating(), true);",
                  "err": {},
                  "uuid": "80caf55e-4961-420e-baf8-c89c2484a950",
                  "parentUUID": "c0f48fa5-01ed-4938-88bb-b70d98175fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.timezone('Europe/London');\ne.floating(true);\nassert_1.default.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "d0515213-cdb9-429e-ac9a-b88b8591127c",
                  "parentUUID": "c0f48fa5-01ed-4938-88bb-b70d98175fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.timezone('Europe/London');\ne.floating(false);\nassert_1.default.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "1fc275f5-35d2-4c5a-8e80-d73bb17c9d1c",
                  "parentUUID": "c0f48fa5-01ed-4938-88bb-b70d98175fe1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9821698-a043-4dd4-b51f-90d4ae4de27f",
                "f96a2bcf-8627-4ee7-84f9-fdd7b942c40f",
                "80caf55e-4961-420e-baf8-c89c2484a950",
                "d0515213-cdb9-429e-ac9a-b88b8591127c",
                "1fc275f5-35d2-4c5a-8e80-d73bb17c9d1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options = {\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    count: 5,\n    interval: 2,\n    until: moment_timezone_1.default(),\n    exclude: [moment_timezone_1.default()]\n};\nconst e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e.repeating(), null);\ne.repeating(options);\nassert_1.default.strictEqual(JSON.stringify(e.repeating(), null, '  '), JSON.stringify(options, null, '  '));\ne.repeating(null);\nassert_1.default.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "a498c5ab-8523-47e9-8f0f-1c7dadd2e03d",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.repeating(null));\nassert_1.default.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "e966d79c-f02b-4423-9e07-e895164f87af",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.repeating(null), 'repeating(null)');\nassert_1.default.deepStrictEqual(e, e.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY\n}), 'repeating({freq: \\'MONTHLY\\'})');",
                  "err": {},
                  "uuid": "96eae882-73c7-48b9-9366-8418774fbf04",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        // @ts-ignore\n        repeating: {}\n    }, new calendar_1.default());\n}, /Input must be one of the following: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY/);",
                  "err": {},
                  "uuid": "764f3dbf-99b5-45e7-9764-d692804617a0",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            // @ts-ignore\n            freq: 'hello'\n        }\n    }, new calendar_1.default());\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "2f42a3d9-ce69-4286-8ccb-8d206814d80d",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY });\nconst result = e.repeating();\nassert_1.default.ok(result && !tools_1.isRRule(result) && typeof result !== 'string');\nassert_1.default.strictEqual(result.freq, 'MONTHLY');",
                  "err": {},
                  "uuid": "8e5635ea-b6b1-4288-825f-9e857150a316",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            count: Infinity\n        }\n    }, new calendar_1.default());\n}, /`repeating.count` must be a finite number!/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            count: 'abc'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.count` must be a finite number!/);",
                  "err": {},
                  "uuid": "37d3cd9e-f478-4f60-adca-48453f97d634",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, count: 5 });\nconst result = e.repeating();\nassert_1.default.ok(result && !tools_1.isRRule(result) && typeof result !== 'string');\nassert_1.default.strictEqual(result.count, 5);",
                  "err": {},
                  "uuid": "3636b7b3-5236-4e59-ae8b-fbe8682a4d45",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: Infinity\n        }\n    }, new calendar_1.default());\n}, /`repeating.interval` must be a finite number!/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            interval: 'abc'\n        }\n    }, new calendar_1.default());\n}, /`repeating.interval` must be a finite number!/);",
                  "err": {},
                  "uuid": "4b984067-1c34-4ff6-b7f5-400b4113a4ec",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, interval: 5 });\nconst result = e.repeating();\nassert_1.default.ok(result && !tools_1.isRRule(result) && typeof result !== 'string');\nassert_1.default.strictEqual(result.interval, 5);",
                  "err": {},
                  "uuid": "e9911135-4bbe-4955-ab53-34d07ee9c016",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            until: null\n        }\n    }, new calendar_1.default());\n}, /Error: `repeating\\.until` has to be a valid date!/);",
                  "err": {},
                  "uuid": "31b6af0c-0acb-4cd4-ad2a-82f26fd1aa50",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week').toJSON();\nevent.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert_1.default.ok(result && !tools_1.isRRule(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "80e0a902-e336-47a0-b192-87bb10ee00eb",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week').toDate();\nevent.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert_1.default.ok(result && !tools_1.isRRule(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "282ba762-d65c-4bb8-a8c9-0cc1cd90c77c",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nevent.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert_1.default.ok(result && !tools_1.isRRule(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "cd55103b-5ed3-41c9-b070-efec33d168ee",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: 3 });\n}, /`repeating.until`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: null });\n}, /`repeating.until`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: NaN });\n}, /`repeating.until`/, 'NaN');\nassert_1.default.throws(function () {\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: new Date('foo') });\n}, /`repeating.until`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "672c01fc-f5fe-4ac4-8c26-744b1330a36f",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', 'BAR', 'th']\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', Infinity, 'th']\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "7fcdd934-2dc6-4d30-9426-282c97b54a76",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    byDay: [types_1.ICalWeekday.SU, types_1.ICalWeekday.WE, types_1.ICalWeekday.TH]\n});\nconst result = e.repeating();\nassert_1.default.ok(result && !tools_1.isRRule(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.byDay, ['SU', 'WE', 'TH']);",
                  "err": {},
                  "uuid": "5578e1f6-7bbf-4f6f-ae08-d3f6b7a64dc3",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonth: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonth` contains invalid value `FOO`/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonth: [1, 14, 7]\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonth` contains invalid value `14`/);",
                  "err": {},
                  "uuid": "a6a3b499-e5ca-4982-a13e-9e20d9d6d28d",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, byMonth: [1, 12, 7] });\nconst result = e.repeating();\nassert_1.default.ok(result && !tools_1.isRRule(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.byMonth, [1, 12, 7]);",
                  "err": {},
                  "uuid": "56298c12-220a-4dc3-8bd8-6f76f18ab73b",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonthDay: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonthDay` contains invalid value `FOO`/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 32, 15]\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonthDay` contains invalid value `32`/);",
                  "err": {},
                  "uuid": "a536ee62-7400-498f-aaef-fa1394501712",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, byMonthDay: [1, 15] });\nconst result = e.repeating();\nassert_1.default.ok(result && !tools_1.isRRule(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.byMonthDay, [1, 15]);",
                  "err": {},
                  "uuid": "2072911d-36cb-4680-8388-4a85fbad99c1",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            bySetPos: 6\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.bySetPos` contains invalid value `6`/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            // @ts-ignore\n            bySetPos: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.bySetPos` contains invalid value `FOO`/);",
                  "err": {},
                  "uuid": "64e138e6-5e6b-4764-95a5-fcb1b87a3e6d",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            bySetPos: 6\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/);",
                  "err": {},
                  "uuid": "68b590ee-3d25-4c59-9726-a00b7b82a2da",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst e = new event_1.default({}, new calendar_1.default());\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    byDay: [types_1.ICalWeekday.SU],\n    bySetPos: 2\n});\nconst result = e.repeating();\nassert_1.default.ok(result && !tools_1.isRRule(result) && typeof result !== 'string');\nassert_1.default.strictEqual((_a = result.byDay) === null || _a === void 0 ? void 0 : _a.length, 1);\nassert_1.default.strictEqual(result.bySetPos, 2);",
                  "err": {},
                  "uuid": "3d6dcb99-3a55-4538-abb2-2b8ac6f0b0de",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            exclude: new Date('FOO')\n        }\n    }, new calendar_1.default());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "5d5b6d7f-4241-4ef6-93f3-4e6112bebff7",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            exclude: [moment_timezone_1.default(), new Date('BAR'), 'FOO']\n        }\n    }, new calendar_1.default());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "bea3c00a-b910-49be-a1df-dc5cce8882e4",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            // @ts-ignore\n            exclude: 42\n        }\n    }, new calendar_1.default());\n}, /`repeating.exclude\\[0\\]` has to be a valid date!/);",
                  "err": {},
                  "uuid": "5396f830-1137-4d2d-8baa-29012349d414",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    exclude: [\n        date.toJSON(),\n        date.toDate(),\n        date\n    ]\n});\nconst result = e.repeating();\nassert_1.default.ok(result && !tools_1.isRRule(result) && typeof result !== 'string');\nassert_1.default.ok(Array.isArray(result.exclude));\nassert_1.default.strictEqual(result.exclude.length, 3);\nassert_1.default.deepStrictEqual(result.exclude[0], date.toJSON(), 'String');\nassert_1.default.deepStrictEqual(result.exclude[1], date.toDate(), 'Date');\nassert_1.default.deepStrictEqual(result.exclude[2], date, 'Moment');",
                  "err": {},
                  "uuid": "f334f0a3-46e1-49ee-8493-508a63edfe64",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            startOfWeek: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "efcc083d-0277-42fd-937a-6caf3ef6b9cc",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    startOfWeek: types_1.ICalWeekday.SU\n});\nconst result = e.repeating();\nassert_1.default.ok(result && !tools_1.isRRule(result) && typeof result !== 'string');\nassert_1.default.deepStrictEqual(result.startOfWeek, 'SU');",
                  "err": {},
                  "uuid": "0ed6592d-e784-40e2-b3a6-e522d9a5c44e",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support RRules",
                  "fullTitle": "ical-generator Event repeating() should support RRules",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = new Date(Date.UTC(2012, 1, 1, 10, 30));\nconst e = new event_1.default({ start }, new calendar_1.default());\nconst rule = new rrule_1.RRule({\n    freq: rrule_1.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule_1.RRule.MO, rrule_1.RRule.FR],\n    dtstart: start,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\ne.repeating(rule);\nconst result = e.repeating();\nassert_1.default.ok(tools_1.isRRule(result));\nassert_1.default.deepStrictEqual(result, rule);\nassert_1.default.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "4c61e274-d35f-4d89-9fcf-30d01fd56b00",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support strings",
                  "fullTitle": "ical-generator Event repeating() should support strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({ start: new Date() }, new calendar_1.default());\nconst rule = 'RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z';\ne.repeating(rule);\nconst result = e.repeating();\nassert_1.default.deepStrictEqual(result, rule);\nassert_1.default.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "f0c60fa0-8dd6-4b73-a37d-d64a32c36368",
                  "parentUUID": "b3ae97ee-dab1-4c03-86d5-b9b8960285fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a498c5ab-8523-47e9-8f0f-1c7dadd2e03d",
                "e966d79c-f02b-4423-9e07-e895164f87af",
                "96eae882-73c7-48b9-9366-8418774fbf04",
                "764f3dbf-99b5-45e7-9764-d692804617a0",
                "2f42a3d9-ce69-4286-8ccb-8d206814d80d",
                "8e5635ea-b6b1-4288-825f-9e857150a316",
                "37d3cd9e-f478-4f60-adca-48453f97d634",
                "3636b7b3-5236-4e59-ae8b-fbe8682a4d45",
                "4b984067-1c34-4ff6-b7f5-400b4113a4ec",
                "e9911135-4bbe-4955-ab53-34d07ee9c016",
                "31b6af0c-0acb-4cd4-ad2a-82f26fd1aa50",
                "80e0a902-e336-47a0-b192-87bb10ee00eb",
                "282ba762-d65c-4bb8-a8c9-0cc1cd90c77c",
                "cd55103b-5ed3-41c9-b070-efec33d168ee",
                "672c01fc-f5fe-4ac4-8c26-744b1330a36f",
                "7fcdd934-2dc6-4d30-9426-282c97b54a76",
                "5578e1f6-7bbf-4f6f-ae08-d3f6b7a64dc3",
                "a6a3b499-e5ca-4982-a13e-9e20d9d6d28d",
                "56298c12-220a-4dc3-8bd8-6f76f18ab73b",
                "a536ee62-7400-498f-aaef-fa1394501712",
                "2072911d-36cb-4680-8388-4a85fbad99c1",
                "64e138e6-5e6b-4764-95a5-fcb1b87a3e6d",
                "68b590ee-3d25-4c59-9726-a00b7b82a2da",
                "3d6dcb99-3a55-4538-abb2-2b8ac6f0b0de",
                "5d5b6d7f-4241-4ef6-93f3-4e6112bebff7",
                "bea3c00a-b910-49be-a1df-dc5cce8882e4",
                "5396f830-1137-4d2d-8baa-29012349d414",
                "f334f0a3-46e1-49ee-8493-508a63edfe64",
                "efcc083d-0277-42fd-937a-6caf3ef6b9cc",
                "0ed6592d-e784-40e2-b3a6-e522d9a5c44e",
                "4c61e274-d35f-4d89-9fcf-30d01fd56b00",
                "f0c60fa0-8dd6-4b73-a37d-d64a32c36368"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39164ff0-0173-4a09-800e-a9696e6cc689",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.summary(), '');\ne.summary('Testevent');\nassert_1.default.strictEqual(e.summary(), 'Testevent');",
                  "err": {},
                  "uuid": "f8821cc4-ba93-47ab-8367-1aac05f3edd3",
                  "parentUUID": "39164ff0-0173-4a09-800e-a9696e6cc689",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.summary(''));\nassert_1.default.deepStrictEqual(e, e.summary('Testevent'));",
                  "err": {},
                  "uuid": "4c5b6d41-6fab-4b29-8714-ba9716bdad08",
                  "parentUUID": "39164ff0-0173-4a09-800e-a9696e6cc689",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.summary('Example Event II');\nassert_1.default.strictEqual(event.summary(), 'Example Event II');\nevent.summary('');\nassert_1.default.strictEqual(event.summary(), '');",
                  "err": {},
                  "uuid": "7568a41c-dd03-4114-ad6f-d12358e22327",
                  "parentUUID": "39164ff0-0173-4a09-800e-a9696e6cc689",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8821cc4-ba93-47ab-8367-1aac05f3edd3",
                "4c5b6d41-6fab-4b29-8714-ba9716bdad08",
                "7568a41c-dd03-4114-ad6f-d12358e22327"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ccb8037-74a4-467f-8540-fdf96d291a81",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value (string)",
                  "fullTitle": "ical-generator Event location() getter should return value (string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.location(), null);\ne.location('Test Location');\nassert_1.default.deepStrictEqual(e.location(), { title: 'Test Location' });\ne.location(null);\nassert_1.default.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "44d686d6-2554-4a09-8118-6a0d84a5fcf1",
                  "parentUUID": "1ccb8037-74a4-467f-8540-fdf96d291a81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value (obj)",
                  "fullTitle": "ical-generator Event location() getter should return value (obj)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.location(), null);\ne.location({\n    title: 'Foo',\n    geo: { lat: 44.5, lon: -3.4 }\n});\nassert_1.default.deepStrictEqual((_a = e.location()) === null || _a === void 0 ? void 0 : _a.title, 'Foo');\nassert_1.default.deepStrictEqual((_b = e.location()) === null || _b === void 0 ? void 0 : _b.geo, { lat: 44.5, lon: -3.4 });\ne.location(null);\nassert_1.default.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "554abf80-0e19-4682-ba19-3e55d2d949ac",
                  "parentUUID": "1ccb8037-74a4-467f-8540-fdf96d291a81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.location(null));\nassert_1.default.deepStrictEqual(e, e.location('Test Location'));",
                  "err": {},
                  "uuid": "43631bd4-77e7-4267-bf91-bff4d9d05274",
                  "parentUUID": "1ccb8037-74a4-467f-8540-fdf96d291a81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.location('Europa-Park');\nassert_1.default.strictEqual((_a = event.location()) === null || _a === void 0 ? void 0 : _a.title, 'Europa-Park');",
                  "err": {},
                  "uuid": "fb6b1449-6656-4f4a-afef-1d56677cbd35",
                  "parentUUID": "1ccb8037-74a4-467f-8540-fdf96d291a81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when location is not valid",
                  "fullTitle": "ical-generator Event location() should throw error when location is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\n// @ts-ignore\nassert_1.default.throws(() => event.location({ geo: 3 }), /`location` isn't formatted correctly/i);\n// @ts-ignore\nassert_1.default.throws(() => event.location({}), /`location` isn't formatted correctly/i);",
                  "err": {},
                  "uuid": "21b32263-5d43-4a74-9593-9a331be3c08b",
                  "parentUUID": "1ccb8037-74a4-467f-8540-fdf96d291a81",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44d686d6-2554-4a09-8118-6a0d84a5fcf1",
                "554abf80-0e19-4682-ba19-3e55d2d949ac",
                "43631bd4-77e7-4267-bf91-bff4d9d05274",
                "fb6b1449-6656-4f4a-afef-1d56677cbd35",
                "21b32263-5d43-4a74-9593-9a331be3c08b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dd8762a3-a738-4901-bf55-24271ccfb558",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.description(), null);\ne.description('I don\\'t need a description. I\\'m far to awesome for descriptions…');\nassert_1.default.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…'\n});\ne.description({\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\nassert_1.default.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\ne.description(null);\nassert_1.default.strictEqual(e.description(), null);",
                  "err": {},
                  "uuid": "63156a6c-cdc7-4bda-861b-8b0a99c9d8c7",
                  "parentUUID": "dd8762a3-a738-4901-bf55-24271ccfb558",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.description(null));\nassert_1.default.deepStrictEqual(e, e.description('I don\\'t need a description. I\\'m far to awesome for descriptions…'));",
                  "err": {},
                  "uuid": "b1aabe84-9b9e-47b2-a476-428f2fcfd939",
                  "parentUUID": "dd8762a3-a738-4901-bf55-24271ccfb558",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.description('Well. But other people need descriptions… :/');\nassert_1.default.deepStrictEqual(event.description(), {\n    plain: 'Well. But other people need descriptions… :/'\n});\nevent.description({\n    plain: 'I am uncool text.',\n    html: '<marquee>I\\'m the best HTML tag in this universe!</marquee>'\n});\nassert_1.default.ok(event.toString().includes('<marquee>I\\'m the best HTML tag in this universe!</marquee>'));",
                  "err": {},
                  "uuid": "b6e1f676-59c6-4ce0-93c4-7b5f512d0f43",
                  "parentUUID": "dd8762a3-a738-4901-bf55-24271ccfb558",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63156a6c-cdc7-4bda-861b-8b0a99c9d8c7",
                "b1aabe84-9b9e-47b2-a476-428f2fcfd939",
                "b6e1f676-59c6-4ce0-93c4-7b5f512d0f43"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eeef8ca4-9bb3-41ba-8561-13cb5ed77ff4",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b, _c, _d, _e;\nconst e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.organizer(), null);\ne.organizer(null);\nassert_1.default.strictEqual(e.organizer(), null);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert_1.default.strictEqual('Sebastian Pekarek', (_a = e.organizer()) === null || _a === void 0 ? void 0 : _a.name);\nassert_1.default.strictEqual('mail@example.com', (_b = e.organizer()) === null || _b === void 0 ? void 0 : _b.email);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert_1.default.strictEqual('Sebastian Pekarek', (_c = e.organizer()) === null || _c === void 0 ? void 0 : _c.name);\nassert_1.default.strictEqual('mail@example.com', (_d = e.organizer()) === null || _d === void 0 ? void 0 : _d.email);\nassert_1.default.strictEqual('mail2@example2.com', (_e = e.organizer()) === null || _e === void 0 ? void 0 : _e.mailto);",
                  "err": {},
                  "uuid": "ca049a5e-1525-4041-a196-15685d72fbed",
                  "parentUUID": "eeef8ca4-9bb3-41ba-8561-13cb5ed77ff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.organizer(null));\nassert_1.default.deepStrictEqual(e, e.organizer('Sebastian Pekarek <mail@example.com>'));",
                  "err": {},
                  "uuid": "f435d52e-facc-4fc8-bb2c-d7d84c15a093",
                  "parentUUID": "eeef8ca4-9bb3-41ba-8561-13cb5ed77ff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert_1.default.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined\n});\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert_1.default.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: 'mail2@example2.com'\n});",
                  "err": {},
                  "uuid": "4d97936a-6ddb-4eeb-b131-93dc186b7020",
                  "parentUUID": "eeef8ca4-9bb3-41ba-8561-13cb5ed77ff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.organizer('Sebastian Pekarek <mail@example.com>');\nassert_1.default.deepStrictEqual(event.organizer(), { name: 'Sebastian Pekarek', email: 'mail@example.com' });",
                  "err": {},
                  "uuid": "a0c48e10-22f0-4f05-87ea-396c7c974eca",
                  "parentUUID": "eeef8ca4-9bb3-41ba-8561-13cb5ed77ff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.organizer('foo bar');\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "715dfa41-f9bb-456f-8b8a-de96e71cb063",
                  "parentUUID": "eeef8ca4-9bb3-41ba-8561-13cb5ed77ff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.organizer({ email: 'foo' });\n}, /`organizer\\.name`/);",
                  "err": {},
                  "uuid": "ac18a8cc-9d10-487f-8dd8-b0e3d1cbb6da",
                  "parentUUID": "eeef8ca4-9bb3-41ba-8561-13cb5ed77ff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.organizer(Infinity);\n}, /`organizer`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.organizer(NaN);\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "57e0b515-e22a-4cee-b0a4-debfbb0e7793",
                  "parentUUID": "eeef8ca4-9bb3-41ba-8561-13cb5ed77ff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without an email",
                  "fullTitle": "ical-generator Event organizer() should work without an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.organizer({ name: 'Sebastian Pekarek' });\nassert_1.default.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: undefined,\n    mailto: undefined\n});",
                  "err": {},
                  "uuid": "79c884c2-4d6f-4e48-ab12-82925e030fb6",
                  "parentUUID": "eeef8ca4-9bb3-41ba-8561-13cb5ed77ff4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca049a5e-1525-4041-a196-15685d72fbed",
                "f435d52e-facc-4fc8-bb2c-d7d84c15a093",
                "4d97936a-6ddb-4eeb-b131-93dc186b7020",
                "a0c48e10-22f0-4f05-87ea-396c7c974eca",
                "715dfa41-f9bb-456f-8b8a-de96e71cb063",
                "ac18a8cc-9d10-487f-8dd8-b0e3d1cbb6da",
                "57e0b515-e22a-4cee-b0a4-debfbb0e7793",
                "79c884c2-4d6f-4e48-ab12-82925e030fb6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a8b5c41b-be0f-48c9-ac1d-1469e493d883",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = new attendee_1.default({}, event);\nassert_1.default.strictEqual(event.createAttendee(attendee), attendee, 'createAttendee returns attendee');\nassert_1.default.deepStrictEqual(event.attendees()[0], attendee, 'attendee pushed');",
                  "err": {},
                  "uuid": "bffc3f0b-bf76-45f9-bd88-38cda0bbd635",
                  "parentUUID": "a8b5c41b-be0f-48c9-ac1d-1469e493d883",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.ok(event.createAttendee({}) instanceof attendee_1.default);\nassert_1.default.strictEqual(event.attendees.length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "5eb72509-a3e5-4f80-a121-6c57d080cd16",
                  "parentUUID": "a8b5c41b-be0f-48c9-ac1d-1469e493d883",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = event.createAttendee('Zac <zac@example.com>');\nassert_1.default.strictEqual(attendee.name(), 'Zac');\nassert_1.default.strictEqual(attendee.email(), 'zac@example.com');\nassert_1.default.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "a92c2800-13ef-4dcb-85c7-19d3ad44a664",
                  "parentUUID": "a8b5c41b-be0f-48c9-ac1d-1469e493d883",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.createAttendee('foo bar');\n}, /isn't formated correctly/);",
                  "err": {},
                  "uuid": "2fdc954b-0200-4934-80a3-a17408ebd8dc",
                  "parentUUID": "a8b5c41b-be0f-48c9-ac1d-1469e493d883",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = event.createAttendee({ name: 'Zac', email: 'zac@example.com' });\nassert_1.default.strictEqual(attendee.name(), 'Zac');\nassert_1.default.strictEqual(attendee.email(), 'zac@example.com');\nassert_1.default.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "170e994e-e32a-4937-a870-63e81b591a89",
                  "parentUUID": "a8b5c41b-be0f-48c9-ac1d-1469e493d883",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bffc3f0b-bf76-45f9-bd88-38cda0bbd635",
                "5eb72509-a3e5-4f80-a121-6c57d080cd16",
                "a92c2800-13ef-4dcb-85c7-19d3ad44a664",
                "2fdc954b-0200-4934-80a3-a17408ebd8dc",
                "170e994e-e32a-4937-a870-63e81b591a89"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5b6f5974-34e3-43f0-9b6d-124ad2f949d6",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.attendees().length, 0);\nconst attendee = event.createAttendee();\nassert_1.default.strictEqual(event.attendees().length, 1);\nassert_1.default.deepStrictEqual(event.attendees()[0], attendee);",
                  "err": {},
                  "uuid": "5f35c1c4-0ee8-4108-b3e8-481cc40dadda",
                  "parentUUID": "5b6f5974-34e3-43f0-9b6d-124ad2f949d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.attendees([{ name: 'Person A' }, { name: 'Person B' }]);\nassert_1.default.strictEqual(event.attendees().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "5c3c00c8-a75e-4a8e-8bfd-4fff052a8865",
                  "parentUUID": "5b6f5974-34e3-43f0-9b6d-124ad2f949d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f35c1c4-0ee8-4108-b3e8-481cc40dadda",
                "5c3c00c8-a75e-4a8e-8bfd-4fff052a8865"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4bcc233c-bf07-4627-b125-2168d6ae6a66",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.ok(event.createAlarm() instanceof alarm_1.default);",
                  "err": {},
                  "uuid": "90423419-66de-4e6d-986c-9f9877886fab",
                  "parentUUID": "4bcc233c-bf07-4627-b125-2168d6ae6a66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst alarm = event.createAlarm({ type: alarm_1.ICalAlarmType.audio });\nassert_1.default.strictEqual(alarm.type(), 'audio');",
                  "err": {},
                  "uuid": "0fb418d9-3f90-4bf0-8ad4-fdc2614984cd",
                  "parentUUID": "4bcc233c-bf07-4627-b125-2168d6ae6a66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90423419-66de-4e6d-986c-9f9877886fab",
                "0fb418d9-3f90-4bf0-8ad4-fdc2614984cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c128505a-bedd-4288-a987-1549f6630ca3",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.alarms().length, 0);\nconst alarm = event.createAlarm();\nassert_1.default.strictEqual(event.alarms().length, 1);\nassert_1.default.deepStrictEqual(event.alarms()[0], alarm);",
                  "err": {},
                  "uuid": "52f77ea6-4a6a-47eb-a7c2-5bedd4d5816c",
                  "parentUUID": "c128505a-bedd-4288-a987-1549f6630ca3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.alarms([\n    { type: alarm_1.ICalAlarmType.audio },\n    { type: alarm_1.ICalAlarmType.display }\n]);\nassert_1.default.strictEqual(event.alarms().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "d7405fac-2552-4eaa-bb13-dd3f48e40dd3",
                  "parentUUID": "c128505a-bedd-4288-a987-1549f6630ca3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52f77ea6-4a6a-47eb-a7c2-5bedd4d5816c",
                "d7405fac-2552-4eaa-bb13-dd3f48e40dd3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77bd686c-d4de-4b12-8180-c6081d055028",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.ok(event.createCategory() instanceof category_1.default);",
                  "err": {},
                  "uuid": "1730c251-1bc6-42eb-b5e1-dc2ceaa3efb3",
                  "parentUUID": "77bd686c-d4de-4b12-8180-c6081d055028",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst category = event.createCategory({ name: 'foo' });\nassert_1.default.strictEqual(category.name(), 'foo');",
                  "err": {},
                  "uuid": "2862ff23-2425-4238-9e46-5a775543981d",
                  "parentUUID": "77bd686c-d4de-4b12-8180-c6081d055028",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1730c251-1bc6-42eb-b5e1-dc2ceaa3efb3",
                "2862ff23-2425-4238-9e46-5a775543981d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2f9608f0-6d47-420e-b1c6-4795594f2079",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.categories().length, 0);\nconst category = event.createCategory();\nassert_1.default.strictEqual(event.categories().length, 1);\nassert_1.default.deepStrictEqual(event.categories()[0], category);",
                  "err": {},
                  "uuid": "9e353ae9-d7b6-4b47-9f78-f4761df63a56",
                  "parentUUID": "2f9608f0-6d47-420e-b1c6-4795594f2079",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.categories([\n    { name: 'foo' },\n    { name: 'bar' }\n]);\nassert_1.default.strictEqual(event.categories().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "b665b5bf-84e6-49ec-ba71-fd2fc3d4ea77",
                  "parentUUID": "2f9608f0-6d47-420e-b1c6-4795594f2079",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e353ae9-d7b6-4b47-9f78-f4761df63a56",
                "b665b5bf-84e6-49ec-ba71-fd2fc3d4ea77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2fdf5584-1c05-482f-91e0-85636b63c09f",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.status(), null);\nevent.status(event_1.ICalEventStatus.CONFIRMED);\nassert_1.default.strictEqual(event.status(), 'CONFIRMED');\nevent.status(null);\nassert_1.default.strictEqual(event.status(), null);",
                  "err": {},
                  "uuid": "0d8899fe-d6b3-4994-8d97-cca033bf5146",
                  "parentUUID": "2fdf5584-1c05-482f-91e0-85636b63c09f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.status(null));\nassert_1.default.deepStrictEqual(e, e.status(event_1.ICalEventStatus.CONFIRMED));",
                  "err": {},
                  "uuid": "5e1cf11b-7570-41b5-bf12-e316f643e53a",
                  "parentUUID": "2fdf5584-1c05-482f-91e0-85636b63c09f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.status(event_1.ICalEventStatus.CONFIRMED);\ne.status(null);\nassert_1.default.strictEqual(e.status(), null);",
                  "err": {},
                  "uuid": "ec66075a-7fe2-4067-95f6-e600ca4e3356",
                  "parentUUID": "2fdf5584-1c05-482f-91e0-85636b63c09f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.status(event_1.ICalEventStatus.CONFIRMED);\nassert_1.default.strictEqual(e.status(), 'CONFIRMED');\nassert_1.default.strictEqual(e.status(), event_1.ICalEventStatus.CONFIRMED);",
                  "err": {},
                  "uuid": "84c7ffb8-8546-47de-bca1-5743869a9ffc",
                  "parentUUID": "2fdf5584-1c05-482f-91e0-85636b63c09f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status('COOKING');\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status(Infinity);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status(NaN);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status(-1);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);",
                  "err": {},
                  "uuid": "b5aa80e6-6906-46fa-b6a5-d5b5123c8ae0",
                  "parentUUID": "2fdf5584-1c05-482f-91e0-85636b63c09f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d8899fe-d6b3-4994-8d97-cca033bf5146",
                "5e1cf11b-7570-41b5-bf12-e316f643e53a",
                "ec66075a-7fe2-4067-95f6-e600ca4e3356",
                "84c7ffb8-8546-47de-bca1-5743869a9ffc",
                "b5aa80e6-6906-46fa-b6a5-d5b5123c8ae0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "11c09b6d-604b-4ed9-a203-9441ef638248",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.busystatus(), null);\nevent.busystatus(event_1.ICalEventBusyStatus.BUSY);\nassert_1.default.strictEqual(event.busystatus(), 'BUSY');\nevent.busystatus(null);\nassert_1.default.strictEqual(event.busystatus(), null);",
                  "err": {},
                  "uuid": "abadd81c-4eb8-4516-bd48-c5432db7c4a3",
                  "parentUUID": "11c09b6d-604b-4ed9-a203-9441ef638248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.busystatus(null));\nassert_1.default.deepStrictEqual(e, e.busystatus(event_1.ICalEventBusyStatus.BUSY));",
                  "err": {},
                  "uuid": "ee91d1cd-85f0-4570-80cf-34653e078f23",
                  "parentUUID": "11c09b6d-604b-4ed9-a203-9441ef638248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.busystatus(event_1.ICalEventBusyStatus.BUSY);\ne.busystatus(null);\nassert_1.default.strictEqual(e.busystatus(), null);",
                  "err": {},
                  "uuid": "8653d3db-7eea-4e6b-95ff-589de580ca6d",
                  "parentUUID": "11c09b6d-604b-4ed9-a203-9441ef638248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.busystatus(event_1.ICalEventBusyStatus.BUSY);\nassert_1.default.strictEqual(e.busystatus(), 'BUSY');",
                  "err": {},
                  "uuid": "fac47f3f-26db-4e83-8580-233215aa49bb",
                  "parentUUID": "11c09b6d-604b-4ed9-a203-9441ef638248",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus('COOKING');\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus(Infinity);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus(NaN);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus(-1);\n}, /FREE, TENTATIVE, BUSY, OOF/);",
                  "err": {},
                  "uuid": "e792a1e8-c548-4933-a03f-f6f31f8cf2b6",
                  "parentUUID": "11c09b6d-604b-4ed9-a203-9441ef638248",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "abadd81c-4eb8-4516-bd48-c5432db7c4a3",
                "ee91d1cd-85f0-4570-80cf-34653e078f23",
                "8653d3db-7eea-4e6b-95ff-589de580ca6d",
                "fac47f3f-26db-4e83-8580-233215aa49bb",
                "e792a1e8-c548-4933-a03f-f6f31f8cf2b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b559e876-266d-4af5-a05e-1fb38f21649b",
              "title": "priority()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event priority() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.priority(), null);\ne.priority(5);\nassert_1.default.strictEqual(e.priority(), 5);",
                  "err": {},
                  "uuid": "b6924628-b58b-44a7-bc52-4dd9535e4c8f",
                  "parentUUID": "b559e876-266d-4af5-a05e-1fb38f21649b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event priority() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.priority(null));\nassert_1.default.deepStrictEqual(e, e.priority(5));",
                  "err": {},
                  "uuid": "d8169f64-85eb-4c8b-a619-2362104a1f92",
                  "parentUUID": "b559e876-266d-4af5-a05e-1fb38f21649b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event priority() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.priority(5);\nassert_1.default.strictEqual(event.priority(), 5);\nassert_1.default.ok(event.toString().includes('PRIORITY:5'));",
                  "err": {},
                  "uuid": "37bc80d3-69b3-4eb0-b49d-4c4e3e35d3b5",
                  "parentUUID": "b559e876-266d-4af5-a05e-1fb38f21649b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b6924628-b58b-44a7-bc52-4dd9535e4c8f",
                "d8169f64-85eb-4c8b-a619-2362104a1f92",
                "37bc80d3-69b3-4eb0-b49d-4c4e3e35d3b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a31a9277-7eea-4435-92cf-8df8fcc9bca1",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.url(), null);\ne.url('http://sebbo.net/');\nassert_1.default.strictEqual(e.url(), 'http://sebbo.net/');",
                  "err": {},
                  "uuid": "6d2c7e02-b7f8-4d61-a22d-0e7fbf2dd4ec",
                  "parentUUID": "a31a9277-7eea-4435-92cf-8df8fcc9bca1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.url(null));\nassert_1.default.deepStrictEqual(e, e.url('http://sebbo.net/'));",
                  "err": {},
                  "uuid": "4f6a585e-d7ec-4e8e-905b-a8edd09d5ef8",
                  "parentUUID": "a31a9277-7eea-4435-92cf-8df8fcc9bca1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.url('http://github.com/sebbo2002/ical-generator');\nassert_1.default.strictEqual(event.url(), 'http://github.com/sebbo2002/ical-generator');",
                  "err": {},
                  "uuid": "fa644098-44f8-4220-9be9-c7ec2f9e7e79",
                  "parentUUID": "a31a9277-7eea-4435-92cf-8df8fcc9bca1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d2c7e02-b7f8-4d61-a22d-0e7fbf2dd4ec",
                "4f6a585e-d7ec-4e8e-905b-a8edd09d5ef8",
                "fa644098-44f8-4220-9be9-c7ec2f9e7e79"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5527859-227e-4039-9257-9105deabb180",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.created(new Date()));",
                  "err": {},
                  "uuid": "e1176dd1-04a4-4a01-9f4a-9a30918bc1e6",
                  "parentUUID": "f5527859-227e-4039-9257-9105deabb180",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created(moment_timezone_1.default());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.created()));",
                  "err": {},
                  "uuid": "7e8859a5-3cef-47af-8935-c497c13af2f5",
                  "parentUUID": "f5527859-227e-4039-9257-9105deabb180",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created(new Date());\nassert_1.default.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "cecf5e4f-9d4b-42b7-a27d-46f4c8c2782f",
                  "parentUUID": "f5527859-227e-4039-9257-9105deabb180",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created(moment_timezone_1.default().toJSON());\nassert_1.default.strictEqual(typeof e.created(), 'string');",
                  "err": {},
                  "uuid": "54b79e6b-d709-446a-bb20-df1235cfb6a1",
                  "parentUUID": "f5527859-227e-4039-9257-9105deabb180",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created(new Date());\nassert_1.default.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "18df4991-092b-422a-89aa-6fef6fa18cbf",
                  "parentUUID": "f5527859-227e-4039-9257-9105deabb180",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new event_1.default({}, new calendar_1.default()).created(now);\nassert_1.default.deepStrictEqual((_a = e.created()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "87d07434-5cdd-43eb-b66a-2196fbd4b14e",
                  "parentUUID": "f5527859-227e-4039-9257-9105deabb180",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.created('hallo'); // this will produce a \"Deprecation warning\", sorry 😇\n}, /`created`/);",
                  "err": {},
                  "uuid": "dc2cbf0d-0945-47c0-b46b-912a46579aec",
                  "parentUUID": "f5527859-227e-4039-9257-9105deabb180",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1176dd1-04a4-4a01-9f4a-9a30918bc1e6",
                "7e8859a5-3cef-47af-8935-c497c13af2f5",
                "cecf5e4f-9d4b-42b7-a27d-46f4c8c2782f",
                "54b79e6b-d709-446a-bb20-df1235cfb6a1",
                "18df4991-092b-422a-89aa-6fef6fa18cbf",
                "87d07434-5cdd-43eb-b66a-2196fbd4b14e",
                "dc2cbf0d-0945-47c0-b46b-912a46579aec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b9841787-3041-4924-9aa8-73386008fb23",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.lastModified(new Date()));",
                  "err": {},
                  "uuid": "b0f79674-1989-4770-8018-f9604bc8b41a",
                  "parentUUID": "b9841787-3041-4924-9aa8-73386008fb23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.lastModified(moment_timezone_1.default());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.lastModified()));",
                  "err": {},
                  "uuid": "13342adf-d6c2-4414-8dd6-4e5358ddcdab",
                  "parentUUID": "b9841787-3041-4924-9aa8-73386008fb23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.lastModified(new Date());\nassert_1.default.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "bd0f625f-74bf-4610-b921-5ad5afbc475d",
                  "parentUUID": "b9841787-3041-4924-9aa8-73386008fb23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().toJSON();\ne.lastModified(date);\nassert_1.default.strictEqual(e.lastModified(), date);",
                  "err": {},
                  "uuid": "1ce13df4-110b-48d0-ba1f-44bcd6addd5e",
                  "parentUUID": "b9841787-3041-4924-9aa8-73386008fb23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.lastModified(new Date());\nassert_1.default.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "6368385e-1810-44c3-b59d-128a54b3e5ad",
                  "parentUUID": "b9841787-3041-4924-9aa8-73386008fb23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new event_1.default({}, new calendar_1.default()).lastModified(now);\nassert_1.default.deepStrictEqual((_a = e.lastModified()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "28e9cfff-6c12-49df-94a6-2770ae7dd517",
                  "parentUUID": "b9841787-3041-4924-9aa8-73386008fb23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.lastModified('hallo');\n}, /`lastModified`/);",
                  "err": {},
                  "uuid": "bd0a6e2a-7fe7-486a-a9ef-569593b75c56",
                  "parentUUID": "b9841787-3041-4924-9aa8-73386008fb23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0f79674-1989-4770-8018-f9604bc8b41a",
                "13342adf-d6c2-4414-8dd6-4e5358ddcdab",
                "bd0f625f-74bf-4610-b921-5ad5afbc475d",
                "1ce13df4-110b-48d0-ba1f-44bcd6addd5e",
                "6368385e-1810-44c3-b59d-128a54b3e5ad",
                "28e9cfff-6c12-49df-94a6-2770ae7dd517",
                "bd0a6e2a-7fe7-486a-a9ef-569593b75c56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "087f198d-f8bf-4d0d-9d7f-080c2866f91b",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "7bcc1265-0e5d-4c98-8a0a-d7c73539363f",
                  "parentUUID": "087f198d-f8bf-4d0d-9d7f-080c2866f91b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bcc1265-0e5d-4c98-8a0a-d7c73539363f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d0c896b5-c240-40a5-a402-e69b999a4091",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = moment_timezone_1.default().add(1, 'month');\nconst event = new event_1.default({}, new calendar_1.default()).summary('foo').start(date);\nassert_1.default.strictEqual(event.toJSON().summary, 'foo', 'summary is okay');\nassert_1.default.deepStrictEqual(event.toJSON().start, date.toJSON(), 'start is okay');\nassert_1.default.strictEqual(typeof event.toJSON().start, 'string', 'start is string');",
                  "err": {},
                  "uuid": "a080f1c3-256e-417a-8148-51a6064f6161",
                  "parentUUID": "d0c896b5-c240-40a5-a402-e69b999a4091",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should stringify RRule objects",
                  "fullTitle": "ical-generator Event toJSON() should stringify RRule objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nconst rule = new rrule_1.RRule({\n    freq: rrule_1.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule_1.RRule.MO, rrule_1.RRule.FR],\n    dtstart: date,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\nconst event = new event_1.default({}, new calendar_1.default()).summary('foo').start(date).repeating(rule);\nconst json = event.toJSON();\nconst before = event.toString();\nassert_1.default.ok(typeof json.repeating === 'string');\nconst event2 = new event_1.default(event.toJSON(), new calendar_1.default());\nconst after = event2.toString();\nassert_1.default.strictEqual(after, before);",
                  "err": {},
                  "uuid": "4907cac6-bf6a-4fdd-b2ec-5bc58e1fccda",
                  "parentUUID": "d0c896b5-c240-40a5-a402-e69b999a4091",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Event toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new event_1.default({}, new calendar_1.default());\nnew event_1.default(a.toJSON(), new calendar_1.default());",
                  "err": {},
                  "uuid": "ac9b6bc8-ae66-4aaf-b4c1-65ec7d6669f0",
                  "parentUUID": "d0c896b5-c240-40a5-a402-e69b999a4091",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a080f1c3-256e-417a-8148-51a6064f6161",
                "4907cac6-bf6a-4fdd-b2ec-5bc58e1fccda",
                "ac9b6bc8-ae66-4aaf-b4c1-65ec7d6669f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aabf3dcb-fcb8-41dc-90cb-aef04c961237",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.transparency(), null);\nevent.transparency(event_1.ICalEventTransparency.OPAQUE);\nassert_1.default.strictEqual(event.transparency(), 'OPAQUE');\nevent.transparency(null);\nassert_1.default.strictEqual(event.transparency(), null);",
                  "err": {},
                  "uuid": "bc590bad-effb-4393-bda0-8b600c5ee4fb",
                  "parentUUID": "aabf3dcb-fcb8-41dc-90cb-aef04c961237",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.transparency(null));\nassert_1.default.deepStrictEqual(e, e.transparency(event_1.ICalEventTransparency.TRANSPARENT));",
                  "err": {},
                  "uuid": "24ec4e11-50fc-45fd-aeac-6062f1e1ab30",
                  "parentUUID": "aabf3dcb-fcb8-41dc-90cb-aef04c961237",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.transparency(event_1.ICalEventTransparency.OPAQUE);\ne.transparency(null);\nassert_1.default.strictEqual(e.transparency(), null);",
                  "err": {},
                  "uuid": "eda471e7-3b2e-42d1-bf47-b37395a5d4fd",
                  "parentUUID": "aabf3dcb-fcb8-41dc-90cb-aef04c961237",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.transparency(event_1.ICalEventTransparency.OPAQUE);\nassert_1.default.strictEqual(e.transparency(), 'OPAQUE');",
                  "err": {},
                  "uuid": "ee9d86b4-8a45-4847-8a8f-e8fc2e1a6aa9",
                  "parentUUID": "aabf3dcb-fcb8-41dc-90cb-aef04c961237",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.transparency('COOKING');\n}, /TRANSPARENT, OPAQUE/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.transparency(Infinity);\n}, /TRANSPARENT, OPAQUE/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.transparency(-1);\n}, /TRANSPARENT, OPAQUE/);",
                  "err": {},
                  "uuid": "8448c55f-fade-4382-b86d-9789316c427f",
                  "parentUUID": "aabf3dcb-fcb8-41dc-90cb-aef04c961237",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc590bad-effb-4393-bda0-8b600c5ee4fb",
                "24ec4e11-50fc-45fd-aeac-6062f1e1ab30",
                "eda471e7-3b2e-42d1-bf47-b37395a5d4fd",
                "ee9d86b4-8a45-4847-8a8f-e8fc2e1a6aa9",
                "8448c55f-fade-4382-b86d-9789316c427f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "95d6ead3-c721-4b7e-9d1e-28c09cc712dc",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without start",
                  "fullTitle": "ical-generator Event toString() shoult throw an error without start",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    summary: 'Example Event'\n}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.toString();\n}, /`start`/);",
                  "err": {},
                  "uuid": "8a4074f2-45f0-4325-9d91-c667039d6c58",
                  "parentUUID": "95d6ead3-c721-4b7e-9d1e-28c09cc712dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event toString() should make use of escaping",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Hel\\\\\\\\lo\\nW;orl,d'\n}, new calendar_1.default());\nassert_1.default.ok(e.toString().indexOf('Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d') > -1);",
                  "err": {},
                  "uuid": "f182f3f2-7fdf-49e9-93ba-8e26fcb790ed",
                  "parentUUID": "95d6ead3-c721-4b7e-9d1e-28c09cc712dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event toString() should render correct UIDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nconst event = new event_1.default({\n    id: 42,\n    start: moment_timezone_1.default(),\n    summary: ':)'\n}, cal);\nassert_1.default.ok(event.toString().indexOf('UID:42\\r') > -1);",
                  "err": {},
                  "uuid": "476804ba-4fdf-4fa1-9501-806e38e4e57a",
                  "parentUUID": "95d6ead3-c721-4b7e-9d1e-28c09cc712dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event toString() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nlet event = new event_1.default({\n    start: moment_timezone_1.default(),\n    end: moment_timezone_1.default(),\n    repeating: {\n        freq: types_1.ICalEventRepeatingFreq.WEEKLY\n    }\n}, cal);\nassert_1.default.ok(!event.toString().includes('WKST'), 'without WKST');\nevent = new event_1.default({\n    start: moment_timezone_1.default(),\n    end: moment_timezone_1.default(),\n    repeating: {\n        freq: types_1.ICalEventRepeatingFreq.WEEKLY,\n        startOfWeek: types_1.ICalWeekday.SU\n    }\n}, cal);\nassert_1.default.ok(event.toString().includes('WKST'), 'with WKST');",
                  "err": {},
                  "uuid": "885ccbec-6d9d-47e8-a934-c11d51f0e985",
                  "parentUUID": "95d6ead3-c721-4b7e-9d1e-28c09cc712dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a4074f2-45f0-4325-9d91-c667039d6c58",
                "f182f3f2-7fdf-49e9-93ba-8e26fcb790ed",
                "476804ba-4fdf-4fa1-9501-806e38e4e57a",
                "885ccbec-6d9d-47e8-a934-c11d51f0e985"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "14765322-4e61-4890-b4cd-45f45a6262ca",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7834ada1-05fb-4cdc-bf47-ec668c07da78",
              "title": "default",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be a function",
                  "fullTitle": "ical-generator Index default should be a function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(typeof src_1.default, 'function');",
                  "err": {},
                  "uuid": "7ad82abd-f726-4903-8ece-5a97a4f4ff11",
                  "parentUUID": "7834ada1-05fb-4cdc-bf47-ec668c07da78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalCalendar",
                  "fullTitle": "ical-generator Index default should return a ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.default() instanceof src_1.ICalCalendar);",
                  "err": {},
                  "uuid": "2fdc65a5-ef60-43be-b1d7-57ac4627b2e2",
                  "parentUUID": "7834ada1-05fb-4cdc-bf47-ec668c07da78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ad82abd-f726-4903-8ece-5a97a4f4ff11",
                "2fdc65a5-ef60-43be-b1d7-57ac4627b2e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d753dae5-533c-4dd0-8cc5-452db19be544",
              "title": "Alarm",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAlarm",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarm",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAlarm);",
                  "err": {},
                  "uuid": "4678e1e1-13b6-4f24-9ba2-365245c37c55",
                  "parentUUID": "d753dae5-533c-4dd0-8cc5-452db19be544",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAlarmType",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarmType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAlarmType);",
                  "err": {},
                  "uuid": "68b7813b-5be5-458b-8227-e02f566ceaf6",
                  "parentUUID": "d753dae5-533c-4dd0-8cc5-452db19be544",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4678e1e1-13b6-4f24-9ba2-365245c37c55",
                "68b7813b-5be5-458b-8227-e02f566ceaf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bc40ebf7-4df7-403f-ac02-715c47574fb5",
              "title": "Attendee",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAttendee",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendee",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAttendee);",
                  "err": {},
                  "uuid": "0179baf7-4f53-46b8-b812-1e95ce879b43",
                  "parentUUID": "bc40ebf7-4df7-403f-ac02-715c47574fb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeType",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAttendeeType);",
                  "err": {},
                  "uuid": "cdb055c5-c023-429d-a742-1a68854007c6",
                  "parentUUID": "bc40ebf7-4df7-403f-ac02-715c47574fb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeRole",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeRole",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAttendeeRole);",
                  "err": {},
                  "uuid": "10234748-2c18-45bb-9e8f-d9ffe60ab916",
                  "parentUUID": "bc40ebf7-4df7-403f-ac02-715c47574fb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeStatus",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalAttendeeStatus);",
                  "err": {},
                  "uuid": "933f027a-13cf-415b-bf77-46de3c05136f",
                  "parentUUID": "bc40ebf7-4df7-403f-ac02-715c47574fb5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0179baf7-4f53-46b8-b812-1e95ce879b43",
                "cdb055c5-c023-429d-a742-1a68854007c6",
                "10234748-2c18-45bb-9e8f-d9ffe60ab916",
                "933f027a-13cf-415b-bf77-46de3c05136f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2bd7b77a-5abc-47cf-9e90-f7c05104d455",
              "title": "Calendar",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCalendar",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalCalendar);",
                  "err": {},
                  "uuid": "25cefd6c-601d-4875-bb11-e514c50decbc",
                  "parentUUID": "2bd7b77a-5abc-47cf-9e90-f7c05104d455",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalCalendarMethod",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendarMethod",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalCalendarMethod);",
                  "err": {},
                  "uuid": "d88eac90-d08f-480b-8b81-e047b40d4705",
                  "parentUUID": "2bd7b77a-5abc-47cf-9e90-f7c05104d455",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25cefd6c-601d-4875-bb11-e514c50decbc",
                "d88eac90-d08f-480b-8b81-e047b40d4705"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3bdb6866-2f52-4590-b96f-dd9b90092e84",
              "title": "Category",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCategory",
                  "fullTitle": "ical-generator Index Category should export ICalCategory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalCategory);",
                  "err": {},
                  "uuid": "dc604c71-e71e-4d93-a87e-62ea7e149e15",
                  "parentUUID": "3bdb6866-2f52-4590-b96f-dd9b90092e84",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc604c71-e71e-4d93-a87e-62ea7e149e15"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2f63dfc6-500c-4f6e-8e12-4e555991fc19",
              "title": "Event",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEvent",
                  "fullTitle": "ical-generator Index Event should export ICalEvent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEvent);",
                  "err": {},
                  "uuid": "12ecec60-8c13-46f9-8569-088e92d15826",
                  "parentUUID": "2f63dfc6-500c-4f6e-8e12-4e555991fc19",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEventStatus);",
                  "err": {},
                  "uuid": "ed59e6ec-ee04-4a25-8270-78cdd38853cd",
                  "parentUUID": "2f63dfc6-500c-4f6e-8e12-4e555991fc19",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventBusyStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventBusyStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEventBusyStatus);",
                  "err": {},
                  "uuid": "fe369fea-8180-4692-9436-cadfde1aa339",
                  "parentUUID": "2f63dfc6-500c-4f6e-8e12-4e555991fc19",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventTransparency",
                  "fullTitle": "ical-generator Index Event should export ICalEventTransparency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEventTransparency);",
                  "err": {},
                  "uuid": "54897eb5-0b70-47af-b5c7-ce6c516af1a2",
                  "parentUUID": "2f63dfc6-500c-4f6e-8e12-4e555991fc19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12ecec60-8c13-46f9-8569-088e92d15826",
                "ed59e6ec-ee04-4a25-8270-78cdd38853cd",
                "fe369fea-8180-4692-9436-cadfde1aa339",
                "54897eb5-0b70-47af-b5c7-ce6c516af1a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7b53d80d-e6ef-4fcf-bb6e-d74d4b165ab5",
              "title": "Type",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEventRepeatingFreq",
                  "fullTitle": "ical-generator Index Type should export ICalEventRepeatingFreq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalEventRepeatingFreq);",
                  "err": {},
                  "uuid": "7dd7ae2d-c568-4554-861d-894b9fe556ee",
                  "parentUUID": "7b53d80d-e6ef-4fcf-bb6e-d74d4b165ab5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalWeekday",
                  "fullTitle": "ical-generator Index Type should export ICalWeekday",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(src_1.ICalWeekday);",
                  "err": {},
                  "uuid": "1191244f-0ab6-4f7c-b702-14f64846ef2e",
                  "parentUUID": "7b53d80d-e6ef-4fcf-bb6e-d74d4b165ab5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7dd7ae2d-c568-4554-861d-894b9fe556ee",
                "1191244f-0ab6-4f7c-b702-14f64846ef2e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "38bdc88a-cf8a-4dc1-a7b6-7b5af1114d7f",
              "title": "Tools",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export formatDate",
                  "fullTitle": "ical-generator Index Tools should export formatDate",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(typeof src_1.formatDate === 'function');",
                  "err": {},
                  "uuid": "3830887f-03fe-4177-b4a0-14759c51afe9",
                  "parentUUID": "38bdc88a-cf8a-4dc1-a7b6-7b5af1114d7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export formatDateTZ",
                  "fullTitle": "ical-generator Index Tools should export formatDateTZ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(typeof src_1.formatDateTZ === 'function');",
                  "err": {},
                  "uuid": "8345e7f2-841a-4f24-b070-cfb2cdc22ac5",
                  "parentUUID": "38bdc88a-cf8a-4dc1-a7b6-7b5af1114d7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export escape",
                  "fullTitle": "ical-generator Index Tools should export escape",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(typeof src_1.escape === 'function');",
                  "err": {},
                  "uuid": "fa179c78-aab2-49f0-ba41-3612149a0c47",
                  "parentUUID": "38bdc88a-cf8a-4dc1-a7b6-7b5af1114d7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export foldLines",
                  "fullTitle": "ical-generator Index Tools should export foldLines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(typeof src_1.foldLines === 'function');",
                  "err": {},
                  "uuid": "10cbe8b7-8ee1-41ad-9975-ee012f0f9fcd",
                  "parentUUID": "38bdc88a-cf8a-4dc1-a7b6-7b5af1114d7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3830887f-03fe-4177-b4a0-14759c51afe9",
                "8345e7f2-841a-4f24-b070-cfb2cdc22ac5",
                "fa179c78-aab2-49f0-ba41-3612149a0c47",
                "10cbe8b7-8ee1-41ad-9975-ee012f0f9fcd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c2f669c8-4152-431b-89d9-6069b5b85004",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9f707bee-6dcb-493e-abab-3ff77ab0d295",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: moment_timezone_1.default('2016-04-30T22:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "f4fd0f3a-736d-449b-bfbb-5447ceefcd13",
                  "parentUUID": "9f707bee-6dcb-493e-abab-3ff77ab0d295",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Brazil/East',\n    events: [{\n            start: moment_timezone_1.default('Sun May 01 2016 00:00:00 GMT-3'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "668e7491-a637-4f95-8c50-7fe0aeeeaa52",
                  "parentUUID": "9f707bee-6dcb-493e-abab-3ff77ab0d295",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4fd0f3a-736d-449b-bfbb-5447ceefcd13",
                "668e7491-a637-4f95-8c50-7fe0aeeeaa52"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5fc85a8c-61e9-457a-8835-d24be5dda9ec",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: moment_timezone_1.default('Sun May 01 2016 00:00:00 GMT+0200 (CEST)'),\n            end: moment_timezone_1.default('Sun May 01 2016 02:00:00 GMT+0200 (CEST)'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [types_1.ICalWeekday.SU],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "c5466e77-24f2-4c2c-81f4-6686e3114962",
                  "parentUUID": "5fc85a8c-61e9-457a-8835-d24be5dda9ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking the first elemnt of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking the first elemnt of the byDay array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: moment_timezone_1.default('Sun May 01 2016 00:00:00 GMT+0200 (CEST)'),\n            end: moment_timezone_1.default('Sun May 01 2016 02:00:00 GMT+0200 (CEST)'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [types_1.ICalWeekday.MO, types_1.ICalWeekday.FR],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "103c2dc9-132b-446d-a0d0-9b1029123a8e",
                  "parentUUID": "5fc85a8c-61e9-457a-8835-d24be5dda9ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c5466e77-24f2-4c2c-81f4-6686e3114962",
                "103c2dc9-132b-446d-a0d0-9b1029123a8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "25378a73-668f-4452-9e4a-5fca8d033451",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment_timezone_1.default(1553219772000),\n            end: moment_timezone_1.default(1553219772000),\n            recurrenceId: moment_timezone_1.default(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "6d9b6a6d-fd31-4674-b70b-dce9ebc0959e",
                  "parentUUID": "25378a73-668f-4452-9e4a-5fca8d033451",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment_timezone_1.default(1553219772000),\n            end: moment_timezone_1.default(1553219772000),\n            recurrenceId: moment_timezone_1.default(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "c483d9cf-57cf-4330-b166-cba68375a105",
                  "parentUUID": "25378a73-668f-4452-9e4a-5fca8d033451",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment_timezone_1.default(1553219772000),\n            end: moment_timezone_1.default(1553219772000),\n            recurrenceId: moment_timezone_1.default(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "a51fc6ea-8619-49d7-9135-9e33e4fdd384",
                  "parentUUID": "25378a73-668f-4452-9e4a-5fca8d033451",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d9b6a6d-fd31-4674-b70b-dce9ebc0959e",
                "c483d9cf-57cf-4330-b166-cba68375a105",
                "a51fc6ea-8619-49d7-9135-9e33e4fdd384"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73e0eed8-83a4-4359-bbc4-85eed12f7b37",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: moment_timezone_1.default('2020-08-13T00:00:00+01:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: moment_timezone_1.default('2020-12-13T00:00:00+01:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('EXDATE;TZID=Europe/Berlin:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "077b3cb3-86c8-46c2-8f30-b589c2fa2953",
                  "parentUUID": "73e0eed8-83a4-4359-bbc4-85eed12f7b37",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'America/New_York',\n    events: [{\n            start: moment_timezone_1.default('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: moment_timezone_1.default('2020-12-13T00:00:00-05:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('EXDATE;TZID=America/New_York:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "7d6ef283-0cd0-4241-b503-df8a5c388820",
                  "parentUUID": "73e0eed8-83a4-4359-bbc4-85eed12f7b37",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "077b3cb3-86c8-46c2-8f30-b589c2fa2953",
                "7d6ef283-0cd0-4241-b503-df8a5c388820"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e12108e1-ff1e-4591-a2d5-5f539feed537",
              "title": "Issue #236",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should look like in the example",
                  "fullTitle": "Issues Issue #236 should look like in the example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            location: {\n                title: 'Los Angeles, California, United States',\n                geo: {\n                    lon: -118.24368,\n                    lat: 34.05223,\n                },\n                radius: 400\n            }\n        }]\n});\nassert_1.default.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:Example Event',\n    'LOCATION:Los Angeles\\\\, California\\\\, United States',\n    'X-APPLE-STRUCTURED-LOCATION;VALUE=URI;X-APPLE-RADIUS=400;X-TITLE=Los Angel',\n    ' es\\\\, California\\\\, United States:geo:34.05223,-118.24368',\n    'GEO:34.05223;-118.24368',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "5a2db189-824b-417a-887a-7ebf456efa5f",
                  "parentUUID": "e12108e1-ff1e-4591-a2d5-5f539feed537",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a2db189-824b-417a-887a-7ebf456efa5f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cc114b27-a5ab-4608-be0b-e39bb91d2a6f",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "aa624426-b696-496a-a56f-6f33931d9196",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "04167ad6-3fa8-4df4-8178-7dc18346cc46",
                  "title": "Date / String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate(null, '2018-07-05T18:24:00.052Z', false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "ee24a800-22c6-4e38-a157-f7674e37695b",
                      "parentUUID": "04167ad6-3fa8-4df4-8178-7dc18346cc46",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate(null, '2018-07-05T18:24:00.052Z', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "94b6e40b-1a14-47f1-bbdd-5ef8df437a25",
                      "parentUUID": "04167ad6-3fa8-4df4-8178-7dc18346cc46",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate(null, '2018-07-05T18:24:00.052Z', true, false), '20180705');",
                      "err": {},
                      "uuid": "cf72a4ec-9475-4e2e-99da-753b4343486d",
                      "parentUUID": "04167ad6-3fa8-4df4-8178-7dc18346cc46",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate(null, '2018-07-05T18:24:00.052Z', true, true), '20180705');",
                      "err": {},
                      "uuid": "f9f87acb-c4c5-4510-9cbf-b22a05099b75",
                      "parentUUID": "04167ad6-3fa8-4df4-8178-7dc18346cc46",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', false, false), '20180705T182400');",
                      "err": {},
                      "uuid": "14db0535-3714-4c79-bdce-56275c191bbc",
                      "parentUUID": "04167ad6-3fa8-4df4-8178-7dc18346cc46",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "cec4c902-02c2-406a-b70a-a39b53ddb52a",
                      "parentUUID": "04167ad6-3fa8-4df4-8178-7dc18346cc46",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', true, false), '20180705');",
                      "err": {},
                      "uuid": "c77379b1-b736-475c-89a9-c92674c527a6",
                      "parentUUID": "04167ad6-3fa8-4df4-8178-7dc18346cc46",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', true, true), '20180705');",
                      "err": {},
                      "uuid": "24da3b5e-61c4-4339-8009-436e74c9b468",
                      "parentUUID": "04167ad6-3fa8-4df4-8178-7dc18346cc46",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ee24a800-22c6-4e38-a157-f7674e37695b",
                    "94b6e40b-1a14-47f1-bbdd-5ef8df437a25",
                    "cf72a4ec-9475-4e2e-99da-753b4343486d",
                    "f9f87acb-c4c5-4510-9cbf-b22a05099b75",
                    "14db0535-3714-4c79-bdce-56275c191bbc",
                    "cec4c902-02c2-406a-b70a-a39b53ddb52a",
                    "c77379b1-b736-475c-89a9-c92674c527a6",
                    "24da3b5e-61c4-4339-8009-436e74c9b468"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d8e662b5-7202-4581-849d-90b9cf885441",
                  "title": "moment.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate(null, moment_timezone_1.default('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "e497ae3b-ef23-4e6c-ab70-22bcf5368707",
                      "parentUUID": "d8e662b5-7202-4581-849d-90b9cf885441",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate('Canada/Saskatchewan', moment_timezone_1.default('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "d829fea3-73be-498f-8787-8567d6318c9b",
                      "parentUUID": "d8e662b5-7202-4581-849d-90b9cf885441",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate(null, moment_timezone_1.default('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "7e5b6eb0-0673-4e30-b56a-e717105331a1",
                      "parentUUID": "d8e662b5-7202-4581-849d-90b9cf885441",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e497ae3b-ef23-4e6c-ab70-22bcf5368707",
                    "d829fea3-73be-498f-8787-8567d6318c9b",
                    "7e5b6eb0-0673-4e30-b56a-e717105331a1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "704fc21f-28a1-4f70-9c51-2fc5220526d0",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work without setting a timezone",
                      "timedOut": false,
                      "duration": 16,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate(null, luxon_1.DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "3422141e-4e0c-4f5f-84f4-6fdeccbc6002",
                      "parentUUID": "704fc21f-28a1-4f70-9c51-2fc5220526d0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Luxon should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate('Canada/Saskatchewan', luxon_1.DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "ff0771ab-3b15-43b4-8ab1-fdd1c5c6c897",
                      "parentUUID": "704fc21f-28a1-4f70-9c51-2fc5220526d0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate(null, luxon_1.DateTime.fromISO('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "e3573e45-7a4c-4869-aa80-c0f3ecbd056b",
                      "parentUUID": "704fc21f-28a1-4f70-9c51-2fc5220526d0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate(null, luxon_1.DateTime.fromISO('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "2a07dd20-c090-49d7-8230-6c9eb85dbaf8",
                      "parentUUID": "704fc21f-28a1-4f70-9c51-2fc5220526d0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3422141e-4e0c-4f5f-84f4-6fdeccbc6002",
                    "ff0771ab-3b15-43b4-8ab1-fdd1c5c6c897",
                    "e3573e45-7a4c-4869-aa80-c0f3ecbd056b",
                    "2a07dd20-c090-49d7-8230-6c9eb85dbaf8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 19,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "1ae1a9f6-e8c8-4fee-8c19-c3978bc0a418",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Day.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate(null, dayjs_1.default('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "9c3ae9e1-175a-4f5b-ad0c-85e1102601cf",
                      "parentUUID": "1ae1a9f6-e8c8-4fee-8c19-c3978bc0a418",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Day.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate('Canada/Saskatchewan', dayjs_1.default('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "ab6ac330-9f62-4327-8d38-a0d4011b86d4",
                      "parentUUID": "1ae1a9f6-e8c8-4fee-8c19-c3978bc0a418",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate(null, dayjs_1.default('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "faad48be-653c-484c-8dec-70cfcced7032",
                      "parentUUID": "1ae1a9f6-e8c8-4fee-8c19-c3978bc0a418",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert_1.default.strictEqual(tools_1.formatDate(null, dayjs_1.default('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "7d3a8ce7-15bd-4d40-9584-433e59dcf52c",
                      "parentUUID": "1ae1a9f6-e8c8-4fee-8c19-c3978bc0a418",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9c3ae9e1-175a-4f5b-ad0c-85e1102601cf",
                    "ab6ac330-9f62-4327-8d38-a0d4011b86d4",
                    "faad48be-653c-484c-8dec-70cfcced7032",
                    "7d3a8ce7-15bd-4d40-9584-433e59dcf52c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "438533ac-6519-4396-8a4f-5e75cf577b6c",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed = { timezone: 'Europe/Berlin' };\nassert_1.default.strictEqual(tools_1.formatDateTZ('Europe/Berlin', 'DSTART', moment_timezone_1.default('2018-07-02T15:48:05.000Z'), ed), 'DSTART;TZID=Europe/Berlin:20180702T174805');",
                  "err": {},
                  "uuid": "988ef402-881f-4987-9a21-f2fbd040d436",
                  "parentUUID": "438533ac-6519-4396-8a4f-5e75cf577b6c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.formatDateTZ(null, 'DSTART', '2018-07-02T15:48:05.000Z', {}), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "a41aaad2-ed89-4e5d-99e2-bfa751e5c719",
                  "parentUUID": "438533ac-6519-4396-8a4f-5e75cf577b6c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without eventdata parameter",
                  "fullTitle": "ICalTools formatDateTZ() should work without eventdata parameter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.formatDateTZ(null, 'DSTART', '2018-07-02T15:48:05.000Z'), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "d53c87f7-eec8-4e17-b271-56f502ccedae",
                  "parentUUID": "438533ac-6519-4396-8a4f-5e75cf577b6c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "988ef402-881f-4987-9a21-f2fbd040d436",
                "a41aaad2-ed89-4e5d-99e2-bfa751e5c719",
                "d53c87f7-eec8-4e17-b271-56f502ccedae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c1e545b9-5edd-4dee-945a-066c73ec0259",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.escape('Lorem \\\\ipsum'), 'Lorem \\\\\\\\ipsum');",
                  "err": {},
                  "uuid": "8c975582-7a61-4b53-aa7e-9d09a8b56b6f",
                  "parentUUID": "c1e545b9-5edd-4dee-945a-066c73ec0259",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.escape('Lorem ;ipsum'), 'Lorem \\\\;ipsum');",
                  "err": {},
                  "uuid": "55b77160-6dad-4335-8376-1148f19707c6",
                  "parentUUID": "c1e545b9-5edd-4dee-945a-066c73ec0259",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.escape('Lorem, ipsum'), 'Lorem\\\\, ipsum');",
                  "err": {},
                  "uuid": "cefe203a-f6b4-4c89-8d51-45da6f5b7015",
                  "parentUUID": "c1e545b9-5edd-4dee-945a-066c73ec0259",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.escape('Lorem \\ripsum'), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "e9c831fb-7281-4905-95ca-95c12cd5c248",
                  "parentUUID": "c1e545b9-5edd-4dee-945a-066c73ec0259",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.escape('Lorem \\nipsum'), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "00108e7b-98f9-4e1e-883d-f8031c4d62f7",
                  "parentUUID": "c1e545b9-5edd-4dee-945a-066c73ec0259",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.escape('Lorem \\r\\nipsum'), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "3fc2294a-4ce5-4677-8eda-ff322e35c78d",
                  "parentUUID": "c1e545b9-5edd-4dee-945a-066c73ec0259",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c975582-7a61-4b53-aa7e-9d09a8b56b6f",
                "55b77160-6dad-4335-8376-1148f19707c6",
                "cefe203a-f6b4-4c89-8d51-45da6f5b7015",
                "e9c831fb-7281-4905-95ca-95c12cd5c248",
                "00108e7b-98f9-4e1e-883d-f8031c4d62f7",
                "3fc2294a-4ce5-4677-8eda-ff322e35c78d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c9268d4-fd79-4da5-911e-a40981b6bdef",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.foldLines('12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981'), '12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "5766da98-bb36-4974-a19d-d58c13bb58bb",
                  "parentUUID": "0c9268d4-fd79-4da5-911e-a40981b6bdef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.foldLines('👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981'), '👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "bba79496-3bab-451b-bf97-b59be5419422",
                  "parentUUID": "0c9268d4-fd79-4da5-911e-a40981b6bdef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5766da98-bb36-4974-a19d-d58c13bb58bb",
                "bba79496-3bab-451b-bf97-b59be5419422"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "34a33134-8f4c-4da1-b72f-1217400da147",
              "title": "checkDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "cb5e3a3e-7398-4140-bdf5-824636c8ae7e",
                  "title": "Date",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Date",
                      "fullTitle": "ICalTools checkDate() Date should work with valid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date();\nassert_1.default.equal(tools_1.checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "9119e01c-1d8b-488d-b7fe-88dc2b684a92",
                      "parentUUID": "cb5e3a3e-7398-4140-bdf5-824636c8ae7e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Date",
                      "fullTitle": "ICalTools checkDate() Date should throw error for invalid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date('foo');\nassert_1.default.throws(() => {\n    tools_1.checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "d76a4ec3-e743-4c2c-b24a-6833640bdfea",
                      "parentUUID": "cb5e3a3e-7398-4140-bdf5-824636c8ae7e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9119e01c-1d8b-488d-b7fe-88dc2b684a92",
                    "d76a4ec3-e743-4c2c-b24a-6833640bdfea"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "cab11f7a-b579-432d-af04-4d6b5b041061",
                  "title": "String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid String",
                      "fullTitle": "ICalTools checkDate() String should work with valid String",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = '2021-03-28T13:15:23.587Z';\nassert_1.default.equal(tools_1.checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "e403cadb-b2e6-4e6f-b241-563f17363891",
                      "parentUUID": "cab11f7a-b579-432d-af04-4d6b5b041061",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid String",
                      "fullTitle": "ICalTools checkDate() String should throw error for invalid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = 'foo';\nassert_1.default.throws(() => {\n    tools_1.checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "4eecf014-4f48-4a0c-a09a-66fdd715bd73",
                      "parentUUID": "cab11f7a-b579-432d-af04-4d6b5b041061",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e403cadb-b2e6-4e6f-b241-563f17363891",
                    "4eecf014-4f48-4a0c-a09a-66fdd715bd73"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f824462d-8890-496e-bfd5-ba444be66dcc",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should work with valid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = luxon_1.DateTime.now();\nassert_1.default.equal(tools_1.checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "f990ddf0-bbed-4704-a598-59def34d8eab",
                      "parentUUID": "f824462d-8890-496e-bfd5-ba444be66dcc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should throw error for invalid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = luxon_1.DateTime.fromISO('foo');\nassert_1.default.throws(() => {\n    tools_1.checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "eadb7765-e3c3-4280-9fe6-ab2281d9c7f8",
                      "parentUUID": "f824462d-8890-496e-bfd5-ba444be66dcc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f990ddf0-bbed-4704-a598-59def34d8eab",
                    "eadb7765-e3c3-4280-9fe6-ab2281d9c7f8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "08f5587f-7392-499e-aef7-5fccc1524761",
                  "title": "Moment",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should work with valid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = moment_timezone_1.default();\nassert_1.default.equal(tools_1.checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "8424132c-eca7-49bc-afcb-705d16eb089a",
                      "parentUUID": "08f5587f-7392-499e-aef7-5fccc1524761",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should throw error for invalid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = moment_timezone_1.default('foo');\nassert_1.default.throws(() => {\n    tools_1.checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "654c9983-3ced-41bb-aafb-7b24216f81b5",
                      "parentUUID": "08f5587f-7392-499e-aef7-5fccc1524761",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8424132c-eca7-49bc-afcb-705d16eb089a",
                    "654c9983-3ced-41bb-aafb-7b24216f81b5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a9e7e016-813c-4e9d-a2e2-e38c1fd5282e",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should work with valid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = dayjs_1.default();\nassert_1.default.equal(tools_1.checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "29a8a52d-acb8-42eb-a6e9-5b4adf836f46",
                      "parentUUID": "a9e7e016-813c-4e9d-a2e2-e38c1fd5282e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should throw error for invalid Day.js",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = dayjs_1.default('foo');\nassert_1.default.throws(() => {\n    tools_1.checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "c7eb412e-17df-4885-a37a-1b94b8f9d956",
                      "parentUUID": "a9e7e016-813c-4e9d-a2e2-e38c1fd5282e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "29a8a52d-acb8-42eb-a6e9-5b4adf836f46",
                    "c7eb412e-17df-4885-a37a-1b94b8f9d956"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bca133f1-61a6-4f72-9e11-785b47256a59",
              "title": "toDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with strings",
                  "fullTitle": "ICalTools toDate() should work with strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual(tools_1.toDate(date.toJSON()), date);",
                  "err": {},
                  "uuid": "7672fda0-8958-4920-98a6-24f5c237aef4",
                  "parentUUID": "bca133f1-61a6-4f72-9e11-785b47256a59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with native Date",
                  "fullTitle": "ICalTools toDate() should work with native Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual(tools_1.toDate(date), date);",
                  "err": {},
                  "uuid": "26d83342-9917-4c46-ad01-bd41eb38ad89",
                  "parentUUID": "bca133f1-61a6-4f72-9e11-785b47256a59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment object",
                  "fullTitle": "ICalTools toDate() should work with moment object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual(tools_1.toDate(moment_timezone_1.default(date)), date);",
                  "err": {},
                  "uuid": "07ffe3f4-80af-4e8b-ba09-b42df05da7a4",
                  "parentUUID": "bca133f1-61a6-4f72-9e11-785b47256a59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Day.js object",
                  "fullTitle": "ICalTools toDate() should work with Day.js object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual(tools_1.toDate(dayjs_1.default(date)), date);",
                  "err": {},
                  "uuid": "06cbc00b-32ba-421f-8982-ebb0808acffc",
                  "parentUUID": "bca133f1-61a6-4f72-9e11-785b47256a59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with luxon DateTime object",
                  "fullTitle": "ICalTools toDate() should work with luxon DateTime object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert_1.default.deepStrictEqual(tools_1.toDate(luxon_1.DateTime.fromJSDate(date)), date);",
                  "err": {},
                  "uuid": "6c5ce4cf-55b3-491d-ac52-f09a3717ed97",
                  "parentUUID": "bca133f1-61a6-4f72-9e11-785b47256a59",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7672fda0-8958-4920-98a6-24f5c237aef4",
                "26d83342-9917-4c46-ad01-bd41eb38ad89",
                "07ffe3f4-80af-4e8b-ba09-b42df05da7a4",
                "06cbc00b-32ba-421f-8982-ebb0808acffc",
                "6c5ce4cf-55b3-491d-ac52-f09a3717ed97"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}