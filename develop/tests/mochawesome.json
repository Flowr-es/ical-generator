{
  "stats": {
    "suites": 101,
    "tests": 363,
    "passes": 363,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-27T15:37:28.332Z",
    "end": "2021-02-27T15:37:28.557Z",
    "duration": 225,
    "testsRegistered": 363,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "26d37dfe-0464-4568-99c9-44f82753c74e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ca9b9468-fe2a-4237-9242-94c6e81e9a8a",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2eeb4ae2-4fcb-40e2-9816-58e89ff2a40d",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    // @ts-ignore\n    new alarm_1.default({ type: alarm_1.ICalAlarmType.display }, null);\n}, /`event`/);",
                  "err": {},
                  "uuid": "325a3598-398d-47d5-9a93-3831a66c258b",
                  "parentUUID": "2eeb4ae2-4fcb-40e2-9816-58e89ff2a40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    // @ts-ignore\n    unknown: true,\n    type: alarm_1.ICalAlarmType.display\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.type(), 'display');",
                  "err": {},
                  "uuid": "57793d67-5482-4c4a-95d7-9abbfbf3dd6d",
                  "parentUUID": "2eeb4ae2-4fcb-40e2-9816-58e89ff2a40d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "325a3598-398d-47d5-9a93-3831a66c258b",
                "57793d67-5482-4c4a-95d7-9abbfbf3dd6d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c8737a01-0f82-4fd5-8a8a-cd1ef699cb7b",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.type(null));\nassert_1.default.deepStrictEqual(a, a.type(alarm_1.ICalAlarmType.display));",
                  "err": {},
                  "uuid": "49479cd2-b4a7-4a32-bc13-1d2b73a9d276",
                  "parentUUID": "c8737a01-0f82-4fd5-8a8a-cd1ef699cb7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.type(), null);\na.type(alarm_1.ICalAlarmType.display);\nassert_1.default.strictEqual(a.type(), 'display');\na.type(null);\nassert_1.default.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "abbab1cc-1cdb-461a-94c5-73d0c1853fa0",
                  "parentUUID": "c8737a01-0f82-4fd5-8a8a-cd1ef699cb7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.type('BANANA');\n}, /`type`/);",
                  "err": {},
                  "uuid": "afddaa4e-a236-4ae1-900a-354c5917281d",
                  "parentUUID": "c8737a01-0f82-4fd5-8a8a-cd1ef699cb7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 60 * 10\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('ACTION:DISPLAY') > -1);",
                  "err": {},
                  "uuid": "7695f18a-a6c4-4da4-b9d7-d37723b140c0",
                  "parentUUID": "c8737a01-0f82-4fd5-8a8a-cd1ef699cb7b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49479cd2-b4a7-4a32-bc13-1d2b73a9d276",
                "abbab1cc-1cdb-461a-94c5-73d0c1853fa0",
                "afddaa4e-a236-4ae1-900a-354c5917281d",
                "7695f18a-a6c4-4da4-b9d7-d37723b140c0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae8ca1d7-41c1-4006-a5ca-16ffcd9d37de",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.trigger(null));\nassert_1.default.deepStrictEqual(a, a.trigger(60 * 10));",
                  "err": {},
                  "uuid": "5f7306c4-45a1-4507-b1fb-b582f5e29e61",
                  "parentUUID": "ae8ca1d7-41c1-4006-a5ca-16ffcd9d37de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nconst now = new Date();\nassert_1.default.strictEqual(a.trigger(), null);\nassert_1.default.strictEqual(a.triggerAfter(), null);\na.trigger(300);\nassert_1.default.strictEqual(a.trigger(), 300);\nassert_1.default.strictEqual(a.triggerAfter(), -300);\n// Date\na.trigger(now);\nconst dateResult = a.trigger();\nassert_1.default.ok(moment_timezone_1.default.isMoment(dateResult));\nassert_1.default.ok(dateResult.isSame(now));\n// Null\na.trigger(null);\nassert_1.default.strictEqual(a.trigger(), null);\nassert_1.default.strictEqual(a.triggerAfter(), null);",
                  "err": {},
                  "uuid": "14e35049-073e-48c7-b29b-98f0c7a61a31",
                  "parentUUID": "ae8ca1d7-41c1-4006-a5ca-16ffcd9d37de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.trigger(Infinity);\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.trigger('hi');\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.trigger(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "d6d7d46b-6d03-47b7-8fe9-5d23339cac3a",
                  "parentUUID": "ae8ca1d7-41c1-4006-a5ca-16ffcd9d37de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(60 * 10);\na.trigger(null);\nassert_1.default.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "b0f0f890-ce8c-4bbb-a9c6-db563444def5",
                  "parentUUID": "ae8ca1d7-41c1-4006-a5ca-16ffcd9d37de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(new Date());\nassert_1.default.ok(moment_timezone_1.default.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "971758bc-df2a-4d4b-926b-9fa790fee7f4",
                  "parentUUID": "ae8ca1d7-41c1-4006-a5ca-16ffcd9d37de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(moment_timezone_1.default());\nassert_1.default.ok(moment_timezone_1.default.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "610583f7-e3f3-4a58-a68c-440694765ef5",
                  "parentUUID": "ae8ca1d7-41c1-4006-a5ca-16ffcd9d37de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment.duration",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment.duration",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(moment_timezone_1.default.duration(2, 'minutes'));\nassert_1.default.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "d21aaa74-de9d-426e-aa06-ffa15ca67841",
                  "parentUUID": "ae8ca1d7-41c1-4006-a5ca-16ffcd9d37de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.trigger(2 * 60);\nassert_1.default.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "d00fc993-061b-43b9-951b-b1a862ed0ea1",
                  "parentUUID": "ae8ca1d7-41c1-4006-a5ca-16ffcd9d37de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment_timezone_1.default('2015-02-01T13:38:45.000Z');\nconst a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, trigger: 60 * 10 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.trigger(trigger);\nassert_1.default.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "32fa52e0-1390-4a30-990e-cfeea943a0d4",
                  "parentUUID": "ae8ca1d7-41c1-4006-a5ca-16ffcd9d37de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f7306c4-45a1-4507-b1fb-b582f5e29e61",
                "14e35049-073e-48c7-b29b-98f0c7a61a31",
                "d6d7d46b-6d03-47b7-8fe9-5d23339cac3a",
                "b0f0f890-ce8c-4bbb-a9c6-db563444def5",
                "971758bc-df2a-4d4b-926b-9fa790fee7f4",
                "610583f7-e3f3-4a58-a68c-440694765ef5",
                "d21aaa74-de9d-426e-aa06-ffa15ca67841",
                "d00fc993-061b-43b9-951b-b1a862ed0ea1",
                "32fa52e0-1390-4a30-990e-cfeea943a0d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1569a87f-d00e-434b-a31b-c2b1720a497e",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.triggerAfter(60 * 10));",
                  "err": {},
                  "uuid": "8cbfee4d-98aa-4367-8db6-458dbcc0b4d1",
                  "parentUUID": "1569a87f-d00e-434b-a31b-c2b1720a497e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default())).triggerAfter(300);\nassert_1.default.strictEqual(a.triggerAfter(), 300);\nassert_1.default.strictEqual(a.trigger(), -300);",
                  "err": {},
                  "uuid": "7ba50665-4a37-4023-944b-170bde46eeae",
                  "parentUUID": "1569a87f-d00e-434b-a31b-c2b1720a497e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment.duration",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with moment.duration",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerAfter(moment_timezone_1.default.duration(2, 'minutes'));\nassert_1.default.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "a00dacbe-bc0f-460d-8f1c-575c1049e738",
                  "parentUUID": "1569a87f-d00e-434b-a31b-c2b1720a497e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerAfter(120);\nassert_1.default.strictEqual(a.trigger(), -120);",
                  "err": {},
                  "uuid": "202641c2-3ed1-43e2-8725-f6998df14165",
                  "parentUUID": "1569a87f-d00e-434b-a31b-c2b1720a497e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.triggerAfter(Infinity);\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerAfter('hi');\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerAfter(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "8fc03563-74e4-4055-87df-88d02fcf8871",
                  "parentUUID": "1569a87f-d00e-434b-a31b-c2b1720a497e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment_timezone_1.default('20150201T133845Z');\nconst a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, triggerAfter: 60 * 10 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('TRIGGER;RELATED=END:PT10M') > -1);\na.triggerAfter(trigger);\nassert_1.default.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "422aa835-44d3-4fcb-b715-9d5b2096cbed",
                  "parentUUID": "1569a87f-d00e-434b-a31b-c2b1720a497e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8cbfee4d-98aa-4367-8db6-458dbcc0b4d1",
                "7ba50665-4a37-4023-944b-170bde46eeae",
                "a00dacbe-bc0f-460d-8f1c-575c1049e738",
                "202641c2-3ed1-43e2-8725-f6998df14165",
                "8fc03563-74e4-4055-87df-88d02fcf8871",
                "422aa835-44d3-4fcb-b715-9d5b2096cbed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "afe42685-8021-4677-ab32-72e6437878ae",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.triggerBefore(null));\nassert_1.default.deepStrictEqual(a, a.triggerBefore(60 * 10));",
                  "err": {},
                  "uuid": "ce40c370-4028-4869-b856-a85cccfaf569",
                  "parentUUID": "afe42685-8021-4677-ab32-72e6437878ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nconst now = new Date();\nassert_1.default.strictEqual(a.triggerBefore(), null);\na.trigger(300);\nassert_1.default.strictEqual(a.triggerBefore(), 300);\n// Date\na.trigger(now);\nconst dateResult = a.triggerBefore();\nassert_1.default.ok(moment_timezone_1.default.isMoment(dateResult));\nassert_1.default.ok(dateResult.isSame(now));\n// Null\na.trigger(null);\nassert_1.default.strictEqual(a.triggerBefore(), null);",
                  "err": {},
                  "uuid": "41b778d1-c368-45ea-90bd-92b974c26839",
                  "parentUUID": "afe42685-8021-4677-ab32-72e6437878ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.triggerBefore(Infinity);\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerBefore('hi');\n}, /`trigger`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.triggerBefore(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "7e755896-cc1d-46df-bd10-491411100e1d",
                  "parentUUID": "afe42685-8021-4677-ab32-72e6437878ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore(60 * 10);\na.triggerBefore(null);\nassert_1.default.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "bbe0c556-9ed8-43d1-beb6-98703a268db4",
                  "parentUUID": "afe42685-8021-4677-ab32-72e6437878ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore(new Date());\nassert_1.default.ok(moment_timezone_1.default.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "39cad311-0108-43ee-94d1-d9b639d2d4aa",
                  "parentUUID": "afe42685-8021-4677-ab32-72e6437878ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore(moment_timezone_1.default());\nassert_1.default.ok(moment_timezone_1.default.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "5be93d24-a8ed-4b82-8620-6706d9fd3555",
                  "parentUUID": "afe42685-8021-4677-ab32-72e6437878ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment.duration",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment.duration",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore(moment_timezone_1.default.duration(2, 'minutes'));\nassert_1.default.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "12bffde8-e061-4c4b-aba3-86247944daae",
                  "parentUUID": "afe42685-8021-4677-ab32-72e6437878ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.triggerBefore(2 * 60);\nassert_1.default.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "ad63548a-21bb-45d8-80ae-b70346293c77",
                  "parentUUID": "afe42685-8021-4677-ab32-72e6437878ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment_timezone_1.default('2015-02-01T13:38:45.000Z');\nconst a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, triggerBefore: 60 * 10 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.triggerBefore(trigger);\nassert_1.default.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "21d35650-60b7-44fe-802a-2eb55709466f",
                  "parentUUID": "afe42685-8021-4677-ab32-72e6437878ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce40c370-4028-4869-b856-a85cccfaf569",
                "41b778d1-c368-45ea-90bd-92b974c26839",
                "7e755896-cc1d-46df-bd10-491411100e1d",
                "bbe0c556-9ed8-43d1-beb6-98703a268db4",
                "39cad311-0108-43ee-94d1-d9b639d2d4aa",
                "5be93d24-a8ed-4b82-8620-6706d9fd3555",
                "12bffde8-e061-4c4b-aba3-86247944daae",
                "ad63548a-21bb-45d8-80ae-b70346293c77",
                "21d35650-60b7-44fe-802a-2eb55709466f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3d18160-995b-4003-8324-191104eaddef",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.repeat(null));\nassert_1.default.deepStrictEqual(a, a.repeat(4));",
                  "err": {},
                  "uuid": "78929ebb-b6b8-47c3-9dad-85fe9637f742",
                  "parentUUID": "b3d18160-995b-4003-8324-191104eaddef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.repeat(), null);\na.repeat(100);\nassert_1.default.strictEqual(a.repeat(), 100);\na.repeat(null);\nassert_1.default.strictEqual(a.repeat(), null);",
                  "err": {},
                  "uuid": "9a8e61df-0cfd-4b82-a4d2-922d0121a202",
                  "parentUUID": "b3d18160-995b-4003-8324-191104eaddef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.repeat(Infinity);\n}, /`repeat`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.repeat('hi');\n}, /`repeat`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.repeat(true);\n}, /`repeat`/);",
                  "err": {},
                  "uuid": "3c1e7ee3-02a3-4376-a8b4-e393e5cf7057",
                  "parentUUID": "b3d18160-995b-4003-8324-191104eaddef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 60\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('REPEAT:42') > -1);",
                  "err": {},
                  "uuid": "57f8c3fb-88c8-447e-a08e-b169ec0f2b4b",
                  "parentUUID": "b3d18160-995b-4003-8324-191104eaddef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78929ebb-b6b8-47c3-9dad-85fe9637f742",
                "9a8e61df-0cfd-4b82-a4d2-922d0121a202",
                "3c1e7ee3-02a3-4376-a8b4-e393e5cf7057",
                "57f8c3fb-88c8-447e-a08e-b169ec0f2b4b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e80174c9-cf9e-4115-8ca9-cfe182045d2f",
              "title": "interval()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm interval() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.interval(null));\nassert_1.default.deepStrictEqual(a, a.interval(60));",
                  "err": {},
                  "uuid": "a77f03c6-e4a5-4685-b26e-4a095b168a0d",
                  "parentUUID": "e80174c9-cf9e-4115-8ca9-cfe182045d2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm interval() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.interval(), null);\na.interval(30);\nassert_1.default.strictEqual(a.interval(), 30);\na.interval(null);\nassert_1.default.strictEqual(a.interval(), null);",
                  "err": {},
                  "uuid": "e82d4854-a016-40ff-af7d-ea9e3c914cf4",
                  "parentUUID": "e80174c9-cf9e-4115-8ca9-cfe182045d2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm interval() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.interval(Infinity);\n}, /`interval`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.interval('hi');\n}, /`interval`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.interval(true);\n}, /`interval`/);",
                  "err": {},
                  "uuid": "6b787fb1-9b08-4981-9792-33eee526d792",
                  "parentUUID": "e80174c9-cf9e-4115-8ca9-cfe182045d2f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm interval() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 90\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('DURATION:PT1M30S') > -1);",
                  "err": {},
                  "uuid": "928f8ea9-dc19-4d78-94ce-b68527118f73",
                  "parentUUID": "e80174c9-cf9e-4115-8ca9-cfe182045d2f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a77f03c6-e4a5-4685-b26e-4a095b168a0d",
                "e82d4854-a016-40ff-af7d-ea9e3c914cf4",
                "6b787fb1-9b08-4981-9792-33eee526d792",
                "928f8ea9-dc19-4d78-94ce-b68527118f73"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c86c5848-71cb-4d9f-b908-df48bf107c6d",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.attach(null));\nassert_1.default.deepStrictEqual(a, a.attach('https://sebbo.net/beep.aud'));",
                  "err": {},
                  "uuid": "a7b8dec1-02a9-47e4-b098-5d58c3512af1",
                  "parentUUID": "c86c5848-71cb-4d9f-b908-df48bf107c6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t = { uri: 'https://example.com/alarm.aud', mime: 'audio/basic' };\nconst a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.attach(), null);\na.attach(t);\nassert_1.default.deepStrictEqual(a.attach(), t);\na.attach('https://www.example.com/beep.aud');\nassert_1.default.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach({\n    uri: 'https://www.example.com/beep.aud'\n});\nassert_1.default.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach(null);\nassert_1.default.strictEqual(a.attach(), null);",
                  "err": {},
                  "uuid": "5722dfa1-e72e-4838-9e02-ef9fbd5c617a",
                  "parentUUID": "c86c5848-71cb-4d9f-b908-df48bf107c6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.attach({ mime: 'audio/basic' });\n}, /`attach.uri`/);",
                  "err": {},
                  "uuid": "536ee1d9-ced8-4378-9a3d-0a3d576c72cd",
                  "parentUUID": "c86c5848-71cb-4d9f-b908-df48bf107c6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.attach(Infinity);\n}, /`attach`/);",
                  "err": {},
                  "uuid": "02f39ccb-572b-4ece-8c73-561d75ef65d6",
                  "parentUUID": "c86c5848-71cb-4d9f-b908-df48bf107c6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.audio,\n    trigger: 300\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:Basso') > -1);\na.attach('https://example.com/beep.aud');\nassert_1.default.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud') > -1);\na.attach({\n    uri: 'https://example.com/beep.aud',\n    mime: 'audio/basic'\n});\nassert_1.default.ok(a.toString().indexOf('\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud') > -1);",
                  "err": {},
                  "uuid": "7f43bd47-cbd2-4cf9-811d-b444f9759feb",
                  "parentUUID": "c86c5848-71cb-4d9f-b908-df48bf107c6d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7b8dec1-02a9-47e4-b098-5d58c3512af1",
                "5722dfa1-e72e-4838-9e02-ef9fbd5c617a",
                "536ee1d9-ced8-4378-9a3d-0a3d576c72cd",
                "02f39ccb-572b-4ece-8c73-561d75ef65d6",
                "7f43bd47-cbd2-4cf9-811d-b444f9759feb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8253a66c-c548-4f07-9601-4bda19d5bdde",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.description(null));\nassert_1.default.deepStrictEqual(a, a.description('Hey Ho!'));",
                  "err": {},
                  "uuid": "53383c49-278d-4fab-b37b-480cbce2f064",
                  "parentUUID": "8253a66c-c548-4f07-9601-4bda19d5bdde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a.description(), null);\na.description('blablabla');\nassert_1.default.deepStrictEqual(a.description(), 'blablabla');\na.description(null);\nassert_1.default.deepStrictEqual(a.description(), null);",
                  "err": {},
                  "uuid": "7f1bd8ae-dcb0-41fe-b615-e12330d456f8",
                  "parentUUID": "8253a66c-c548-4f07-9601-4bda19d5bdde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    description: 'Huibuh!'\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Huibuh') > -1);",
                  "err": {},
                  "uuid": "3ebd53ea-b60f-49a7-808c-d43e965a381c",
                  "parentUUID": "8253a66c-c548-4f07-9601-4bda19d5bdde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300\n}, new event_1.default({\n    summary: 'Example Event'\n}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Example Event') > -1);",
                  "err": {},
                  "uuid": "7fa8b59b-7bf3-4a8e-83ce-63c2cca7d74b",
                  "parentUUID": "8253a66c-c548-4f07-9601-4bda19d5bdde",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53383c49-278d-4fab-b37b-480cbce2f064",
                "7f1bd8ae-dcb0-41fe-b615-e12330d456f8",
                "3ebd53ea-b60f-49a7-808c-d43e965a381c",
                "7fa8b59b-7bf3-4a8e-83ce-63c2cca7d74b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca0be92e-455a-4fe7-8949-95be9def0c47",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "246c5183-a747-4f8a-b899-9f1c219abb2d",
                  "parentUUID": "ca0be92e-455a-4fe7-8949-95be9def0c47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "246c5183-a747-4f8a-b899-9f1c219abb2d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "10a108dd-90a1-4b49-b840-cf79247e8622",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({}, new event_1.default({}, new calendar_1.default()));\na.type(alarm_1.ICalAlarmType.display);\na.trigger(120);\nassert_1.default.deepStrictEqual(a.toJSON(), {\n    attach: null,\n    description: null,\n    interval: null,\n    repeat: null,\n    trigger: 120,\n    type: 'display',\n    x: []\n});",
                  "err": {},
                  "uuid": "ce428a88-1046-4260-b223-2af625f27177",
                  "parentUUID": "10a108dd-90a1-4b49-b840-cf79247e8622",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce428a88-1046-4260-b223-2af625f27177"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "15584009-cba1-4cc9-8669-849cb430c7d0",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without type",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({ trigger: 300 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /`type`/);",
                  "err": {},
                  "uuid": "910fc675-3e9c-4267-9348-6ce55917998d",
                  "parentUUID": "15584009-cba1-4cc9-8669-849cb430c7d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without trigger",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without trigger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "b397a55b-e995-43eb-8fe4-37515033a607",
                  "parentUUID": "15584009-cba1-4cc9-8669-849cb430c7d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({ type: alarm_1.ICalAlarmType.display, trigger: 300, repeat: 4 }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /for `interval`/);",
                  "err": {},
                  "uuid": "9a78f9fe-80a4-4bf2-a20a-4cce424586f3",
                  "parentUUID": "15584009-cba1-4cc9-8669-849cb430c7d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new alarm_1.default({\n    type: alarm_1.ICalAlarmType.display,\n    trigger: 300,\n    interval: 60\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /for `repeat`/);",
                  "err": {},
                  "uuid": "20e3d336-66ec-48fb-87bb-45fb3161869e",
                  "parentUUID": "15584009-cba1-4cc9-8669-849cb430c7d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "910fc675-3e9c-4267-9348-6ce55917998d",
                "b397a55b-e995-43eb-8fe4-37515033a607",
                "9a78f9fe-80a4-4bf2-a20a-4cce424586f3",
                "20e3d336-66ec-48fb-87bb-45fb3161869e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0b0df2a3-6921-482f-841e-e307fac921f1",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "aea946d6-2bfc-46ae-93d6-17b0e0796caf",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    // @ts-ignore\n    new attendee_1.default({ email: 'foo@bar.com' });\n}, /`event`/);",
                  "err": {},
                  "uuid": "19453301-87f4-4042-beb8-142da1eb98cd",
                  "parentUUID": "aea946d6-2bfc-46ae-93d6-17b0e0796caf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19453301-87f4-4042-beb8-142da1eb98cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "46ecd22e-952d-492f-bf1a-f2ee8e984bac",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.name(), null);\na.name('Sebastian');\nassert_1.default.strictEqual(a.name(), 'Sebastian');",
                  "err": {},
                  "uuid": "7bd949b8-404a-4a57-8869-cd85b253de7f",
                  "parentUUID": "46ecd22e-952d-492f-bf1a-f2ee8e984bac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.name(null));\nassert_1.default.deepStrictEqual(a, a.name('Sebastian'));",
                  "err": {},
                  "uuid": "eb5a40bd-4150-4dff-a33b-8d890802e367",
                  "parentUUID": "46ecd22e-952d-492f-bf1a-f2ee8e984bac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\na.name('Sebastian');\nassert_1.default.strictEqual(a.name(), 'Sebastian');\na.name(null);\nassert_1.default.strictEqual(a.name(), null);",
                  "err": {},
                  "uuid": "b7191eca-32bf-4110-a0d1-7ba82185566e",
                  "parentUUID": "46ecd22e-952d-492f-bf1a-f2ee8e984bac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bd949b8-404a-4a57-8869-cd85b253de7f",
                "eb5a40bd-4150-4dff-a33b-8d890802e367",
                "b7191eca-32bf-4110-a0d1-7ba82185566e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c0cce53a-4be3-4821-9ed3-fb96a2076f24",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default())).email('foo@example.com');\nassert_1.default.strictEqual(a.email(), 'foo@example.com');",
                  "err": {},
                  "uuid": "b64e1bde-a99c-403b-ac5f-edb36c37e937",
                  "parentUUID": "c0cce53a-4be3-4821-9ed3-fb96a2076f24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.email('foo@example.com'));",
                  "err": {},
                  "uuid": "19dc4d9f-4960-4f5d-bf7d-9ec20e3b4a36",
                  "parentUUID": "c0cce53a-4be3-4821-9ed3-fb96a2076f24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('mail@example.com') > -1);",
                  "err": {},
                  "uuid": "cc6f7a2d-260d-4500-9b03-0d18a31a33fa",
                  "parentUUID": "c0cce53a-4be3-4821-9ed3-fb96a2076f24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b64e1bde-a99c-403b-ac5f-edb36c37e937",
                "19dc4d9f-4960-4f5d-bf7d-9ec20e3b4a36",
                "cc6f7a2d-260d-4500-9b03-0d18a31a33fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2c3afd2b-9969-4286-a9ac-76d1104fbe57",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.mailto(), null);\na.mailto('foo@example.com');\nassert_1.default.strictEqual(a.mailto(), 'foo@example.com');",
                  "err": {},
                  "uuid": "6823869b-1b05-45b2-a3eb-bf79e88d453c",
                  "parentUUID": "2c3afd2b-9969-4286-a9ac-76d1104fbe57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.mailto(null));\nassert_1.default.deepStrictEqual(a, a.mailto('foo@example.com'));",
                  "err": {},
                  "uuid": "f66c7e7d-de93-43d9-9698-811439817bb7",
                  "parentUUID": "2c3afd2b-9969-4286-a9ac-76d1104fbe57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com' }, new event_1.default({}, new calendar_1.default()));\na.mailto('mail2@example2.com');\nassert_1.default.ok(a.toString().indexOf('EMAIL=mail@example.com') > -1 &&\n    a.toString().indexOf('MAILTO:mail2@example2.com') > -1);",
                  "err": {},
                  "uuid": "273bcf9c-ca23-4f7f-a6dc-e680e2881523",
                  "parentUUID": "2c3afd2b-9969-4286-a9ac-76d1104fbe57",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6823869b-1b05-45b2-a3eb-bf79e88d453c",
                "f66c7e7d-de93-43d9-9698-811439817bb7",
                "273bcf9c-ca23-4f7f-a6dc-e680e2881523"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d03358a7-69c2-4e93-9dfd-f41a9b396721",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.role(attendee_1.ICalAttendeeRole.REQ));",
                  "err": {},
                  "uuid": "1dad8d79-930d-4be7-9cdc-b7522c1724cd",
                  "parentUUID": "d03358a7-69c2-4e93-9dfd-f41a9b396721",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default())).role(attendee_1.ICalAttendeeRole.REQ);\nassert_1.default.strictEqual(a.role(), 'REQ-PARTICIPANT');",
                  "err": {},
                  "uuid": "3ea11d16-a109-4136-8ccd-f25018039bf6",
                  "parentUUID": "d03358a7-69c2-4e93-9dfd-f41a9b396721",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.role('');\n}, /Input must be one of the following: CHAIR, REQ-PARTICIPANT, OPT-PARTICIPANT, NON-PARTICIPANT/);",
                  "err": {},
                  "uuid": "f656f7e6-209e-461c-bc9f-d2e698fc6762",
                  "parentUUID": "d03358a7-69c2-4e93-9dfd-f41a9b396721",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.role('COOKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "c63595a4-07c8-4cce-b27e-a09e114cd334",
                  "parentUUID": "d03358a7-69c2-4e93-9dfd-f41a9b396721",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mail@example.com',\n    role: attendee_1.ICalAttendeeRole.NON\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('NON-PARTICIPANT') > -1);",
                  "err": {},
                  "uuid": "6b04b4f8-dbe7-4a3b-9835-040c503e8e98",
                  "parentUUID": "d03358a7-69c2-4e93-9dfd-f41a9b396721",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1dad8d79-930d-4be7-9cdc-b7522c1724cd",
                "3ea11d16-a109-4136-8ccd-f25018039bf6",
                "f656f7e6-209e-461c-bc9f-d2e698fc6762",
                "c63595a4-07c8-4cce-b27e-a09e114cd334",
                "6b04b4f8-dbe7-4a3b-9835-040c503e8e98"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "08107998-d445-41c7-95fa-e3984b108690",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.rsvp(null));\nassert_1.default.deepStrictEqual(a, a.rsvp(true));",
                  "err": {},
                  "uuid": "579f3af9-7d7b-43a6-ab3b-350fdd13ad2c",
                  "parentUUID": "08107998-d445-41c7-95fa-e3984b108690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\na.rsvp(true);\nassert_1.default.strictEqual(a.rsvp(), true);\na.rsvp(false);\nassert_1.default.strictEqual(a.rsvp(), false);",
                  "err": {},
                  "uuid": "12085b3f-c0f2-44a6-8c0b-1c996c08993e",
                  "parentUUID": "08107998-d445-41c7-95fa-e3984b108690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.rsvp(), null);\na.rsvp(false);\nassert_1.default.strictEqual(a.rsvp(), false);\na.rsvp(null);\nassert_1.default.strictEqual(a.rsvp(), null);",
                  "err": {},
                  "uuid": "67206b5f-0297-41d8-83d6-f36697fd0387",
                  "parentUUID": "08107998-d445-41c7-95fa-e3984b108690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com', rsvp: true }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf(';RSVP=TRUE') > -1);",
                  "err": {},
                  "uuid": "05a2f162-443c-4d62-b91c-f20b8b6a15b2",
                  "parentUUID": "08107998-d445-41c7-95fa-e3984b108690",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "579f3af9-7d7b-43a6-ab3b-350fdd13ad2c",
                "12085b3f-c0f2-44a6-8c0b-1c996c08993e",
                "67206b5f-0297-41d8-83d6-f36697fd0387",
                "05a2f162-443c-4d62-b91c-f20b8b6a15b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "00e15ce6-e037-48e3-9ffd-d7704e931b80",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.status(null));\nassert_1.default.deepStrictEqual(a, a.status(attendee_1.ICalAttendeeStatus.ACCEPTED));",
                  "err": {},
                  "uuid": "90c18e0c-360d-4642-8147-c649ea3d64ca",
                  "parentUUID": "00e15ce6-e037-48e3-9ffd-d7704e931b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.status(), null);\na.status(attendee_1.ICalAttendeeStatus.ACCEPTED);\nassert_1.default.strictEqual(a.status(), 'ACCEPTED');\na.status(null);\nassert_1.default.strictEqual(a.status(), null);",
                  "err": {},
                  "uuid": "cc57f322-5cf1-45f9-8b4c-034c664aaf1f",
                  "parentUUID": "00e15ce6-e037-48e3-9ffd-d7704e931b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.status('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "083ea442-53f6-460e-913d-8cc46dbc9db4",
                  "parentUUID": "00e15ce6-e037-48e3-9ffd-d7704e931b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com', status: attendee_1.ICalAttendeeStatus.DECLINED }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('DECLINED') > -1);",
                  "err": {},
                  "uuid": "6bedb844-f0bb-4681-b724-d63da0afbf1a",
                  "parentUUID": "00e15ce6-e037-48e3-9ffd-d7704e931b80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com', status: attendee_1.ICalAttendeeStatus.NEEDSACTION }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('NEEDS-ACTION') > -1);",
                  "err": {},
                  "uuid": "bbadf049-b315-4b80-967f-cfe480bf2a6d",
                  "parentUUID": "00e15ce6-e037-48e3-9ffd-d7704e931b80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90c18e0c-360d-4642-8147-c649ea3d64ca",
                "cc57f322-5cf1-45f9-8b4c-034c664aaf1f",
                "083ea442-53f6-460e-913d-8cc46dbc9db4",
                "6bedb844-f0bb-4681-b724-d63da0afbf1a",
                "bbadf049-b315-4b80-967f-cfe480bf2a6d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e25ecfe4-9e74-43d6-a964-0f52bccf737e",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a.type(null), a);\nassert_1.default.deepStrictEqual(a.type(attendee_1.ICalAttendeeType.INDIVIDUAL), a);",
                  "err": {},
                  "uuid": "053adbf1-85f2-4803-8073-1a5759d384f5",
                  "parentUUID": "e25ecfe4-9e74-43d6-a964-0f52bccf737e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.type(), null);\na.type(attendee_1.ICalAttendeeType.ROOM);\nassert_1.default.strictEqual(a.type(), 'ROOM');\na.type(null);\nassert_1.default.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "2c97dc65-2978-4592-b63f-bece02c85c32",
                  "parentUUID": "e25ecfe4-9e74-43d6-a964-0f52bccf737e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    // @ts-ignore\n    a.type('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "a9227424-252d-4c13-8b56-d4eacea4ea03",
                  "parentUUID": "e25ecfe4-9e74-43d6-a964-0f52bccf737e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mailing-list@example.com',\n    type: attendee_1.ICalAttendeeType.GROUP\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('GROUP') > -1);",
                  "err": {},
                  "uuid": "26928797-8120-4816-94c8-04623a7076e5",
                  "parentUUID": "e25ecfe4-9e74-43d6-a964-0f52bccf737e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "053adbf1-85f2-4803-8073-1a5759d384f5",
                "2c97dc65-2978-4592-b63f-bece02c85c32",
                "a9227424-252d-4c13-8b56-d4eacea4ea03",
                "26928797-8120-4816-94c8-04623a7076e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3fb247de-d754-4a8c-995d-4021c1d7b421",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.delegatedTo(null));\nassert_1.default.deepStrictEqual(a, a.delegatedTo('foo@example.com'));",
                  "err": {},
                  "uuid": "cac3f038-6c01-49b9-8eda-5f8020caf012",
                  "parentUUID": "3fb247de-d754-4a8c-995d-4021c1d7b421",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.delegatedTo(), null);\na.delegatedTo('foo@example.com');\nconst result = a.delegatedTo();\nassert_1.default.ok(result);\nassert_1.default.strictEqual(result.email(), 'foo@example.com');\na.delegatedTo(null);\nassert_1.default.strictEqual(a.delegatedTo(), null);",
                  "err": {},
                  "uuid": "c0b7aaac-7bca-47f4-afc0-9b5a132a772d",
                  "parentUUID": "3fb247de-d754-4a8c-995d-4021c1d7b421",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({\n    email: 'mail@example.com',\n    delegatedTo: 'foo@example.com'\n}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('foo@example') > -1);",
                  "err": {},
                  "uuid": "fe4f0375-2a68-477d-81e8-e1c2f9d86c0d",
                  "parentUUID": "3fb247de-d754-4a8c-995d-4021c1d7b421",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cac3f038-6c01-49b9-8eda-5f8020caf012",
                "c0b7aaac-7bca-47f4-afc0-9b5a132a772d",
                "fe4f0375-2a68-477d-81e8-e1c2f9d86c0d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "45f1c88d-c9ee-40d7-91ba-a03ae7b569c1",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.deepStrictEqual(a, a.delegatedFrom(null));\nassert_1.default.deepStrictEqual(a, a.delegatedFrom('foo@example.com'));",
                  "err": {},
                  "uuid": "3269c412-674c-4795-9f1a-c8af47f474f6",
                  "parentUUID": "45f1c88d-c9ee-40d7-91ba-a03ae7b569c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.strictEqual(a.delegatedFrom(), null);\na.delegatedFrom('foo@example.com');\nconst result = a.delegatedFrom();\nassert_1.default.ok(result);\nassert_1.default.strictEqual(result.email(), 'foo@example.com');\na.delegatedFrom(null);\nassert_1.default.strictEqual(a.delegatedFrom(), null);",
                  "err": {},
                  "uuid": "a227bb7c-fad6-4d2f-99df-4fba39b94b09",
                  "parentUUID": "45f1c88d-c9ee-40d7-91ba-a03ae7b569c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ email: 'mail@example.com', delegatedFrom: 'foo@example.com' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.toString().indexOf('foo@example.com') > -1);",
                  "err": {},
                  "uuid": "4dd4791b-451f-4b74-b742-d64d2f860300",
                  "parentUUID": "45f1c88d-c9ee-40d7-91ba-a03ae7b569c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3269c412-674c-4795-9f1a-c8af47f474f6",
                "a227bb7c-fad6-4d2f-99df-4fba39b94b09",
                "4dd4791b-451f-4b74-b742-d64d2f860300"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c8e4148a-d6f2-4cb5-bcb7-e00fa8f71438",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.delegatesTo({}) instanceof attendee_1.default);",
                  "err": {},
                  "uuid": "71d91bd9-fb64-4664-a8c6-f539dfa8c3de",
                  "parentUUID": "c8e4148a-d6f2-4cb5-bcb7-e00fa8f71438",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = new attendee_1.default({ name: 'Muh' }, event);\nassert_1.default.deepStrictEqual(new attendee_1.default({}, event).delegatesTo(attendee), attendee);",
                  "err": {},
                  "uuid": "6c4bf39b-d70e-4932-bf5a-cc463a7e47e1",
                  "parentUUID": "c8e4148a-d6f2-4cb5-bcb7-e00fa8f71438",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee = new attendee_1.default({ name: 'Zac' }, new event_1.default({}, new calendar_1.default()))\n    .delegatesTo({ name: 'Cody' });\nassert_1.default.strictEqual(attendee.name(), 'Cody');",
                  "err": {},
                  "uuid": "d02aada1-d8d7-4ce5-a902-1e506ec595dc",
                  "parentUUID": "c8e4148a-d6f2-4cb5-bcb7-e00fa8f71438",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "71d91bd9-fb64-4664-a8c6-f539dfa8c3de",
                "6c4bf39b-d70e-4932-bf5a-cc463a7e47e1",
                "d02aada1-d8d7-4ce5-a902-1e506ec595dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d5d1a15-e654-4c40-986f-3ba9dcaf6f7c",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\nassert_1.default.ok(a.delegatesFrom({}) instanceof attendee_1.default);",
                  "err": {},
                  "uuid": "db47dd7c-8f13-492d-b3df-0276dd106943",
                  "parentUUID": "0d5d1a15-e654-4c40-986f-3ba9dcaf6f7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = new attendee_1.default({ name: 'Muh' }, event);\nassert_1.default.deepStrictEqual(new attendee_1.default({}, event).delegatesFrom(attendee), attendee);",
                  "err": {},
                  "uuid": "430f95e3-4c39-4fea-889e-ee824463f9b6",
                  "parentUUID": "0d5d1a15-e654-4c40-986f-3ba9dcaf6f7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ name: 'Zac' }, new event_1.default({}, new calendar_1.default())).delegatesFrom({ name: 'Cody' });\nassert_1.default.strictEqual(a.name(), 'Cody');",
                  "err": {},
                  "uuid": "8070bb9f-f3c7-4998-9e99-d1ce4e58f094",
                  "parentUUID": "0d5d1a15-e654-4c40-986f-3ba9dcaf6f7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db47dd7c-8f13-492d-b3df-0276dd106943",
                "430f95e3-4c39-4fea-889e-ee824463f9b6",
                "8070bb9f-f3c7-4998-9e99-d1ce4e58f094"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f05bc929-54c1-441d-9c9b-73ccbafa0cf8",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({}, new event_1.default({}, new calendar_1.default()));\na.name('Max Mustermann');\na.delegatesTo('Moritz <moritz@example.com>');\nassert_1.default.deepStrictEqual(a.toJSON(), {\n    delegatedFrom: null,\n    delegatedTo: 'moritz@example.com',\n    email: null,\n    mailto: null,\n    name: 'Max Mustermann',\n    role: 'REQ-PARTICIPANT',\n    rsvp: null,\n    status: 'DELEGATED',\n    type: null\n});",
                  "err": {},
                  "uuid": "28c4c38a-9e4b-487e-bcbd-63d1e005c4b7",
                  "parentUUID": "f05bc929-54c1-441d-9c9b-73ccbafa0cf8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28c4c38a-9e4b-487e-bcbd-63d1e005c4b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bbab9921-87d1-4a0b-ac90-8a7f598c7fe4",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee generate() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new attendee_1.default({ name: 'Testuser' }, new event_1.default({}, new calendar_1.default()));\nassert_1.default.throws(function () {\n    a.toString();\n}, /`email`/);",
                  "err": {},
                  "uuid": "01c1ef64-947d-4138-9ef7-27c14d705877",
                  "parentUUID": "bbab9921-87d1-4a0b-ac90-8a7f598c7fe4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01c1ef64-947d-4138-9ef7-27c14d705877"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "df12e449-34e8-44b6-aa14-c766de3a39d2",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4ca6891a-7e98-4569-8425-e4b77cd6e131",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default({ name: 'hello-world' });\nassert_1.default.strictEqual(cal.name(), 'hello-world');",
                  "err": {},
                  "uuid": "0d8b5092-e2bb-4f3e-801c-54cd87c97a40",
                  "parentUUID": "4ca6891a-7e98-4569-8425-e4b77cd6e131",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d8b5092-e2bb-4f3e-801c-54cd87c97a40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "10dc4e7f-d071-44ee-b464-a9e091643f83",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.prodId('//loremipsum.de//ical-tests//EN');\nassert_1.default.strictEqual(cal.prodId(), '//loremipsum.de//ical-tests//EN');",
                  "err": {},
                  "uuid": "c0aba3bf-8861-423b-883c-024a5ebe702d",
                  "parentUUID": "10dc4e7f-d071-44ee-b464-a9e091643f83",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.prodId('//loremipsum.de//ical-tests//EN'));",
                  "err": {},
                  "uuid": "9d6e285e-f5e8-4482-a6f2-9a17dd5e29c4",
                  "parentUUID": "10dc4e7f-d071-44ee-b464-a9e091643f83",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformed",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when string misformed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    cal.prodId('enemenemuh!');\n}, /`prodid`/);",
                  "err": {},
                  "uuid": "64be0700-c21d-4b4b-9da7-5ac9fdd42b2b",
                  "parentUUID": "10dc4e7f-d071-44ee-b464-a9e091643f83",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    cal.prodId(256);\n}, /`prodid`/);",
                  "err": {},
                  "uuid": "598b1f40-51d8-4ce3-b430-65d4ff25b970",
                  "parentUUID": "10dc4e7f-d071-44ee-b464-a9e091643f83",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        product: 'ical-tests'\n    });\n}, /`prodid\\.company`/);",
                  "err": {},
                  "uuid": "fd18f844-7282-48ee-aa62-58089071e0d3",
                  "parentUUID": "10dc4e7f-d071-44ee-b464-a9e091643f83",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        company: 'sebbo.net'\n    });\n}, /`prodid\\.product`/);",
                  "err": {},
                  "uuid": "a28ea613-7a4e-46ba-988f-c3dd81fb46da",
                  "parentUUID": "10dc4e7f-d071-44ee-b464-a9e091643f83",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests'\n});\nassert_1.default.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//EN');",
                  "err": {},
                  "uuid": "2de3203f-02c3-4315-aac3-58242225df69",
                  "parentUUID": "10dc4e7f-d071-44ee-b464-a9e091643f83",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests',\n    language: 'DE'\n});\nassert_1.default.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//DE');",
                  "err": {},
                  "uuid": "966e2d74-c33f-4e24-8458-197b49c6a6f0",
                  "parentUUID": "10dc4e7f-d071-44ee-b464-a9e091643f83",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0aba3bf-8861-423b-883c-024a5ebe702d",
                "9d6e285e-f5e8-4482-a6f2-9a17dd5e29c4",
                "64be0700-c21d-4b4b-9da7-5ac9fdd42b2b",
                "598b1f40-51d8-4ce3-b430-65d4ff25b970",
                "fd18f844-7282-48ee-aa62-58089071e0d3",
                "a28ea613-7a4e-46ba-988f-c3dd81fb46da",
                "2de3203f-02c3-4315-aac3-58242225df69",
                "966e2d74-c33f-4e24-8458-197b49c6a6f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b8f0379-82c7-4f1c-af5b-1b657787fd56",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default();\nassert_1.default.deepStrictEqual(c, c.method(null), 'method(null)');\nassert_1.default.deepStrictEqual(c, c.method(calendar_1.ICalCalendarMethod.PUBLISH), 'method(enum)');",
                  "err": {},
                  "uuid": "4a148911-0fb1-47d2-9683-26d47834f43a",
                  "parentUUID": "2b8f0379-82c7-4f1c-af5b-1b657787fd56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default();\nassert_1.default.strictEqual(c.method(), null);\nc.method(null);\nassert_1.default.strictEqual(c.method(), null);\nc.method(calendar_1.ICalCalendarMethod.PUBLISH);\nassert_1.default.strictEqual(c.method(), 'PUBLISH');\nc.method(null);\nassert_1.default.strictEqual(c.method(), null);",
                  "err": {},
                  "uuid": "5db667d0-2065-4308-b7da-4b94b9a27ecf",
                  "parentUUID": "2b8f0379-82c7-4f1c-af5b-1b657787fd56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default();\nassert_1.default.throws(function () {\n    // @ts-ignore\n    c.method('KICK ASS');\n}, /Input must be one of the following: PUBLISH, REQUEST, REPLY, ADD, CANCEL, REFRESH, COUNTER, DECLINECOUNTER/);",
                  "err": {},
                  "uuid": "5922d2f2-e677-4384-83f2-213de1c9639a",
                  "parentUUID": "2b8f0379-82c7-4f1c-af5b-1b657787fd56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new calendar_1.default({ method: calendar_1.ICalCalendarMethod.PUBLISH });\nassert_1.default.strictEqual(c.method(), 'PUBLISH');\nc.method(calendar_1.ICalCalendarMethod.ADD);\nassert_1.default.strictEqual(c.method(), 'ADD');",
                  "err": {},
                  "uuid": "d15d84f8-958a-43c7-a7cd-a6dc571a9967",
                  "parentUUID": "2b8f0379-82c7-4f1c-af5b-1b657787fd56",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a148911-0fb1-47d2-9683-26d47834f43a",
                "5db667d0-2065-4308-b7da-4b94b9a27ecf",
                "5922d2f2-e677-4384-83f2-213de1c9639a",
                "d15d84f8-958a-43c7-a7cd-a6dc571a9967"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "08da61c7-e179-44a4-8865-04065bd83dbd",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.name(null));\nassert_1.default.deepStrictEqual(cal, cal.name('Testevents'));",
                  "err": {},
                  "uuid": "02185327-88a7-4fa6-9d72-24faa302f05a",
                  "parentUUID": "08da61c7-e179-44a4-8865-04065bd83dbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.name(), null);\ncal.name('Testevents');\nassert_1.default.strictEqual(cal.name(), 'Testevents');\ncal.name(null);\nassert_1.default.strictEqual(cal.name(), null);",
                  "err": {},
                  "uuid": "42671224-66f7-4ce5-892f-58617dc97b7e",
                  "parentUUID": "08da61c7-e179-44a4-8865-04065bd83dbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().name('Testevents');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert_1.default.strictEqual(cal.name(), 'Testevents');",
                  "err": {},
                  "uuid": "d28f2f31-3306-44c8-aea3-4f2fa3c78c33",
                  "parentUUID": "08da61c7-e179-44a4-8865-04065bd83dbd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02185327-88a7-4fa6-9d72-24faa302f05a",
                "42671224-66f7-4ce5-892f-58617dc97b7e",
                "d28f2f31-3306-44c8-aea3-4f2fa3c78c33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d78c9ae0-6b85-4aa7-9ef4-d7591a6b0c46",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.description(null));\nassert_1.default.deepStrictEqual(cal, cal.description('Testbeschreibung'));",
                  "err": {},
                  "uuid": "47adf846-cc87-4927-bd45-cd563f209cdf",
                  "parentUUID": "d78c9ae0-6b85-4aa7-9ef4-d7591a6b0c46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.description(), null);\ncal.description('Testbeschreibung');\nassert_1.default.strictEqual(cal.description(), 'Testbeschreibung');\ncal.description(null);\nassert_1.default.strictEqual(cal.description(), null);",
                  "err": {},
                  "uuid": "68bb386c-dbf7-4ba3-8a81-ca9c772e5ea6",
                  "parentUUID": "d78c9ae0-6b85-4aa7-9ef4-d7591a6b0c46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().description('Testbeschreibung');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.description(), 'Testbeschreibung');",
                  "err": {},
                  "uuid": "b8cc28eb-da31-4a8f-bf62-985f097cdce7",
                  "parentUUID": "d78c9ae0-6b85-4aa7-9ef4-d7591a6b0c46",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47adf846-cc87-4927-bd45-cd563f209cdf",
                "68bb386c-dbf7-4ba3-8a81-ca9c772e5ea6",
                "b8cc28eb-da31-4a8f-bf62-985f097cdce7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b08eb407-a971-4059-8c1e-9adc1bdf37f2",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.timezone('Europe/Berlin'));",
                  "err": {},
                  "uuid": "8cebaffc-a764-436e-bfd1-5c8c8763842a",
                  "parentUUID": "b08eb407-a971-4059-8c1e-9adc1bdf37f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().timezone('Europe/Berlin');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert_1.default.strictEqual(cal.timezone(), null);",
                  "err": {},
                  "uuid": "caf29d4b-ffd7-4110-8649-db98ffa2b245",
                  "parentUUID": "b08eb407-a971-4059-8c1e-9adc1bdf37f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should make a difference to iCal output",
                  "fullTitle": "ical-generator Calendar timezone() should make a difference to iCal output",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().timezone('Europe/London');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.strictEqual(cal.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "f4dfe42e-e5fc-4973-a9e3-152dd75addda",
                  "parentUUID": "b08eb407-a971-4059-8c1e-9adc1bdf37f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8cebaffc-a764-436e-bfd1-5c8c8763842a",
                "caf29d4b-ffd7-4110-8649-db98ffa2b245",
                "f4dfe42e-e5fc-4973-a9e3-152dd75addda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6c11673d-9854-4f9e-ba11-056037cd02e6",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal.ttl(60 * 60 * 24), cal);\nassert_1.default.deepStrictEqual(cal.ttl(moment_1.default.duration(2, 'days')), cal);\nassert_1.default.deepStrictEqual(cal.ttl(null), cal);",
                  "err": {},
                  "uuid": "c104d66d-c6f3-40d0-aefd-e022e1d0aaeb",
                  "parentUUID": "6c11673d-9854-4f9e-ba11-056037cd02e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.ttl(), null);\ncal.ttl(86400);\nassert_1.default.strictEqual((_a = cal.ttl()) === null || _a === void 0 ? void 0 : _a.as('seconds'), 86400);",
                  "err": {},
                  "uuid": "da012c1f-22db-4cbb-80a2-d49effed0633",
                  "parentUUID": "6c11673d-9854-4f9e-ba11-056037cd02e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst cal = new calendar_1.default().ttl(86400);\nassert_1.default.strictEqual((_a = cal.ttl()) === null || _a === void 0 ? void 0 : _a.as('seconds'), 86400);",
                  "err": {},
                  "uuid": "3561187e-9ddc-40e5-9119-144671d033aa",
                  "parentUUID": "6c11673d-9854-4f9e-ba11-056037cd02e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c104d66d-c6f3-40d0-aefd-e022e1d0aaeb",
                "da012c1f-22db-4cbb-80a2-d49effed0633",
                "3561187e-9ddc-40e5-9119-144671d033aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "75f0a5b0-0c9a-442c-b0dc-3c049480d52c",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.url('https://example.com/calendar.ical'));",
                  "err": {},
                  "uuid": "3a58525b-d0d0-4f1d-a538-b0a77902f84a",
                  "parentUUID": "75f0a5b0-0c9a-442c-b0dc-3c049480d52c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.url(), null);\ncal.url('https://example.com/calendar.ical');\nassert_1.default.strictEqual(cal.url(), 'https://example.com/calendar.ical');\ncal.url(null);\nassert_1.default.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "8fddf8d3-cf51-4202-aeb6-c211bc6a7042",
                  "parentUUID": "75f0a5b0-0c9a-442c-b0dc-3c049480d52c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().url('https://example.com/calendar.ical');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.url(), 'https://example.com/calendar.ical');",
                  "err": {},
                  "uuid": "81f9fde0-ac8f-4226-9174-aa3ac47f8641",
                  "parentUUID": "75f0a5b0-0c9a-442c-b0dc-3c049480d52c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a58525b-d0d0-4f1d-a538-b0a77902f84a",
                "8fddf8d3-cf51-4202-aeb6-c211bc6a7042",
                "81f9fde0-ac8f-4226-9174-aa3ac47f8641"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2dfff36-3582-4c7f-8366-b31ba0985053",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.scale('gregorian'));",
                  "err": {},
                  "uuid": "5bc1ab53-7fae-4cb2-bca1-01ec5e339b49",
                  "parentUUID": "a2dfff36-3582-4c7f-8366-b31ba0985053",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.scale(), null);\ncal.scale('GREGORIAN');\nassert_1.default.strictEqual(cal.scale(), 'GREGORIAN');\ncal.scale(null);\nassert_1.default.strictEqual(cal.scale(), null);",
                  "err": {},
                  "uuid": "d52e7ee5-845c-47fa-9265-48c4414b7e35",
                  "parentUUID": "a2dfff36-3582-4c7f-8366-b31ba0985053",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().scale('gregorian');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.scale(), 'GREGORIAN');",
                  "err": {},
                  "uuid": "05bd4ef3-01fc-4543-b632-9d09437e79ab",
                  "parentUUID": "a2dfff36-3582-4c7f-8366-b31ba0985053",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5bc1ab53-7fae-4cb2-bca1-01ec5e339b49",
                "d52e7ee5-845c-47fa-9265-48c4414b7e35",
                "05bd4ef3-01fc-4543-b632-9d09437e79ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "075111d6-0d12-4642-a2a3-1a8a5fb5c99b",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.ok(cal.createEvent({}) instanceof event_1.default);",
                  "err": {},
                  "uuid": "fc7592e4-e9cf-4948-a63c-acbd3e2a04eb",
                  "parentUUID": "075111d6-0d12-4642-a2a3-1a8a5fb5c99b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nconst event = cal.createEvent({ summary: 'Patch-Day' });\nassert_1.default.strictEqual(event.summary(), 'Patch-Day');",
                  "err": {},
                  "uuid": "d5de9ff1-81ce-43eb-b834-22648c70ffa5",
                  "parentUUID": "075111d6-0d12-4642-a2a3-1a8a5fb5c99b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.doesNotThrow(function () {\n    new calendar_1.default().createEvent({\n        start: new Date(),\n        summary: 'Patch-Day'\n    });\n}, Error);",
                  "err": {},
                  "uuid": "83f0d7b5-983a-4ea6-aa28-ffd99096240b",
                  "parentUUID": "075111d6-0d12-4642-a2a3-1a8a5fb5c99b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc7592e4-e9cf-4948-a63c-acbd3e2a04eb",
                "d5de9ff1-81ce-43eb-b834-22648c70ffa5",
                "83f0d7b5-983a-4ea6-aa28-ffd99096240b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff4be759-6b5b-4b4c-bddc-1dca3a80d673",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.events().length, 0);\nconst event = cal.createEvent({});\nassert_1.default.strictEqual(cal.events().length, 1);\nassert_1.default.deepStrictEqual(cal.events()[0], event);",
                  "err": {},
                  "uuid": "1899ff85-26df-4b4a-8e5c-0262321e67c8",
                  "parentUUID": "ff4be759-6b5b-4b4c-bddc-1dca3a80d673",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.length(), 0);\nconst cal2 = cal.events([{ summary: 'Event A' }, { summary: 'Event B' }]);\nassert_1.default.strictEqual(cal.length(), 2);\nassert_1.default.deepStrictEqual(cal2, cal);",
                  "err": {},
                  "uuid": "f3f38cd5-4a79-4cb1-8ee8-acc914b3977b",
                  "parentUUID": "ff4be759-6b5b-4b4c-bddc-1dca3a80d673",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1899ff85-26df-4b4a-8e5c-0262321e67c8",
                "f3f38cd5-4a79-4cb1-8ee8-acc914b3977b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47faa9e9-f510-4cec-af91-a5009747b0d1",
              "title": "save()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all public methods and save it",
                  "fullTitle": "ical-generator Calendar save() should return all public methods and save it",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = path_1.join(__dirname, 'save.ical');\nconst cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.save(file, function () {\n    assert_1.default.ok(fs_1.existsSync(file));\n    fs_1.unlinkSync(file);\n    assert_1.default.deepStrictEqual(cal, cal.save(file, function () {\n        assert_1.default.ok(fs_1.existsSync(file));\n        fs_1.unlinkSync(file);\n        done();\n    }));\n}));",
                  "err": {},
                  "uuid": "7069ae6b-bfcb-4a0d-8eee-8a4118772013",
                  "parentUUID": "47faa9e9-f510-4cec-af91-a5009747b0d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be usable with promises",
                  "fullTitle": "ical-generator Calendar save() should be usable with promises",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const file = path_1.join(__dirname, 'save.ical');\n    const cal = new calendar_1.default();\n    yield cal.save(file);\n    assert_1.default.ok(fs_1.existsSync(file));\n    fs_1.unlinkSync(file);\n});",
                  "err": {},
                  "uuid": "c479d4ea-7b95-4433-8771-f8783c77a26d",
                  "parentUUID": "47faa9e9-f510-4cec-af91-a5009747b0d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar save() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = path_1.join(__dirname, 'save.ical');\nconst cal = new calendar_1.default();\ncal.createEvent({});\nassert_1.default.throws(function () {\n    cal.save(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "dd939ed0-422b-4921-8adc-458a0cc77f05",
                  "parentUUID": "47faa9e9-f510-4cec-af91-a5009747b0d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7069ae6b-bfcb-4a0d-8eee-8a4118772013",
                "c479d4ea-7b95-4433-8771-f8783c77a26d",
                "dd939ed0-422b-4921-8adc-458a0cc77f05"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74f6b371-8de1-4556-a1d6-c01c823e74f1",
              "title": "saveSync()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should save it",
                  "fullTitle": "ical-generator Calendar saveSync() should save it",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = path_1.join(__dirname, 'save_sync.ical');\nconst cal = new calendar_1.default();\ncal.saveSync(file);\nassert_1.default.ok(fs_1.existsSync(file));\nfs_1.unlinkSync(file);\ncal.saveSync(file);\nassert_1.default.ok(fs_1.existsSync(file));\nfs_1.unlinkSync(file);",
                  "err": {},
                  "uuid": "eb883a3b-69d2-436c-b4d5-e5282f238c7f",
                  "parentUUID": "74f6b371-8de1-4556-a1d6-c01c823e74f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar saveSync() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = path_1.join(__dirname, 'save_sync.ical');\nconst cal = new calendar_1.default();\ncal.createEvent({});\nassert_1.default.throws(function () {\n    cal.saveSync(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "aec0f78e-9f2a-41bb-b7a9-1231e8f7d66e",
                  "parentUUID": "74f6b371-8de1-4556-a1d6-c01c823e74f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb883a3b-69d2-436c-b4d5-e5282f238c7f",
                "aec0f78e-9f2a-41bb-b7a9-1231e8f7d66e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "567f9b76-8520-45a6-aab0-f26e3f1e225f",
              "title": "serve()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar serve() should work",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = new calendar_1.default();\n    cal.createEvent({\n        start: new Date(),\n        end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n        summary: 'HTTP Calendar Event'\n    });\n    const port = yield portfinder_1.getPortPromise();\n    return new Promise(done => {\n        const server = http.createServer((req, res) => {\n            cal.serve(res);\n        }).listen(port, function () {\n            function request(cb) {\n                // make request\n                const req = http.request({ port }, function (res) {\n                    let file = '';\n                    assert_1.default.strictEqual(res.headers['content-type'], 'text/calendar; charset=utf-8', 'Header: text/calendar; charset=utf-8');\n                    assert_1.default.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"calendar.ics\"', 'Content-Disposition');\n                    res.setEncoding('utf8');\n                    res.on('data', function (chunk) {\n                        file += chunk;\n                    });\n                    res.on('end', function () {\n                        assert_1.default.strictEqual(file, cal.toString());\n                        cb();\n                    });\n                });\n                req.on('error', function (err) {\n                    assert_1.default.fail(err);\n                });\n                req.end();\n            }\n            request(() => {\n                request(() => {\n                    server.close(() => done());\n                });\n            });\n        });\n    });\n});",
                  "err": {},
                  "uuid": "b590588f-69ce-4a18-bc3a-7070db2d6618",
                  "parentUUID": "567f9b76-8520-45a6-aab0-f26e3f1e225f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b590588f-69ce-4a18-bc3a-7070db2d6618"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c19c32e2-6ea0-4a33-a62d-bc4ec1f930d5",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "346e728f-173a-462d-a6c0-1d43b25f8498",
                  "parentUUID": "c19c32e2-6ea0-4a33-a62d-bc4ec1f930d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));\nassert_1.default.deepEqual(cal.x(), [{\n        key: 'X-FOO',\n        value: 'bar'\n    }]);\nassert_1.default.deepStrictEqual(cal, cal.x('X-LOREM', 'ipsum'));\nassert_1.default.deepEqual(cal.x(), [\n    { key: 'X-FOO', value: 'bar' },\n    { key: 'X-LOREM', value: 'ipsum' }\n]);\nassert_1.default.throws(() => {\n    cal.x('LOREM', 'ipsum');\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x('X-LOREM', 1337);\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x(5, 'ipsum');\n});",
                  "err": {},
                  "uuid": "cbfe7789-facf-4cbc-a5ec-1eb3d0cac3d1",
                  "parentUUID": "c19c32e2-6ea0-4a33-a62d-bc4ec1f930d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x([{ key: 'X-FOO', value: 'bar' }]));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert_1.default.deepStrictEqual(cal, cal.x([{ key: 'X-LOREM', value: 'ipsum' }]));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert_1.default.throws(() => {\n    cal.x([{ key: 'LOREM', value: 'ipsum' }]);\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 'X-LOREM', value: 1337 }]);\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 5, value: 'ipsum' }]);\n});",
                  "err": {},
                  "uuid": "56fc60a5-1ba4-418d-b4b3-8d7db921efe0",
                  "parentUUID": "c19c32e2-6ea0-4a33-a62d-bc4ec1f930d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepStrictEqual(cal, cal.x({ 'X-FOO': 'bar' }));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert_1.default.deepStrictEqual(cal, cal.x({ 'X-LOREM': 'ipsum' }));\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert_1.default.throws(() => {\n    cal.x({ 'LOREM': 'ipsum' });\n});\nassert_1.default.throws(() => {\n    // @ts-ignore\n    cal.x({ 'X-LOREM': 1337 });\n});\nassert_1.default.throws(() => {\n    cal.x({ 5: 'ipsum' });\n});",
                  "err": {},
                  "uuid": "82a970c4-5ead-4572-89a7-df72564a4f96",
                  "parentUUID": "c19c32e2-6ea0-4a33-a62d-bc4ec1f930d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.deepEqual(cal.x(), []);\ncal.x('X-FOO', 'BAR');\nassert_1.default.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'BAR' }]);\ncal.x({});\nassert_1.default.deepEqual(cal.x().length, 0);",
                  "err": {},
                  "uuid": "c0ea656f-2e5e-43ac-a8a5-4f39585ab522",
                  "parentUUID": "c19c32e2-6ea0-4a33-a62d-bc4ec1f930d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default().x('X-FOO', 'BAR');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.ok(cal.toString().includes('X-FOO'));",
                  "err": {},
                  "uuid": "21575b83-c5e0-4205-9dbe-3a8872b53b00",
                  "parentUUID": "c19c32e2-6ea0-4a33-a62d-bc4ec1f930d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "346e728f-173a-462d-a6c0-1d43b25f8498",
                "cbfe7789-facf-4cbc-a5ec-1eb3d0cac3d1",
                "56fc60a5-1ba4-418d-b4b3-8d7db921efe0",
                "82a970c4-5ead-4572-89a7-df72564a4f96",
                "c0ea656f-2e5e-43ac-a8a5-4f39585ab522",
                "21575b83-c5e0-4205-9dbe-3a8872b53b00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4475ebf3-99f2-45a4-8fce-e499a1e5ae73",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst cal = new calendar_1.default();\nconst prodId = cal.toJSON().prodId;\nassert_1.default.strictEqual(typeof prodId, 'string');\nassert_1.default.ok(prodId.length > 0);\nassert_1.default.strictEqual((_a = cal.toJSON().events) === null || _a === void 0 ? void 0 : _a.length, 0);",
                  "err": {},
                  "uuid": "8962206a-a1bc-48d9-9f1a-6f6ab8dda91d",
                  "parentUUID": "4475ebf3-99f2-45a4-8fce-e499a1e5ae73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n    summary: 'HTTP Calendar Event',\n    x: [\n        { key: 'X-FOO', value: 'bar' },\n        { key: 'X-LOREM', value: 'ipsum' }\n    ]\n});\nconst prodId = cal.toJSON().prodId;\nassert_1.default.strictEqual(typeof prodId, 'string');\nassert_1.default.ok(prodId.length > 0);\nconst events = cal.toJSON().events;\nassert_1.default.strictEqual(events === null || events === void 0 ? void 0 : events.length, 1);\nassert_1.default.deepEqual(events[0].x, [\n    { 'key': 'X-FOO', 'value': 'bar' },\n    { 'key': 'X-LOREM', 'value': 'ipsum' }\n]);",
                  "err": {},
                  "uuid": "a00c76cd-25e6-4860-8112-dfd81b162bbd",
                  "parentUUID": "4475ebf3-99f2-45a4-8fce-e499a1e5ae73",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8962206a-a1bc-48d9-9f1a-6f6ab8dda91d",
                "a00c76cd-25e6-4860-8112-dfd81b162bbd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b6e3b126-30d1-4037-8c8b-35996abd9a17",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nassert_1.default.strictEqual(cal.length(), 0);\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert_1.default.strictEqual(cal.length(), 1);",
                  "err": {},
                  "uuid": "ad9765db-acee-4107-99db-9aac91be4599",
                  "parentUUID": "b6e3b126-30d1-4037-8c8b-35996abd9a17",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad9765db-acee-4107-99db-9aac91be4599"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2a0cd28c-b231-4737-b06a-3b38d0bc14de",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.url('https://sebbo.net/foo');\nassert_1.default.ok(cal.toString().indexOf('URL:https://sebbo.net/foo') > -1);",
                  "err": {},
                  "uuid": "8449ce09-9456-42fe-b700-4caaeee21c54",
                  "parentUUID": "2a0cd28c-b231-4737-b06a-3b38d0bc14de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.method(calendar_1.ICalCalendarMethod.REFRESH);\nassert_1.default.ok(cal.toString().indexOf('METHOD:REFRESH') > -1);",
                  "err": {},
                  "uuid": "332b321c-0644-47f1-a26d-b5b8191d7c25",
                  "parentUUID": "2a0cd28c-b231-4737-b06a-3b38d0bc14de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.name('TEST');\nassert_1.default.ok(cal.toString().indexOf('NAME:TEST') > -1);\nassert_1.default.ok(cal.toString().indexOf('X-WR-CALNAME:TEST') > -1);",
                  "err": {},
                  "uuid": "cee006ce-cdfa-4509-baf9-a9e6ca227842",
                  "parentUUID": "2a0cd28c-b231-4737-b06a-3b38d0bc14de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.description('TEST');\nassert_1.default.ok(cal.toString().indexOf('X-WR-CALDESC:TEST') > -1);",
                  "err": {},
                  "uuid": "9b44d674-a99c-491c-9e4b-07ab0f0e52f4",
                  "parentUUID": "2a0cd28c-b231-4737-b06a-3b38d0bc14de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.timezone('TEST');\nassert_1.default.ok(cal.toString().indexOf('TIMEZONE-ID:TEST') > -1);\nassert_1.default.ok(cal.toString().indexOf('X-WR-TIMEZONE:TEST') > -1);",
                  "err": {},
                  "uuid": "84859c50-e497-4821-af40-2ac23b48f6d5",
                  "parentUUID": "2a0cd28c-b231-4737-b06a-3b38d0bc14de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\ncal.ttl(moment_1.default.duration(3, 'days'));\nassert_1.default.ok(cal.toString().indexOf('REFRESH-INTERVAL;VALUE=DURATION:P3D') > -1);\nassert_1.default.ok(cal.toString().indexOf('X-PUBLISHED-TTL:P3D') > -1);",
                  "err": {},
                  "uuid": "ea21c6a1-605e-4704-bdb7-b905f614ba0a",
                  "parentUUID": "2a0cd28c-b231-4737-b06a-3b38d0bc14de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8449ce09-9456-42fe-b700-4caaeee21c54",
                "332b321c-0644-47f1-a26d-b5b8191d7c25",
                "cee006ce-cdfa-4509-baf9-a9e6ca227842",
                "9b44d674-a99c-491c-9e4b-07ab0f0e52f4",
                "84859c50-e497-4821-af40-2ac23b48f6d5",
                "ea21c6a1-605e-4704-bdb7-b905f614ba0a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "135ecd52-4cb1-4f6c-af21-10f8df17cbfd",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event'\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_01.ics', 'utf8'));\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "5afb83ac-3b9d-491c-846f-7e31fca73d07",
              "parentUUID": "135ecd52-4cb1-4f6c-af21-10f8df17cbfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: 'localhost',\n        description: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop',\n        htmlDescription: '<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>'\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_02.ics', 'utf8'));\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "dd177e13-3b64-4cc3-80cf-d479b1e96e95",
              "parentUUID": "135ecd52-4cb1-4f6c-af21-10f8df17cbfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({\n        method: calendar_1.ICalCalendarMethod.ADD,\n        prodId: '//sebbo.net//ical-generator.tests//EN'\n    });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        status: event_1.ICalEventStatus.CONFIRMED,\n        categories: [{ name: 'WORK' }],\n        url: 'http://sebbo.net/'\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_03.ics', 'utf8'), 'toString');\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "08b517ea-4cf3-4b58-90d0-8500847c3ffb",
              "parentUUID": "135ecd52-4cb1-4f6c-af21-10f8df17cbfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                exclude: new Date('Fr Oct 06 2013 23:15:00 UTC')\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by day, twice',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.DAILY,\n                count: 2\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by 3 weeks, until 2014',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.WEEKLY,\n                interval: 3,\n                until: new Date('We Jan 01 2014 00:00:00 UTC')\n            }\n        }\n    ]);\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_04.ics', 'utf8'));\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "344849d7-ae92-4772-bcd7-4e4e6c7d5376",
              "parentUUID": "135ecd52-4cb1-4f6c-af21-10f8df17cbfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '1',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'floating',\n        floating: true\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_05.ics', 'utf8'));\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "19a0d8ad-f143-4289-beca-2fadbf542278",
              "parentUUID": "135ecd52-4cb1-4f6c-af21-10f8df17cbfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN', method: calendar_1.ICalCalendarMethod.PUBLISH });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        attendees: [\n            {\n                name: 'Matt',\n                email: 'matt@example.com',\n                delegatesTo: {\n                    name: 'John',\n                    email: 'john@example.com',\n                    status: attendee_1.ICalAttendeeStatus.ACCEPTED\n                }\n            }\n        ],\n        alarms: [\n            {\n                type: alarm_1.ICalAlarmType.display,\n                trigger: 60 * 10,\n                repeat: 2,\n                interval: 60\n            },\n            {\n                type: alarm_1.ICalAlarmType.display,\n                trigger: 60 * 60,\n                description: 'I\\'m a reminder :)'\n            }\n        ],\n        status: event_1.ICalEventStatus.CONFIRMED,\n        url: 'http://sebbo.net/'\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_06.ics', 'utf8'));\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "b7be822c-838f-491b-ad5b-25df5ffb3f32",
              "parentUUID": "135ecd52-4cb1-4f6c-af21-10f8df17cbfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                byMonth: [1, 4, 7, 10]\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on Mo/We/Fr, twice',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.DAILY,\n                count: 2,\n                byDay: [types_1.ICalWeekday.MO, types_1.ICalWeekday.WE, types_1.ICalWeekday.FR]\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on 1st and 15th',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.DAILY,\n                interval: 1,\n                byMonthDay: [1, 15]\n            }\n        }\n    ]);\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_07.ics', 'utf8'));\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "7dfbb356-d7ec-4755-8cad-c8230783b9da",
              "parentUUID": "135ecd52-4cb1-4f6c-af21-10f8df17cbfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event',\n        attendees: [{\n                type: attendee_1.ICalAttendeeType.INDIVIDUAL,\n                role: attendee_1.ICalAttendeeRole.REQ,\n                status: attendee_1.ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_08.ics', 'utf8'));\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "4d8f2e19-5819-44cc-a9d6-c6e933fb82be",
              "parentUUID": "135ecd52-4cb1-4f6c-af21-10f8df17cbfd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = src_1.default({ method: calendar_1.ICalCalendarMethod.REQUEST, prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: {\n            name: 'Sebastian Pekarek',\n            email: 'mail@sebbo.net',\n            mailto: 'mail2@example2.com'\n        },\n        attendees: [{\n                type: attendee_1.ICalAttendeeType.INDIVIDUAL,\n                role: attendee_1.ICalAttendeeRole.REQ,\n                status: attendee_1.ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert_1.default.strictEqual(string, yield fs_1.promises.readFile(__dirname + '/results/generate_09.ics', 'utf8'), 'toString');\n    assert_1.default.strictEqual(src_1.default(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "67e07fe1-4411-44f0-a52b-731df9ea3dc5",
              "parentUUID": "135ecd52-4cb1-4f6c-af21-10f8df17cbfd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5afb83ac-3b9d-491c-846f-7e31fca73d07",
            "dd177e13-3b64-4cc3-80cf-d479b1e96e95",
            "08b517ea-4cf3-4b58-90d0-8500847c3ffb",
            "344849d7-ae92-4772-bcd7-4e4e6c7d5376",
            "19a0d8ad-f143-4289-beca-2fadbf542278",
            "b7be822c-838f-491b-ad5b-25df5ffb3f32",
            "7dfbb356-d7ec-4755-8cad-c8230783b9da",
            "4d8f2e19-5819-44cc-a9d6-c6e933fb82be",
            "67e07fe1-4411-44f0-a52b-731df9ea3dc5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "76bb15a6-cf92-4254-9a98-f63c85e1b4e8",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a4df0af8-a126-45ff-b12d-070228f7f3a2",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new category_1.default({\n    // @ts-ignore\n    unknown: true,\n    name: 'FOO'\n});\nassert_1.default.strictEqual(a.name(), 'FOO');",
                  "err": {},
                  "uuid": "80e1bf99-555f-4191-a4e7-d56ce5a343ac",
                  "parentUUID": "a4df0af8-a126-45ff-b12d-070228f7f3a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80e1bf99-555f-4191-a4e7-d56ce5a343ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b1c6010-7fee-459f-845d-9e63271a9e0d",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({});\nassert_1.default.deepStrictEqual(c, c.name('FOO'));",
                  "err": {},
                  "uuid": "b0d5b2c7-5edf-4f4d-900d-bdeaca2c0738",
                  "parentUUID": "9b1c6010-7fee-459f-845d-9e63271a9e0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({});\nassert_1.default.strictEqual(c.name(), null);\nc.name('HELLO-WORLD');\nassert_1.default.strictEqual(c.name(), 'HELLO-WORLD');",
                  "err": {},
                  "uuid": "9ef159eb-efcd-454a-b8ca-641808fadcaf",
                  "parentUUID": "9b1c6010-7fee-459f-845d-9e63271a9e0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({ name: 'BANANA' });\nassert_1.default.ok(c.toString().indexOf('BANANA') > -1);",
                  "err": {},
                  "uuid": "b7e001c7-a80c-4a64-b15a-fcb0fa3ecae3",
                  "parentUUID": "9b1c6010-7fee-459f-845d-9e63271a9e0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0d5b2c7-5edf-4f4d-900d-bdeaca2c0738",
                "9ef159eb-efcd-454a-b8ca-641808fadcaf",
                "b7e001c7-a80c-4a64-b15a-fcb0fa3ecae3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "32bfda7a-2728-4be6-927c-44284efe48fb",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({ name: 'FOOBAR' });\nassert_1.default.deepStrictEqual(c.toJSON(), { name: 'FOOBAR' });",
                  "err": {},
                  "uuid": "f74fb05e-b824-45fe-9968-aaf244ee5b19",
                  "parentUUID": "32bfda7a-2728-4be6-927c-44284efe48fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f74fb05e-b824-45fe-9968-aaf244ee5b19"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "96660b11-4176-4ee8-82d3-6c90b3a2c308",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category generate() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new category_1.default({});\nassert_1.default.throws(function () {\n    c.toString();\n}, /`name`/);",
                  "err": {},
                  "uuid": "560018ce-648e-4cf8-a864-22feb60a01d7",
                  "parentUUID": "96660b11-4176-4ee8-82d3-6c90b3a2c308",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "560018ce-648e-4cf8-a864-22feb60a01d7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0e96cf4f-b063-435d-af42-0d78df2c90aa",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c80f8a81-a041-48e7-871e-1393321db444",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set _data",
                  "fullTitle": "ical-generator Event constructor() shoud set _data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.ok(event.id(), 'data.id set');\nassert_1.default.ok(event.stamp(), 'data.stamp set');",
                  "err": {},
                  "uuid": "52584d52-6797-4470-b04b-7e9704fa0b0d",
                  "parentUUID": "c80f8a81-a041-48e7-871e-1393321db444",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    // @ts-ignore\n    new event_1.default({ summary: 'Testevent' }, null);\n}, /`calendar`/);",
                  "err": {},
                  "uuid": "e8a1f966-0007-4b07-ba8c-4f8fd5413392",
                  "parentUUID": "c80f8a81-a041-48e7-871e-1393321db444",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52584d52-6797-4470-b04b-7e9704fa0b0d",
                "e8a1f966-0007-4b07-ba8c-4f8fd5413392"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36393cf6-7636-4d45-b7f4-ce6cf7c10d2b",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.id(1048));",
                  "err": {},
                  "uuid": "5fc633dd-a29f-4459-aa60-84d99ec8331d",
                  "parentUUID": "36393cf6-7636-4d45-b7f4-ce6cf7c10d2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).id(512);\nassert_1.default.strictEqual(event.id(), '512');\nevent.id('xyz');\nassert_1.default.strictEqual(event.id(), 'xyz');",
                  "err": {},
                  "uuid": "eb9642a3-0ead-4f39-9b17-d54ae58b0c04",
                  "parentUUID": "36393cf6-7636-4d45-b7f4-ce6cf7c10d2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5fc633dd-a29f-4459-aa60-84d99ec8331d",
                "eb9642a3-0ead-4f39-9b17-d54ae58b0c04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40380af0-5ff5-493a-808c-a66a29086bc8",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.uid(1048));",
                  "err": {},
                  "uuid": "6043c9dc-ee8f-467e-8ad2-3b54e13c413c",
                  "parentUUID": "40380af0-5ff5-493a-808c-a66a29086bc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).uid(512);\nassert_1.default.strictEqual(event.uid(), '512');\nevent.id('xyz');\nassert_1.default.strictEqual(event.uid(), 'xyz');",
                  "err": {},
                  "uuid": "d02fe6c6-7437-41b6-a35c-39fdf4a54899",
                  "parentUUID": "40380af0-5ff5-493a-808c-a66a29086bc8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6043c9dc-ee8f-467e-8ad2-3b54e13c413c",
                "d02fe6c6-7437-41b6-a35c-39fdf4a54899"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "49106b0b-6842-48ef-9f03-efde5a53d637",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.sequence(1));",
                  "err": {},
                  "uuid": "c48e6728-fc1e-4dde-88fd-ff524deb5a16",
                  "parentUUID": "49106b0b-6842-48ef-9f03-efde5a53d637",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).sequence(1048);\nassert_1.default.strictEqual(event.sequence(), 1048);",
                  "err": {},
                  "uuid": "a96d53db-5bd7-4951-a3fe-efe516817b90",
                  "parentUUID": "49106b0b-6842-48ef-9f03-efde5a53d637",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.sequence('hello');\n}, /`sequence`/);",
                  "err": {},
                  "uuid": "523b87e6-d964-4bdb-9d24-a90754de60ae",
                  "parentUUID": "49106b0b-6842-48ef-9f03-efde5a53d637",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default()).sequence(12);\nassert_1.default.strictEqual(event.sequence(), 12);\nevent.sequence(0);\nassert_1.default.strictEqual(event.sequence(), 0);",
                  "err": {},
                  "uuid": "37b5e182-0c5c-49e7-bf51-1e5bdd13ccab",
                  "parentUUID": "49106b0b-6842-48ef-9f03-efde5a53d637",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c48e6728-fc1e-4dde-88fd-ff524deb5a16",
                "a96d53db-5bd7-4951-a3fe-efe516817b90",
                "523b87e6-d964-4bdb-9d24-a90754de60ae",
                "37b5e182-0c5c-49e7-bf51-1e5bdd13ccab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e622704e-7c96-410c-afb8-db9be060b932",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = moment_timezone_1.default();\nconst event = new event_1.default({}, new calendar_1.default());\nevent.start(now);\nassert_1.default.ok((_a = event.start()) === null || _a === void 0 ? void 0 : _a.isSame(now));",
                  "err": {},
                  "uuid": "6e39bd23-474c-4e70-b974-1481df94b69d",
                  "parentUUID": "e622704e-7c96-410c-afb8-db9be060b932",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nassert_1.default.deepStrictEqual(event, event.start(date.toJSON()));\nassert_1.default.ok((_a = event.start()) === null || _a === void 0 ? void 0 : _a.isSame(date));",
                  "err": {},
                  "uuid": "029cc3fe-d797-456e-bee7-cd4fdc7becb5",
                  "parentUUID": "e622704e-7c96-410c-afb8-db9be060b932",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nassert_1.default.deepStrictEqual(event, event.start(date.toDate()));\nassert_1.default.ok((_a = event.start()) === null || _a === void 0 ? void 0 : _a.isSame(date));",
                  "err": {},
                  "uuid": "90ab6437-9d89-4b1b-b1c8-dde0321b910a",
                  "parentUUID": "e622704e-7c96-410c-afb8-db9be060b932",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.start(3);\n}, /`start`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.start(null);\n}, /`start`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.start(NaN);\n}, /`start`/, 'NaN');\nassert_1.default.throws(function () {\n    event.start(new Date('hallo'));\n}, /`start`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "e4ffbb05-f600-409d-a729-6138f46a13a7",
                  "parentUUID": "e622704e-7c96-410c-afb8-db9be060b932",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst start = moment_timezone_1.default().add(5, 'minutes');\nconst end = moment_timezone_1.default();\nconst event = new event_1.default({ end, start }, new calendar_1.default());\nassert_1.default.ok((_a = event.start()) === null || _a === void 0 ? void 0 : _a.isSame(end));\nassert_1.default.ok((_b = event.end()) === null || _b === void 0 ? void 0 : _b.isSame(start));",
                  "err": {},
                  "uuid": "b355643d-c86b-4a50-adc1-1c23cfbcad27",
                  "parentUUID": "e622704e-7c96-410c-afb8-db9be060b932",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.start(moment_timezone_1.default()));\nassert_1.default.deepStrictEqual(event, event.start(new Date()));",
                  "err": {},
                  "uuid": "eeffb125-a47b-4ed6-821d-49b905862df2",
                  "parentUUID": "e622704e-7c96-410c-afb8-db9be060b932",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e39bd23-474c-4e70-b974-1481df94b69d",
                "029cc3fe-d797-456e-bee7-cd4fdc7becb5",
                "90ab6437-9d89-4b1b-b1c8-dde0321b910a",
                "e4ffbb05-f600-409d-a729-6138f46a13a7",
                "b355643d-c86b-4a50-adc1-1c23cfbcad27",
                "eeffb125-a47b-4ed6-821d-49b905862df2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb0477bf-b96b-40d9-abd7-e34a0553c6fb",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = moment_timezone_1.default();\nconst event = new event_1.default({}, new calendar_1.default());\nevent.end(now);\nassert_1.default.ok((_a = event.end()) === null || _a === void 0 ? void 0 : _a.isSame(now));",
                  "err": {},
                  "uuid": "5e74e9d1-9746-4031-8da5-028319359dc0",
                  "parentUUID": "bb0477bf-b96b-40d9-abd7-e34a0553c6fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nassert_1.default.deepStrictEqual(event, event.end(date.toJSON()));\nassert_1.default.ok((_a = event.end()) === null || _a === void 0 ? void 0 : _a.isSame(date));",
                  "err": {},
                  "uuid": "993e6f1c-17a9-4b23-877a-6d00f53b350a",
                  "parentUUID": "bb0477bf-b96b-40d9-abd7-e34a0553c6fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nassert_1.default.deepStrictEqual(event, event.end(date.toDate()));\nassert_1.default.ok((_a = event.end()) === null || _a === void 0 ? void 0 : _a.isSame(date));",
                  "err": {},
                  "uuid": "f781833a-554b-4031-b007-18909c8f7f49",
                  "parentUUID": "bb0477bf-b96b-40d9-abd7-e34a0553c6fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.end(3);\n}, /`end`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.end(NaN);\n}, /`end`/, 'NaN');\nassert_1.default.throws(function () {\n    event.end(new Date('hallo'));\n}, /`end`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "29fb0b44-c1b1-4adc-ac44-b38d3f27e8bc",
                  "parentUUID": "bb0477bf-b96b-40d9-abd7-e34a0553c6fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst start = moment_timezone_1.default().add(5, 'minutes');\nconst end = moment_timezone_1.default();\nconst event = new event_1.default({ start, end }, new calendar_1.default());\nassert_1.default.ok((_a = event.start()) === null || _a === void 0 ? void 0 : _a.isSame(end));\nassert_1.default.ok((_b = event.end()) === null || _b === void 0 ? void 0 : _b.isSame(start));",
                  "err": {},
                  "uuid": "ecd755d5-e73e-447d-98a4-52187e2831d6",
                  "parentUUID": "bb0477bf-b96b-40d9-abd7-e34a0553c6fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.end(moment_timezone_1.default()));\nassert_1.default.deepStrictEqual(event, event.end(new Date()));",
                  "err": {},
                  "uuid": "608b23ab-cbc0-47a9-9c9f-02a4f2ecc10d",
                  "parentUUID": "bb0477bf-b96b-40d9-abd7-e34a0553c6fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e74e9d1-9746-4031-8da5-028319359dc0",
                "993e6f1c-17a9-4b23-877a-6d00f53b350a",
                "f781833a-554b-4031-b007-18909c8f7f49",
                "29fb0b44-c1b1-4adc-ac44-b38d3f27e8bc",
                "ecd755d5-e73e-447d-98a4-52187e2831d6",
                "608b23ab-cbc0-47a9-9c9f-02a4f2ecc10d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "82d3c978-4aae-4ec8-b929-4e2532db67c1",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = moment_timezone_1.default();\nconst event = new event_1.default({}, new calendar_1.default());\nevent.recurrenceId(now);\nassert_1.default.ok((_a = event.recurrenceId()) === null || _a === void 0 ? void 0 : _a.isSame(now));",
                  "err": {},
                  "uuid": "c0bf8a55-aeff-4ce3-8e0f-ed52d1a02569",
                  "parentUUID": "82d3c978-4aae-4ec8-b929-4e2532db67c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nassert_1.default.deepStrictEqual(event, event.recurrenceId(date.toJSON()));\nassert_1.default.ok((_a = event.recurrenceId()) === null || _a === void 0 ? void 0 : _a.isSame(date));",
                  "err": {},
                  "uuid": "4de8e7cf-e2eb-4571-a7ef-dc52532da6ad",
                  "parentUUID": "82d3c978-4aae-4ec8-b929-4e2532db67c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nassert_1.default.deepStrictEqual(event, event.recurrenceId(date.toDate()));\nassert_1.default.ok((_a = event.recurrenceId()) === null || _a === void 0 ? void 0 : _a.isSame(date));",
                  "err": {},
                  "uuid": "7a208122-bbf7-4a46-a64e-b41d42f3ecff",
                  "parentUUID": "82d3c978-4aae-4ec8-b929-4e2532db67c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(3);\n}, /`recurrenceId`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(NaN);\n}, /`recurrenceId`/, 'NaN');\nassert_1.default.throws(function () {\n    event.recurrenceId(new Date('hallo'));\n}, /`recurrenceId`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "be622740-b078-4d37-8f52-045891a30ddf",
                  "parentUUID": "82d3c978-4aae-4ec8-b929-4e2532db67c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(event, event.recurrenceId(moment_timezone_1.default()));\nassert_1.default.deepStrictEqual(event, event.recurrenceId(new Date()));",
                  "err": {},
                  "uuid": "b0d02647-ab7f-43da-818a-0081e06c7969",
                  "parentUUID": "82d3c978-4aae-4ec8-b929-4e2532db67c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0bf8a55-aeff-4ce3-8e0f-ed52d1a02569",
                "4de8e7cf-e2eb-4571-a7ef-dc52532da6ad",
                "7a208122-bbf7-4a46-a64e-b41d42f3ecff",
                "be622740-b078-4d37-8f52-045891a30ddf",
                "b0d02647-ab7f-43da-818a-0081e06c7969"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c8ccc3ef-3dbd-4658-92de-facf2690b50e",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default()).timezone('Europe/Berlin');\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "f059f531-a482-4437-a386-0d6675f059b8",
                  "parentUUID": "c8ccc3ef-3dbd-4658-92de-facf2690b50e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nconst e = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, cal);\nassert_1.default.strictEqual(cal.timezone(), null);\nassert_1.default.strictEqual(e.timezone(), null);\ncal.timezone('Europe/London');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/London');\nassert_1.default.strictEqual(e.timezone(), 'Europe/London');\ne.timezone('Europe/Berlin');\nassert_1.default.strictEqual(cal.timezone(), 'Europe/London');\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert_1.default.strictEqual(cal.timezone(), null);\nassert_1.default.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone(null);\nassert_1.default.strictEqual(cal.timezone(), null);\nassert_1.default.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "a0b3d0dc-4798-435b-ae6b-f68ba0e41bff",
                  "parentUUID": "c8ccc3ef-3dbd-4658-92de-facf2690b50e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.timezone('Europe/Berlin'));",
                  "err": {},
                  "uuid": "67f8ce92-c95d-4afc-be18-88b3873dc596",
                  "parentUUID": "c8ccc3ef-3dbd-4658-92de-facf2690b50e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: moment_timezone_1.default(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.timezone('Europe/London');\nassert_1.default.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "04ba968e-ffd4-4090-8f2c-6f44e2637eb0",
                  "parentUUID": "c8ccc3ef-3dbd-4658-92de-facf2690b50e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.floating(true);\ne.timezone('Europe/London');\nassert_1.default.strictEqual(e.floating(), false);",
                  "err": {},
                  "uuid": "dd04b7e6-6bb2-47e9-975b-eb2b82e5307a",
                  "parentUUID": "c8ccc3ef-3dbd-4658-92de-facf2690b50e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.floating(true);\ne.timezone(null);\nassert_1.default.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "974b201b-99e4-47f4-a966-0d2f5e88c8c1",
                  "parentUUID": "c8ccc3ef-3dbd-4658-92de-facf2690b50e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f059f531-a482-4437-a386-0d6675f059b8",
                "a0b3d0dc-4798-435b-ae6b-f68ba0e41bff",
                "67f8ce92-c95d-4afc-be18-88b3873dc596",
                "04ba968e-ffd4-4090-8f2c-6f44e2637eb0",
                "dd04b7e6-6bb2-47e9-975b-eb2b82e5307a",
                "974b201b-99e4-47f4-a966-0d2f5e88c8c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "09ce65cc-3549-47a7-81ef-9787428692c1",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment_timezone_1.default().add(1, 'day');\nconst e = new event_1.default({}, new calendar_1.default()).stamp(now);\nassert_1.default.ok(e.stamp().isSame(now));",
                  "err": {},
                  "uuid": "e4046682-181b-46e6-b3d9-56588cf9e9e6",
                  "parentUUID": "09ce65cc-3549-47a7-81ef-9787428692c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nassert_1.default.deepStrictEqual(event, event.stamp(date.toJSON()));\nassert_1.default.ok((_a = event.stamp()) === null || _a === void 0 ? void 0 : _a.isSame(date));",
                  "err": {},
                  "uuid": "8857b6fc-0fe2-47ab-9868-af8bea60d0f1",
                  "parentUUID": "09ce65cc-3549-47a7-81ef-9787428692c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nassert_1.default.deepStrictEqual(event, event.stamp(date.toDate()));\nassert_1.default.ok((_a = event.stamp()) === null || _a === void 0 ? void 0 : _a.isSame(date));",
                  "err": {},
                  "uuid": "33ba98fa-8b1c-443c-9cae-57a3288640a8",
                  "parentUUID": "09ce65cc-3549-47a7-81ef-9787428692c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.stamp(3);\n}, /`stamp`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.stamp(null);\n}, /`stamp`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.stamp(NaN);\n}, /`stamp`/, 'NaN');\nassert_1.default.throws(function () {\n    event.stamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "fb5b9c76-8c98-409a-8522-0c7936d86e4a",
                  "parentUUID": "09ce65cc-3549-47a7-81ef-9787428692c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.stamp(new Date()));",
                  "err": {},
                  "uuid": "8dcc65c2-2da5-493d-aa0c-38f272e3b93d",
                  "parentUUID": "09ce65cc-3549-47a7-81ef-9787428692c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4046682-181b-46e6-b3d9-56588cf9e9e6",
                "8857b6fc-0fe2-47ab-9868-af8bea60d0f1",
                "33ba98fa-8b1c-443c-9cae-57a3288640a8",
                "fb5b9c76-8c98-409a-8522-0c7936d86e4a",
                "8dcc65c2-2da5-493d-aa0c-38f272e3b93d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2887a91e-fbf5-479a-984e-ea43e3347e01",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment_timezone_1.default().add(1, 'day');\nconst e = new event_1.default({}, new calendar_1.default()).timestamp(now);\nassert_1.default.ok(e.timestamp().isSame(now));",
                  "err": {},
                  "uuid": "7b7a076a-a2fb-42bd-946e-e0fd3c3b0d96",
                  "parentUUID": "2887a91e-fbf5-479a-984e-ea43e3347e01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nassert_1.default.deepStrictEqual(event, event.timestamp(date.toJSON()));\nassert_1.default.ok((_a = event.stamp()) === null || _a === void 0 ? void 0 : _a.isSame(date));",
                  "err": {},
                  "uuid": "4180bf13-139f-45b3-8e75-1f193877711b",
                  "parentUUID": "2887a91e-fbf5-479a-984e-ea43e3347e01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nassert_1.default.deepStrictEqual(event, event.timestamp(date.toDate()));\nassert_1.default.ok((_a = event.stamp()) === null || _a === void 0 ? void 0 : _a.isSame(date));",
                  "err": {},
                  "uuid": "bf4bb753-6029-4136-a2e7-3232fb7aff0b",
                  "parentUUID": "2887a91e-fbf5-479a-984e-ea43e3347e01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.timestamp(3);\n}, /`stamp`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.timestamp(null);\n}, /`stamp`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.timestamp(NaN);\n}, /`stamp`/, 'NaN');\nassert_1.default.throws(function () {\n    event.timestamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "ab49750c-54e0-4ca8-820b-5366ad63eb5a",
                  "parentUUID": "2887a91e-fbf5-479a-984e-ea43e3347e01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.timestamp(new Date()));",
                  "err": {},
                  "uuid": "da828a91-b58b-4b41-82e9-0c5cebb2ed95",
                  "parentUUID": "2887a91e-fbf5-479a-984e-ea43e3347e01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b7a076a-a2fb-42bd-946e-e0fd3c3b0d96",
                "4180bf13-139f-45b3-8e75-1f193877711b",
                "bf4bb753-6029-4136-a2e7-3232fb7aff0b",
                "ab49750c-54e0-4ca8-820b-5366ad63eb5a",
                "da828a91-b58b-4b41-82e9-0c5cebb2ed95"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f222025f-ec85-4cb8-a163-8710c61fccc7",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.allDay(true);\nassert_1.default.strictEqual(e.allDay(), true);",
                  "err": {},
                  "uuid": "b8967b3f-a54a-40c3-9a85-cc304056f8e0",
                  "parentUUID": "f222025f-ec85-4cb8-a163-8710c61fccc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.allDay(true));",
                  "err": {},
                  "uuid": "b741e6ff-8c01-4969-a267-99285c0deaf9",
                  "parentUUID": "f222025f-ec85-4cb8-a163-8710c61fccc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.allDay(true);\nassert_1.default.strictEqual(event.allDay(), true);",
                  "err": {},
                  "uuid": "6f3960bb-9bbd-406d-9698-9f83043f1ec1",
                  "parentUUID": "f222025f-ec85-4cb8-a163-8710c61fccc7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8967b3f-a54a-40c3-9a85-cc304056f8e0",
                "b741e6ff-8c01-4969-a267-99285c0deaf9",
                "6f3960bb-9bbd-406d-9698-9f83043f1ec1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35eca66b-3dff-40ba-96b1-2357364b6ec5",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default()).floating(true);\nassert_1.default.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "93c8fb1f-dd1a-4697-a76d-dbc78cdc86af",
                  "parentUUID": "35eca66b-3dff-40ba-96b1-2357364b6ec5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.floating(false));\nassert_1.default.deepStrictEqual(e, e.floating(true));",
                  "err": {},
                  "uuid": "5e53e5de-64d5-46a9-8748-c70f06778752",
                  "parentUUID": "35eca66b-3dff-40ba-96b1-2357364b6ec5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.floating(true);\nassert_1.default.strictEqual(event.floating(), true);",
                  "err": {},
                  "uuid": "8ce83693-b4a2-4b30-a7ee-ba2a4c92fbd9",
                  "parentUUID": "35eca66b-3dff-40ba-96b1-2357364b6ec5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.timezone('Europe/London');\ne.floating(true);\nassert_1.default.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "53f0e7f3-99f6-4195-b277-54e78ba8a815",
                  "parentUUID": "35eca66b-3dff-40ba-96b1-2357364b6ec5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\ne.timezone('Europe/London');\ne.floating(false);\nassert_1.default.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "2d6223ec-5cee-4e29-8d57-a9a96fe7c127",
                  "parentUUID": "35eca66b-3dff-40ba-96b1-2357364b6ec5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93c8fb1f-dd1a-4697-a76d-dbc78cdc86af",
                "5e53e5de-64d5-46a9-8748-c70f06778752",
                "8ce83693-b4a2-4b30-a7ee-ba2a4c92fbd9",
                "53f0e7f3-99f6-4195-b277-54e78ba8a815",
                "2d6223ec-5cee-4e29-8d57-a9a96fe7c127"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options = {\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    count: 5,\n    interval: 2,\n    until: moment_timezone_1.default(),\n    exclude: [moment_timezone_1.default()]\n};\nconst e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e.repeating(), null);\ne.repeating(options);\nassert_1.default.strictEqual(JSON.stringify(e.repeating(), null, '  '), JSON.stringify(options, null, '  '));\ne.repeating(null);\nassert_1.default.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "5068b1ca-fc4f-444d-8b08-8b27b72fee57",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.repeating(null));\nassert_1.default.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "8c9af9de-7caa-4581-9034-732ffdf3eb39",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.repeating(null), 'repeating(null)');\nassert_1.default.deepStrictEqual(e, e.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY\n}), 'repeating({freq: \\'MONTHLY\\'})');",
                  "err": {},
                  "uuid": "18f152a5-acc0-4c99-a5d7-6e6b84ea252c",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        // @ts-ignore\n        repeating: {}\n    }, new calendar_1.default());\n}, /Input must be one of the following: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY/);",
                  "err": {},
                  "uuid": "52086653-82b0-4512-af44-ad31f0700e40",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            // @ts-ignore\n            freq: 'hello'\n        }\n    }, new calendar_1.default());\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "18503d66-ae76-44f2-9e6c-7569ded90027",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY });\nassert_1.default.strictEqual((_a = e.repeating()) === null || _a === void 0 ? void 0 : _a.freq, 'MONTHLY');",
                  "err": {},
                  "uuid": "b1d239b1-bb8b-4ffb-a19d-65a9f8f60aa2",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            count: Infinity\n        }\n    }, new calendar_1.default());\n}, /`repeating.count` must be a finite number!/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            count: 'abc'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.count` must be a finite number!/);",
                  "err": {},
                  "uuid": "d12352de-f53a-4c49-80cf-0077151e3a1d",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, count: 5 });\nassert_1.default.strictEqual((_a = e.repeating()) === null || _a === void 0 ? void 0 : _a.count, 5);",
                  "err": {},
                  "uuid": "5a88339d-10a9-449f-a65d-6304fc93b582",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: Infinity\n        }\n    }, new calendar_1.default());\n}, /`repeating.interval` must be a finite number!/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            interval: 'abc'\n        }\n    }, new calendar_1.default());\n}, /`repeating.interval` must be a finite number!/);",
                  "err": {},
                  "uuid": "18408b94-3d93-4fa5-908f-3c60b892ff5e",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, interval: 5 });\nassert_1.default.strictEqual((_a = e.repeating()) === null || _a === void 0 ? void 0 : _a.interval, 5);",
                  "err": {},
                  "uuid": "19d92431-de76-4343-a444-646f2828ed10",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            until: 1413277003\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.until` must be a Date or a moment object/);",
                  "err": {},
                  "uuid": "c85f28d1-3297-469b-8a6b-46bfd1a97646",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nevent.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: date.toJSON() });\nassert_1.default.ok((_b = (_a = event.repeating()) === null || _a === void 0 ? void 0 : _a.until) === null || _b === void 0 ? void 0 : _b.isSame(date));",
                  "err": {},
                  "uuid": "924d6dd6-59e6-4d41-801b-e3664f02d279",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nevent.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: date.toDate() });\nassert_1.default.ok((_b = (_a = event.repeating()) === null || _a === void 0 ? void 0 : _a.until) === null || _b === void 0 ? void 0 : _b.isSame(date));",
                  "err": {},
                  "uuid": "db69bc2f-de18-4dc3-947c-6f44bc7da280",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst event = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\nevent.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: date });\nassert_1.default.ok((_b = (_a = event.repeating()) === null || _a === void 0 ? void 0 : _a.until) === null || _b === void 0 ? void 0 : _b.isSame(date));",
                  "err": {},
                  "uuid": "3bf7462d-f759-4a5b-a5dd-3174202db6e4",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: 3 });\n}, /`repeating.until`/, 'Number');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: null });\n}, /`repeating.until`/, 'null');\nassert_1.default.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: NaN });\n}, /`repeating.until`/, 'NaN');\nassert_1.default.throws(function () {\n    event.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, until: new Date('foo') });\n}, /`repeating.until`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "56fd5f30-418e-4ece-9d50-bce51125b7d1",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', 'BAR', 'th']\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', Infinity, 'th']\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "161500b4-ab2e-4292-be36-b4ae6bec880a",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst e = new event_1.default({}, new calendar_1.default());\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    byDay: [types_1.ICalWeekday.SU, types_1.ICalWeekday.WE, types_1.ICalWeekday.TH]\n});\nassert_1.default.deepStrictEqual((_a = e.repeating()) === null || _a === void 0 ? void 0 : _a.byDay, ['SU', 'WE', 'TH']);",
                  "err": {},
                  "uuid": "2dc9309d-0f9c-4b12-bed2-67c26c5d9296",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonth: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonth` contains invalid value `FOO`/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonth: [1, 14, 7]\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonth` contains invalid value `14`/);",
                  "err": {},
                  "uuid": "3672973e-b28d-48aa-a0a3-2b81431f41e5",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, byMonth: [1, 12, 7] });\nassert_1.default.deepStrictEqual((_a = e.repeating()) === null || _a === void 0 ? void 0 : _a.byMonth, [1, 12, 7]);",
                  "err": {},
                  "uuid": "00d96497-c8d7-4370-8d2b-9260043ccfb3",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonthDay: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonthDay` contains invalid value `FOO`/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 32, 15]\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.byMonthDay` contains invalid value `32`/);",
                  "err": {},
                  "uuid": "dd243789-082c-4089-9b62-b83c645e2ecf",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst e = new event_1.default({}, new calendar_1.default());\ne.repeating({ freq: types_1.ICalEventRepeatingFreq.MONTHLY, byMonthDay: [1, 15] });\nassert_1.default.deepStrictEqual((_a = e.repeating()) === null || _a === void 0 ? void 0 : _a.byMonthDay, [1, 15]);",
                  "err": {},
                  "uuid": "097a415b-c295-4084-88ac-c9d2b4d644b2",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            bySetPos: 6\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.bySetPos` contains invalid value `6`/);\nassert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            // @ts-ignore\n            bySetPos: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.bySetPos` contains invalid value `FOO`/);",
                  "err": {},
                  "uuid": "f3529d21-0f3e-464b-bf3f-cc7b809098bc",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            bySetPos: 6\n        }\n    }, new calendar_1.default());\n}, /`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/);",
                  "err": {},
                  "uuid": "54303516-2630-46dc-8866-83c167473aa8",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b, _c;\nconst e = new event_1.default({}, new calendar_1.default());\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    byDay: [types_1.ICalWeekday.SU],\n    bySetPos: 2\n});\nassert_1.default.strictEqual((_b = (_a = e.repeating()) === null || _a === void 0 ? void 0 : _a.byDay) === null || _b === void 0 ? void 0 : _b.length, 1);\nassert_1.default.strictEqual((_c = e.repeating()) === null || _c === void 0 ? void 0 : _c.bySetPos, 2);",
                  "err": {},
                  "uuid": "b7708b6c-d297-4de7-ac60-003923fbf7ee",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            exclude: new Date('FOO')\n        }\n    }, new calendar_1.default());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "121f010c-035c-4923-811b-de0e968a2c58",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            exclude: [moment_timezone_1.default(), new Date('BAR'), 'FOO']\n        }\n    }, new calendar_1.default());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "15367d6c-11f9-46ea-bb23-8ca0f450d6a7",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        end: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [types_1.ICalWeekday.SU],\n            // @ts-ignore\n            exclude: 42\n        }\n    }, new calendar_1.default());\n}, /must be a Date or a moment object/);",
                  "err": {},
                  "uuid": "3dd31444-99bb-4f95-a08f-0af7f5d3f76c",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst e = new event_1.default({}, new calendar_1.default());\nconst date = moment_timezone_1.default().add(1, 'week');\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    exclude: [\n        date.toJSON(),\n        date.toDate(),\n        date\n    ]\n});\nconst result = (_a = e.repeating()) === null || _a === void 0 ? void 0 : _a.exclude;\nassert_1.default.ok(Array.isArray(result));\nassert_1.default.strictEqual(result.length, 3);\nassert_1.default.ok(result[0].isSame(date), 'String');\nassert_1.default.ok(result[1].isSame(date), 'Date');\nassert_1.default.ok(result[2].isSame(date), 'Moment');",
                  "err": {},
                  "uuid": "ae36c7af-ef05-4d02-b2ee-2857fd11e595",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.throws(function () {\n    new event_1.default({\n        start: moment_timezone_1.default(),\n        summary: 'test',\n        repeating: {\n            freq: types_1.ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            startOfWeek: 'FOO'\n        }\n    }, new calendar_1.default());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "e07281ac-0453-4ade-bc76-d33456646e01",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst e = new event_1.default({}, new calendar_1.default());\ne.repeating({\n    freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n    startOfWeek: types_1.ICalWeekday.SU\n});\nassert_1.default.deepStrictEqual((_a = e.repeating()) === null || _a === void 0 ? void 0 : _a.startOfWeek, 'SU');",
                  "err": {},
                  "uuid": "85434368-c495-4195-9d65-0bdf76c8591c",
                  "parentUUID": "02427300-1f4e-4f51-b3e6-2c1cdee23cb1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5068b1ca-fc4f-444d-8b08-8b27b72fee57",
                "8c9af9de-7caa-4581-9034-732ffdf3eb39",
                "18f152a5-acc0-4c99-a5d7-6e6b84ea252c",
                "52086653-82b0-4512-af44-ad31f0700e40",
                "18503d66-ae76-44f2-9e6c-7569ded90027",
                "b1d239b1-bb8b-4ffb-a19d-65a9f8f60aa2",
                "d12352de-f53a-4c49-80cf-0077151e3a1d",
                "5a88339d-10a9-449f-a65d-6304fc93b582",
                "18408b94-3d93-4fa5-908f-3c60b892ff5e",
                "19d92431-de76-4343-a444-646f2828ed10",
                "c85f28d1-3297-469b-8a6b-46bfd1a97646",
                "924d6dd6-59e6-4d41-801b-e3664f02d279",
                "db69bc2f-de18-4dc3-947c-6f44bc7da280",
                "3bf7462d-f759-4a5b-a5dd-3174202db6e4",
                "56fd5f30-418e-4ece-9d50-bce51125b7d1",
                "161500b4-ab2e-4292-be36-b4ae6bec880a",
                "2dc9309d-0f9c-4b12-bed2-67c26c5d9296",
                "3672973e-b28d-48aa-a0a3-2b81431f41e5",
                "00d96497-c8d7-4370-8d2b-9260043ccfb3",
                "dd243789-082c-4089-9b62-b83c645e2ecf",
                "097a415b-c295-4084-88ac-c9d2b4d644b2",
                "f3529d21-0f3e-464b-bf3f-cc7b809098bc",
                "54303516-2630-46dc-8866-83c167473aa8",
                "b7708b6c-d297-4de7-ac60-003923fbf7ee",
                "121f010c-035c-4923-811b-de0e968a2c58",
                "15367d6c-11f9-46ea-bb23-8ca0f450d6a7",
                "3dd31444-99bb-4f95-a08f-0af7f5d3f76c",
                "ae36c7af-ef05-4d02-b2ee-2857fd11e595",
                "e07281ac-0453-4ade-bc76-d33456646e01",
                "85434368-c495-4195-9d65-0bdf76c8591c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a60a8411-60f1-450c-bf80-77353f5afd53",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.summary(), '');\ne.summary('Testevent');\nassert_1.default.strictEqual(e.summary(), 'Testevent');",
                  "err": {},
                  "uuid": "e8df8d98-1bd9-48f5-a96e-a1508663c72a",
                  "parentUUID": "a60a8411-60f1-450c-bf80-77353f5afd53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.summary(''));\nassert_1.default.deepStrictEqual(e, e.summary('Testevent'));",
                  "err": {},
                  "uuid": "dc574d80-1627-43cd-845e-81d5b396384a",
                  "parentUUID": "a60a8411-60f1-450c-bf80-77353f5afd53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.summary('Example Event II');\nassert_1.default.strictEqual(event.summary(), 'Example Event II');\nevent.summary('');\nassert_1.default.strictEqual(event.summary(), '');",
                  "err": {},
                  "uuid": "7b4e3526-c2d1-4905-8c42-59f142756ff7",
                  "parentUUID": "a60a8411-60f1-450c-bf80-77353f5afd53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8df8d98-1bd9-48f5-a96e-a1508663c72a",
                "dc574d80-1627-43cd-845e-81d5b396384a",
                "7b4e3526-c2d1-4905-8c42-59f142756ff7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d6793bc-3461-4761-9506-73a507d62436",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event location() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.location(), null);\ne.location('Test Location');\nassert_1.default.strictEqual(e.location(), 'Test Location');\ne.location(null);\nassert_1.default.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "3d709845-3504-4389-ae32-ad973cf17b79",
                  "parentUUID": "0d6793bc-3461-4761-9506-73a507d62436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.location(null));\nassert_1.default.deepStrictEqual(e, e.location('Test Location'));",
                  "err": {},
                  "uuid": "81db5816-1f8f-42f9-92c4-660bc3510876",
                  "parentUUID": "0d6793bc-3461-4761-9506-73a507d62436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.location('Europa-Park');\nassert_1.default.strictEqual(event.location(), 'Europa-Park');",
                  "err": {},
                  "uuid": "41debf9d-04f7-4621-9051-a1a95784e1ad",
                  "parentUUID": "0d6793bc-3461-4761-9506-73a507d62436",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d709845-3504-4389-ae32-ad973cf17b79",
                "81db5816-1f8f-42f9-92c4-660bc3510876",
                "41debf9d-04f7-4621-9051-a1a95784e1ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "24703d94-f70d-4ee7-a314-157433d6bd39",
              "title": "geo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event geo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.geo(), null);\ne.geo({ lat: 44.5, lon: -3.4 });\nassert_1.default.deepStrictEqual(e.geo(), { lat: 44.5, lon: -3.4 });\ne.geo(null);\nassert_1.default.strictEqual(e.geo(), null);",
                  "err": {},
                  "uuid": "964249fc-559b-4fe0-92ce-bcf24579f0ab",
                  "parentUUID": "24703d94-f70d-4ee7-a314-157433d6bd39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event geo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.geo(null));\nassert_1.default.deepStrictEqual(e, e.geo({ lat: 44.5, lon: -3.4 }));",
                  "err": {},
                  "uuid": "6dfb6a62-0708-4ecc-b481-75f3ccadcadf",
                  "parentUUID": "24703d94-f70d-4ee7-a314-157433d6bd39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update geo",
                  "fullTitle": "ical-generator Event geo() should update geo",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.geo({ lat: 44.5, lon: -3.4 });\nassert_1.default.deepStrictEqual(event.geo(), { lat: 44.5, lon: -3.4 });\nevent.geo({ lat: 44.5, lon: -3.4 });\nassert_1.default.deepStrictEqual(event.geo(), { lat: 44.5, lon: -3.4 });",
                  "err": {},
                  "uuid": "3891246e-154a-455d-b720-8a703974a6bc",
                  "parentUUID": "24703d94-f70d-4ee7-a314-157433d6bd39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reset geo when setting to null",
                  "fullTitle": "ical-generator Event geo() should reset geo when setting to null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.geo(null);\nassert_1.default.strictEqual(event.geo(), null);",
                  "err": {},
                  "uuid": "208cb149-3c2a-42cd-b563-3d0ad26e7d68",
                  "parentUUID": "24703d94-f70d-4ee7-a314-157433d6bd39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string is not valid",
                  "fullTitle": "ical-generator Event geo() should throw error when string is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\n// @ts-ignore\nassert_1.default.throws(() => event.geo('somthingInvalid'), /`geo` isn't formated correctly/i);",
                  "err": {},
                  "uuid": "69c874f2-9cdf-4bb4-b3bc-395f90d51952",
                  "parentUUID": "24703d94-f70d-4ee7-a314-157433d6bd39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "964249fc-559b-4fe0-92ce-bcf24579f0ab",
                "6dfb6a62-0708-4ecc-b481-75f3ccadcadf",
                "3891246e-154a-455d-b720-8a703974a6bc",
                "208cb149-3c2a-42cd-b563-3d0ad26e7d68",
                "69c874f2-9cdf-4bb4-b3bc-395f90d51952"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b8c399d8-73fd-4dd1-9265-07cfea896f66",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event location() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.location(), null);\ne.location('Test Location');\nassert_1.default.strictEqual(e.location(), 'Test Location');\ne.location(null);\nassert_1.default.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "c6c0484b-0bfa-4739-aa50-d294e63a20a8",
                  "parentUUID": "b8c399d8-73fd-4dd1-9265-07cfea896f66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.location(null));\nassert_1.default.deepStrictEqual(e, e.location('Test Location'));",
                  "err": {},
                  "uuid": "65c3949c-07d6-4ce8-9d8e-948a38cc2c5a",
                  "parentUUID": "b8c399d8-73fd-4dd1-9265-07cfea896f66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.location('Europa-Park');\nassert_1.default.strictEqual(event.location(), 'Europa-Park');",
                  "err": {},
                  "uuid": "d348a8ff-9013-4892-af89-7c2219b27653",
                  "parentUUID": "b8c399d8-73fd-4dd1-9265-07cfea896f66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reset appleLocation",
                  "fullTitle": "ical-generator Event location() should reset appleLocation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event',\n    appleLocation: {\n        title: 'My Title',\n        address: 'My Address',\n        radius: 40,\n        geo: {\n            lat: 52.063921,\n            lon: 5.128511\n        }\n    }\n}, new calendar_1.default());\nevent.location('Europa-Park');\nassert_1.default.strictEqual(event.appleLocation(), null);",
                  "err": {},
                  "uuid": "3236ae95-f154-4313-940e-19518b017ec6",
                  "parentUUID": "b8c399d8-73fd-4dd1-9265-07cfea896f66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6c0484b-0bfa-4739-aa50-d294e63a20a8",
                "65c3949c-07d6-4ce8-9d8e-948a38cc2c5a",
                "d348a8ff-9013-4892-af89-7c2219b27653",
                "3236ae95-f154-4313-940e-19518b017ec6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "850fb281-5e90-448c-9e39-f0b88370d5b5",
              "title": "appleLocation()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event appleLocation() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.appleLocation(), null);\ne.appleLocation({\n    title: 'My Title',\n    address: 'My Address',\n    radius: 40,\n    geo: {\n        lat: 52.063921,\n        lon: 5.128511\n    }\n});\nassert_1.default.deepEqual(e.appleLocation(), {\n    title: 'My Title',\n    address: 'My Address',\n    radius: 40,\n    geo: {\n        lat: '52.063921',\n        lon: '5.128511'\n    }\n});\ne.appleLocation(null);\nassert_1.default.strictEqual(e.appleLocation(), null);",
                  "err": {},
                  "uuid": "84ee2361-87fa-42ae-b9a4-6c1fe62a4d73",
                  "parentUUID": "850fb281-5e90-448c-9e39-f0b88370d5b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event appleLocation() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.appleLocation(null));\nassert_1.default.deepStrictEqual(e, e.appleLocation({\n    title: 'My Title',\n    address: 'My Address',\n    radius: 40,\n    geo: {\n        lat: 52.063921,\n        lon: 5.128511\n    }\n}));",
                  "err": {},
                  "uuid": "abd54f6c-cb84-40b4-8c7b-472eb05e56cd",
                  "parentUUID": "850fb281-5e90-448c-9e39-f0b88370d5b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update appleLocation",
                  "fullTitle": "ical-generator Event appleLocation() should update appleLocation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.appleLocation({\n    title: 'My Title',\n    address: 'My Address',\n    radius: 40,\n    geo: {\n        lat: 52.063921,\n        lon: 5.128511\n    }\n});\nassert_1.default.deepEqual(event.appleLocation(), {\n    title: 'My Title',\n    address: 'My Address',\n    radius: 40,\n    geo: {\n        lat: '52.063921',\n        lon: '5.128511'\n    }\n});",
                  "err": {},
                  "uuid": "85cb9110-96a5-4589-b060-d22fbd5a0b35",
                  "parentUUID": "850fb281-5e90-448c-9e39-f0b88370d5b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reset location",
                  "fullTitle": "ical-generator Event appleLocation() should reset location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event',\n    location: 'Batman Cave'\n}, new calendar_1.default());\nevent.appleLocation({\n    title: 'My Title',\n    address: 'My Address',\n    radius: 40,\n    geo: {\n        lat: 52.063921,\n        lon: 5.128511\n    }\n});\nassert_1.default.ok(event.location() !== 'Batman Cave');",
                  "err": {},
                  "uuid": "e6355c57-21b4-444e-9639-36eae3af150a",
                  "parentUUID": "850fb281-5e90-448c-9e39-f0b88370d5b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string is not valid",
                  "fullTitle": "ical-generator Event appleLocation() should throw error when string is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\n// @ts-ignore\nassert_1.default.throws(() => event.appleLocation({}), /`appleLocation` isn't formatted correctly/i);",
                  "err": {},
                  "uuid": "48fb4c3d-42e9-4441-9f65-3050e3aa015b",
                  "parentUUID": "850fb281-5e90-448c-9e39-f0b88370d5b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84ee2361-87fa-42ae-b9a4-6c1fe62a4d73",
                "abd54f6c-cb84-40b4-8c7b-472eb05e56cd",
                "85cb9110-96a5-4589-b060-d22fbd5a0b35",
                "e6355c57-21b4-444e-9639-36eae3af150a",
                "48fb4c3d-42e9-4441-9f65-3050e3aa015b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d6870c5c-1999-405d-83d0-c48915f622b5",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.description(), null);\ne.description('I don\\'t need a description. I\\'m far to awesome for descriptions…');\nassert_1.default.strictEqual(e.description(), 'I don\\'t need a description. I\\'m far to awesome for descriptions…');\ne.description(null);\nassert_1.default.strictEqual(e.description(), null);",
                  "err": {},
                  "uuid": "50dec0c7-454b-4644-a5e2-2a5c35d0d3b4",
                  "parentUUID": "d6870c5c-1999-405d-83d0-c48915f622b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.description(null));\nassert_1.default.deepStrictEqual(e, e.description('I don\\'t need a description. I\\'m far to awesome for descriptions…'));",
                  "err": {},
                  "uuid": "80f51252-244f-411a-bff8-06576966aaaf",
                  "parentUUID": "d6870c5c-1999-405d-83d0-c48915f622b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.description('Well. But other people need descriptions… :/');\nassert_1.default.strictEqual(event.description(), 'Well. But other people need descriptions… :/');",
                  "err": {},
                  "uuid": "f4f8d22f-83b0-44e7-b8c5-73b6f41046c3",
                  "parentUUID": "d6870c5c-1999-405d-83d0-c48915f622b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50dec0c7-454b-4644-a5e2-2a5c35d0d3b4",
                "80f51252-244f-411a-bff8-06576966aaaf",
                "f4f8d22f-83b0-44e7-b8c5-73b6f41046c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7569178f-236e-434f-b1d4-26b540b97c4d",
              "title": "htmlDescription()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event htmlDescription() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.htmlDescription(), null);\ne.htmlDescription('<marquee>I\\'m the best HTML tag in this universe!</marquee>');\nassert_1.default.strictEqual(e.htmlDescription(), '<marquee>I\\'m the best HTML tag in this universe!</marquee>');\ne.htmlDescription(null);\nassert_1.default.strictEqual(e.htmlDescription(), null);",
                  "err": {},
                  "uuid": "aefe4ceb-ea61-4008-bc5f-fe23ae26de0f",
                  "parentUUID": "7569178f-236e-434f-b1d4-26b540b97c4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event htmlDescription() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.htmlDescription(null));\nassert_1.default.deepStrictEqual(e, e.htmlDescription('I don\\'t need a description. I\\'m far to awesome for descriptions…'));",
                  "err": {},
                  "uuid": "f422921e-0902-4669-8819-263bdd441b33",
                  "parentUUID": "7569178f-236e-434f-b1d4-26b540b97c4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event htmlDescription() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.htmlDescription('<marquee>I\\'m the best HTML tag in this universe!</marquee>');\nassert_1.default.strictEqual(event.htmlDescription(), '<marquee>I\\'m the best HTML tag in this universe!</marquee>');",
                  "err": {},
                  "uuid": "9fadf1a6-7c1b-4085-976a-ab83b5b56d85",
                  "parentUUID": "7569178f-236e-434f-b1d4-26b540b97c4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aefe4ceb-ea61-4008-bc5f-fe23ae26de0f",
                "f422921e-0902-4669-8819-263bdd441b33",
                "9fadf1a6-7c1b-4085-976a-ab83b5b56d85"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a3390520-efbc-4783-b2e0-5c80442b4cac",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b, _c, _d, _e;\nconst e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.organizer(), null);\ne.organizer(null);\nassert_1.default.strictEqual(e.organizer(), null);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert_1.default.strictEqual('Sebastian Pekarek', (_a = e.organizer()) === null || _a === void 0 ? void 0 : _a.name);\nassert_1.default.strictEqual('mail@example.com', (_b = e.organizer()) === null || _b === void 0 ? void 0 : _b.email);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert_1.default.strictEqual('Sebastian Pekarek', (_c = e.organizer()) === null || _c === void 0 ? void 0 : _c.name);\nassert_1.default.strictEqual('mail@example.com', (_d = e.organizer()) === null || _d === void 0 ? void 0 : _d.email);\nassert_1.default.strictEqual('mail2@example2.com', (_e = e.organizer()) === null || _e === void 0 ? void 0 : _e.mailto);",
                  "err": {},
                  "uuid": "7ec26102-214b-43a9-92cf-e8d364fb0081",
                  "parentUUID": "a3390520-efbc-4783-b2e0-5c80442b4cac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.organizer(null));\nassert_1.default.deepStrictEqual(e, e.organizer('Sebastian Pekarek <mail@example.com>'));",
                  "err": {},
                  "uuid": "8195d774-668d-4edd-8ae4-bbfb1f96c3b3",
                  "parentUUID": "a3390520-efbc-4783-b2e0-5c80442b4cac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert_1.default.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined\n});\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert_1.default.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: 'mail2@example2.com'\n});",
                  "err": {},
                  "uuid": "743be6ba-795b-40d9-8a32-c92e0c1d409d",
                  "parentUUID": "a3390520-efbc-4783-b2e0-5c80442b4cac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.organizer('Sebastian Pekarek <mail@example.com>');\nassert_1.default.deepStrictEqual(event.organizer(), { name: 'Sebastian Pekarek', email: 'mail@example.com' });",
                  "err": {},
                  "uuid": "731ff689-e7d7-4c70-acb5-b6d7fae80531",
                  "parentUUID": "a3390520-efbc-4783-b2e0-5c80442b4cac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.organizer('foo bar');\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "883c2c22-5122-4d7b-a80b-54cf0734e943",
                  "parentUUID": "a3390520-efbc-4783-b2e0-5c80442b4cac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.organizer({ name: 'Sebastian Pekarek' });\n}, /`organizer\\.email`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.organizer({ email: 'foo' });\n}, /`organizer\\.name`/);",
                  "err": {},
                  "uuid": "f6e7c08e-cf0d-4436-bb91-af751ff91d27",
                  "parentUUID": "a3390520-efbc-4783-b2e0-5c80442b4cac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.organizer(Infinity);\n}, /`organizer`/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.organizer(NaN);\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "8ff01412-2ef0-47d7-99c8-14c6ec0391be",
                  "parentUUID": "a3390520-efbc-4783-b2e0-5c80442b4cac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ec26102-214b-43a9-92cf-e8d364fb0081",
                "8195d774-668d-4edd-8ae4-bbfb1f96c3b3",
                "743be6ba-795b-40d9-8a32-c92e0c1d409d",
                "731ff689-e7d7-4c70-acb5-b6d7fae80531",
                "883c2c22-5122-4d7b-a80b-54cf0734e943",
                "f6e7c08e-cf0d-4436-bb91-af751ff91d27",
                "8ff01412-2ef0-47d7-99c8-14c6ec0391be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "055577e3-8efd-4241-ac1f-dd9c00b9db1b",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = new attendee_1.default({}, event);\nassert_1.default.strictEqual(event.createAttendee(attendee), attendee, 'createAttendee returns attendee');\nassert_1.default.deepStrictEqual(event.attendees()[0], attendee, 'attendee pushed');",
                  "err": {},
                  "uuid": "c51aee94-fc71-4af8-a761-6c5d389fd8e1",
                  "parentUUID": "055577e3-8efd-4241-ac1f-dd9c00b9db1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.ok(event.createAttendee({}) instanceof attendee_1.default);\nassert_1.default.strictEqual(event.attendees.length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "97994263-ada8-45dd-8284-0b86b24fbda8",
                  "parentUUID": "055577e3-8efd-4241-ac1f-dd9c00b9db1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = event.createAttendee('Zac <zac@example.com>');\nassert_1.default.strictEqual(attendee.name(), 'Zac');\nassert_1.default.strictEqual(attendee.email(), 'zac@example.com');\nassert_1.default.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "827f9037-bd0a-47fc-aecb-6fd63a62b3b1",
                  "parentUUID": "055577e3-8efd-4241-ac1f-dd9c00b9db1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.createAttendee('foo bar');\n}, /isn't formated correctly/);",
                  "err": {},
                  "uuid": "d8111ce1-9f3e-4317-b45d-2478bf8a16b3",
                  "parentUUID": "055577e3-8efd-4241-ac1f-dd9c00b9db1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst attendee = event.createAttendee({ name: 'Zac', email: 'zac@example.com' });\nassert_1.default.strictEqual(attendee.name(), 'Zac');\nassert_1.default.strictEqual(attendee.email(), 'zac@example.com');\nassert_1.default.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "89c33713-ec9a-4091-80b4-a72b38060faf",
                  "parentUUID": "055577e3-8efd-4241-ac1f-dd9c00b9db1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c51aee94-fc71-4af8-a761-6c5d389fd8e1",
                "97994263-ada8-45dd-8284-0b86b24fbda8",
                "827f9037-bd0a-47fc-aecb-6fd63a62b3b1",
                "d8111ce1-9f3e-4317-b45d-2478bf8a16b3",
                "89c33713-ec9a-4091-80b4-a72b38060faf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27bedceb-e084-454b-af1f-c1b7b80cf523",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.attendees().length, 0);\nconst attendee = event.createAttendee();\nassert_1.default.strictEqual(event.attendees().length, 1);\nassert_1.default.deepStrictEqual(event.attendees()[0], attendee);",
                  "err": {},
                  "uuid": "5fa78c61-ef03-4812-9135-2ac8af4ba1ee",
                  "parentUUID": "27bedceb-e084-454b-af1f-c1b7b80cf523",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.attendees([{ name: 'Person A' }, { name: 'Person B' }]);\nassert_1.default.strictEqual(event.attendees().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "04bc143f-ca02-43c9-bf8d-373566da94ef",
                  "parentUUID": "27bedceb-e084-454b-af1f-c1b7b80cf523",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5fa78c61-ef03-4812-9135-2ac8af4ba1ee",
                "04bc143f-ca02-43c9-bf8d-373566da94ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0469071c-a698-4318-aa1d-f496e240501a",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.ok(event.createAlarm() instanceof alarm_1.default);",
                  "err": {},
                  "uuid": "9bcda0fc-14f3-4e44-9f4e-da0a1d29aedd",
                  "parentUUID": "0469071c-a698-4318-aa1d-f496e240501a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst alarm = event.createAlarm({ type: alarm_1.ICalAlarmType.audio });\nassert_1.default.strictEqual(alarm.type(), 'audio');",
                  "err": {},
                  "uuid": "90db00e3-3c05-4c38-bbe2-a1d82a869c7f",
                  "parentUUID": "0469071c-a698-4318-aa1d-f496e240501a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9bcda0fc-14f3-4e44-9f4e-da0a1d29aedd",
                "90db00e3-3c05-4c38-bbe2-a1d82a869c7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3c91377b-0e02-4f36-8ab4-086c6f1a8f8b",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.alarms().length, 0);\nconst alarm = event.createAlarm();\nassert_1.default.strictEqual(event.alarms().length, 1);\nassert_1.default.deepStrictEqual(event.alarms()[0], alarm);",
                  "err": {},
                  "uuid": "6db685c9-c4fe-412e-94de-14bfb90f4dc9",
                  "parentUUID": "3c91377b-0e02-4f36-8ab4-086c6f1a8f8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.alarms([\n    { type: alarm_1.ICalAlarmType.audio },\n    { type: alarm_1.ICalAlarmType.display }\n]);\nassert_1.default.strictEqual(event.alarms().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "f04686dd-a0ff-4745-8ce5-43761c272ec2",
                  "parentUUID": "3c91377b-0e02-4f36-8ab4-086c6f1a8f8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6db685c9-c4fe-412e-94de-14bfb90f4dc9",
                "f04686dd-a0ff-4745-8ce5-43761c272ec2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "44cc3a89-bada-4b1f-a527-43ed9abd2323",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.ok(event.createCategory() instanceof category_1.default);",
                  "err": {},
                  "uuid": "10d118d1-d420-4213-a9c1-dfb326d217b5",
                  "parentUUID": "44cc3a89-bada-4b1f-a527-43ed9abd2323",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst category = event.createCategory({ name: 'foo' });\nassert_1.default.strictEqual(category.name(), 'foo');",
                  "err": {},
                  "uuid": "72d71df5-ae91-4a94-a47c-c5b65884524f",
                  "parentUUID": "44cc3a89-bada-4b1f-a527-43ed9abd2323",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10d118d1-d420-4213-a9c1-dfb326d217b5",
                "72d71df5-ae91-4a94-a47c-c5b65884524f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "65851444-6ad9-4d71-af68-5c5de19f48a9",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.categories().length, 0);\nconst category = event.createCategory();\nassert_1.default.strictEqual(event.categories().length, 1);\nassert_1.default.deepStrictEqual(event.categories()[0], category);",
                  "err": {},
                  "uuid": "a914c06c-bcb0-4b8c-9d47-674ce598ea15",
                  "parentUUID": "65851444-6ad9-4d71-af68-5c5de19f48a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nconst foo = event.categories([\n    { name: 'foo' },\n    { name: 'bar' }\n]);\nassert_1.default.strictEqual(event.categories().length, 2);\nassert_1.default.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "a8d01ba3-9cb5-43a8-8a6c-837770886f95",
                  "parentUUID": "65851444-6ad9-4d71-af68-5c5de19f48a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a914c06c-bcb0-4b8c-9d47-674ce598ea15",
                "a8d01ba3-9cb5-43a8-8a6c-837770886f95"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "108d3084-ed59-4b26-8c2b-2f427ceb1c66",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.status(), null);\nevent.status(event_1.ICalEventStatus.CONFIRMED);\nassert_1.default.strictEqual(event.status(), 'CONFIRMED');\nevent.status(null);\nassert_1.default.strictEqual(event.status(), null);",
                  "err": {},
                  "uuid": "4c89c485-d8ef-4667-9b42-10f29f3a1bce",
                  "parentUUID": "108d3084-ed59-4b26-8c2b-2f427ceb1c66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.status(null));\nassert_1.default.deepStrictEqual(e, e.status(event_1.ICalEventStatus.CONFIRMED));",
                  "err": {},
                  "uuid": "6a02e66d-2ae4-45ff-b371-8d55ec8c72fc",
                  "parentUUID": "108d3084-ed59-4b26-8c2b-2f427ceb1c66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.status(event_1.ICalEventStatus.CONFIRMED);\ne.status(null);\nassert_1.default.strictEqual(e.status(), null);",
                  "err": {},
                  "uuid": "d605dfe3-870f-4d67-923d-e2041491a607",
                  "parentUUID": "108d3084-ed59-4b26-8c2b-2f427ceb1c66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.status(event_1.ICalEventStatus.CONFIRMED);\nassert_1.default.strictEqual(e.status(), 'CONFIRMED');\nassert_1.default.strictEqual(e.status(), event_1.ICalEventStatus.CONFIRMED);",
                  "err": {},
                  "uuid": "222942b7-4ebd-41e1-9a52-7403a78d7e63",
                  "parentUUID": "108d3084-ed59-4b26-8c2b-2f427ceb1c66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status('COOKING');\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status(Infinity);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status(NaN);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.status(-1);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);",
                  "err": {},
                  "uuid": "b988b661-7a8a-4c8a-8935-c111225f4033",
                  "parentUUID": "108d3084-ed59-4b26-8c2b-2f427ceb1c66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c89c485-d8ef-4667-9b42-10f29f3a1bce",
                "6a02e66d-2ae4-45ff-b371-8d55ec8c72fc",
                "d605dfe3-870f-4d67-923d-e2041491a607",
                "222942b7-4ebd-41e1-9a52-7403a78d7e63",
                "b988b661-7a8a-4c8a-8935-c111225f4033"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b983c11e-1d2e-4a1c-8926-33cf285fd43e",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.busystatus(), null);\nevent.busystatus(event_1.ICalEventBusyStatus.BUSY);\nassert_1.default.strictEqual(event.busystatus(), 'BUSY');\nevent.busystatus(null);\nassert_1.default.strictEqual(event.busystatus(), null);",
                  "err": {},
                  "uuid": "53dad2e4-eed5-47e4-8a7a-ac2a02d7aa3b",
                  "parentUUID": "b983c11e-1d2e-4a1c-8926-33cf285fd43e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.busystatus(null));\nassert_1.default.deepStrictEqual(e, e.busystatus(event_1.ICalEventBusyStatus.BUSY));",
                  "err": {},
                  "uuid": "ede6bfc3-4975-4a4f-9ef3-c3aa20232489",
                  "parentUUID": "b983c11e-1d2e-4a1c-8926-33cf285fd43e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.busystatus(event_1.ICalEventBusyStatus.BUSY);\ne.busystatus(null);\nassert_1.default.strictEqual(e.busystatus(), null);",
                  "err": {},
                  "uuid": "c8f0acdb-6b17-410c-a204-14367944248a",
                  "parentUUID": "b983c11e-1d2e-4a1c-8926-33cf285fd43e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.busystatus(event_1.ICalEventBusyStatus.BUSY);\nassert_1.default.strictEqual(e.busystatus(), 'BUSY');",
                  "err": {},
                  "uuid": "6887de95-80e4-4cc3-bf08-727feed034c2",
                  "parentUUID": "b983c11e-1d2e-4a1c-8926-33cf285fd43e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus('COOKING');\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus(Infinity);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus(NaN);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.busystatus(-1);\n}, /FREE, TENTATIVE, BUSY, OOF/);",
                  "err": {},
                  "uuid": "c3c101bf-1b23-4276-a2dd-a69d1ddf38bf",
                  "parentUUID": "b983c11e-1d2e-4a1c-8926-33cf285fd43e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53dad2e4-eed5-47e4-8a7a-ac2a02d7aa3b",
                "ede6bfc3-4975-4a4f-9ef3-c3aa20232489",
                "c8f0acdb-6b17-410c-a204-14367944248a",
                "6887de95-80e4-4cc3-bf08-727feed034c2",
                "c3c101bf-1b23-4276-a2dd-a69d1ddf38bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "335f9c8c-f9fc-4f3f-9993-3f160d9d21e3",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(e.url(), null);\ne.url('http://sebbo.net/');\nassert_1.default.strictEqual(e.url(), 'http://sebbo.net/');",
                  "err": {},
                  "uuid": "032fa323-3a13-48f1-90c0-05d36a750877",
                  "parentUUID": "335f9c8c-f9fc-4f3f-9993-3f160d9d21e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.url(null));\nassert_1.default.deepStrictEqual(e, e.url('http://sebbo.net/'));",
                  "err": {},
                  "uuid": "ab81032d-a411-485c-a842-f20ffbbeb44b",
                  "parentUUID": "335f9c8c-f9fc-4f3f-9993-3f160d9d21e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({\n    start: moment_timezone_1.default(),\n    summary: 'Example Event'\n}, new calendar_1.default());\nevent.url('http://github.com/sebbo2002/ical-generator');\nassert_1.default.strictEqual(event.url(), 'http://github.com/sebbo2002/ical-generator');",
                  "err": {},
                  "uuid": "b6bf520b-9279-45b5-b409-cef7743a9e4b",
                  "parentUUID": "335f9c8c-f9fc-4f3f-9993-3f160d9d21e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "032fa323-3a13-48f1-90c0-05d36a750877",
                "ab81032d-a411-485c-a842-f20ffbbeb44b",
                "b6bf520b-9279-45b5-b409-cef7743a9e4b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "49cdedf6-7f83-427b-b6b5-e63f697c7905",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.created(new Date()));",
                  "err": {},
                  "uuid": "4331ad04-1447-4ec1-bc9a-275f6a700f5f",
                  "parentUUID": "49cdedf6-7f83-427b-b6b5-e63f697c7905",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created(moment_timezone_1.default());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.created()));",
                  "err": {},
                  "uuid": "40f15048-96cf-4308-af78-7674209626b2",
                  "parentUUID": "49cdedf6-7f83-427b-b6b5-e63f697c7905",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created(new Date());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.created()));",
                  "err": {},
                  "uuid": "381a2967-6585-4759-939c-34ea71d6cfc5",
                  "parentUUID": "49cdedf6-7f83-427b-b6b5-e63f697c7905",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created(moment_timezone_1.default().toJSON());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.created()));",
                  "err": {},
                  "uuid": "ade46ea6-0de4-4344-994c-02049fa1f92f",
                  "parentUUID": "49cdedf6-7f83-427b-b6b5-e63f697c7905",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.created(new Date());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.created()));",
                  "err": {},
                  "uuid": "ec11e8e0-967f-4323-b9dc-89d75319d7a7",
                  "parentUUID": "49cdedf6-7f83-427b-b6b5-e63f697c7905",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new event_1.default({}, new calendar_1.default()).created(now);\nassert_1.default.deepStrictEqual((_a = e.created()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "e7736e62-19c1-4dbe-84c2-8dd8f9a074eb",
                  "parentUUID": "49cdedf6-7f83-427b-b6b5-e63f697c7905",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.created('hallo'); // this will produce a \"Deprecation warning\", sorry 😇\n}, /`created`/);",
                  "err": {},
                  "uuid": "58a34f81-7949-4ec2-99bb-aa30074871f1",
                  "parentUUID": "49cdedf6-7f83-427b-b6b5-e63f697c7905",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4331ad04-1447-4ec1-bc9a-275f6a700f5f",
                "40f15048-96cf-4308-af78-7674209626b2",
                "381a2967-6585-4759-939c-34ea71d6cfc5",
                "ade46ea6-0de4-4344-994c-02049fa1f92f",
                "ec11e8e0-967f-4323-b9dc-89d75319d7a7",
                "e7736e62-19c1-4dbe-84c2-8dd8f9a074eb",
                "58a34f81-7949-4ec2-99bb-aa30074871f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 68,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a850a68d-dc96-48d6-9830-ed6158cbbe71",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.lastModified(new Date()));",
                  "err": {},
                  "uuid": "16639891-b5a9-4288-8e8a-4d84af8f12e9",
                  "parentUUID": "a850a68d-dc96-48d6-9830-ed6158cbbe71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.lastModified(moment_timezone_1.default());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.lastModified()));",
                  "err": {},
                  "uuid": "d35a29c2-264f-4a86-8399-00fe8bb8041b",
                  "parentUUID": "a850a68d-dc96-48d6-9830-ed6158cbbe71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.lastModified(new Date());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.lastModified()));",
                  "err": {},
                  "uuid": "3fa3ee46-9817-41b5-8b0f-bb2690823ec6",
                  "parentUUID": "a850a68d-dc96-48d6-9830-ed6158cbbe71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.lastModified(moment_timezone_1.default().toJSON());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.lastModified()));",
                  "err": {},
                  "uuid": "109bd8d9-e530-4268-96f4-b8d4c6c1b2dc",
                  "parentUUID": "a850a68d-dc96-48d6-9830-ed6158cbbe71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.lastModified(new Date());\nassert_1.default.ok(moment_timezone_1.default.isMoment(e.lastModified()));",
                  "err": {},
                  "uuid": "cfdbc447-0de6-41db-af3d-b26ad3bcc475",
                  "parentUUID": "a850a68d-dc96-48d6-9830-ed6158cbbe71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new event_1.default({}, new calendar_1.default()).lastModified(now);\nassert_1.default.deepStrictEqual((_a = e.lastModified()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "8754a53f-2911-44f6-92a6-908ddea15bb3",
                  "parentUUID": "a850a68d-dc96-48d6-9830-ed6158cbbe71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.lastModified('hallo');\n}, /`lastModified`/);",
                  "err": {},
                  "uuid": "a4f62ff4-bf98-41e6-8e8d-810675a04280",
                  "parentUUID": "a850a68d-dc96-48d6-9830-ed6158cbbe71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16639891-b5a9-4288-8e8a-4d84af8f12e9",
                "d35a29c2-264f-4a86-8399-00fe8bb8041b",
                "3fa3ee46-9817-41b5-8b0f-bb2690823ec6",
                "109bd8d9-e530-4268-96f4-b8d4c6c1b2dc",
                "cfdbc447-0de6-41db-af3d-b26ad3bcc475",
                "8754a53f-2911-44f6-92a6-908ddea15bb3",
                "a4f62ff4-bf98-41e6-8e8d-810675a04280"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3acdbb79-39fc-4f52-89ac-9b40301fdf65",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "564b599b-4024-4c6e-87ae-899baf020835",
                  "parentUUID": "3acdbb79-39fc-4f52-89ac-9b40301fdf65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "564b599b-4024-4c6e-87ae-899baf020835"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "da87b04d-f664-43bc-a735-a1919e645353",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = moment_timezone_1.default().add(1, 'month');\nconst event = new event_1.default({}, new calendar_1.default()).summary('foo').start(date);\nassert_1.default.strictEqual(event.toJSON().summary, 'foo', 'summary is okay');\nassert_1.default.ok(date.isSame(event.toJSON().start), 'start is okay');\nassert_1.default.strictEqual(typeof event.toJSON().start, 'string', 'start is string');",
                  "err": {},
                  "uuid": "07153220-9981-4ded-8c07-e7b55c11c9da",
                  "parentUUID": "da87b04d-f664-43bc-a735-a1919e645353",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07153220-9981-4ded-8c07-e7b55c11c9da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b2c1fde-34ba-4f13-ba61-41e5d1f0add6",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new event_1.default({}, new calendar_1.default());\nassert_1.default.strictEqual(event.transparency(), null);\nevent.transparency(event_1.ICalEventTransparency.OPAQUE);\nassert_1.default.strictEqual(event.transparency(), 'OPAQUE');\nevent.transparency(null);\nassert_1.default.strictEqual(event.transparency(), null);",
                  "err": {},
                  "uuid": "6f164817-061a-4f1d-a013-55cd41e7b014",
                  "parentUUID": "3b2c1fde-34ba-4f13-ba61-41e5d1f0add6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.deepStrictEqual(e, e.transparency(null));\nassert_1.default.deepStrictEqual(e, e.transparency(event_1.ICalEventTransparency.TRANSPARENT));",
                  "err": {},
                  "uuid": "a0e42503-4b68-4a93-975e-db87b3264e71",
                  "parentUUID": "3b2c1fde-34ba-4f13-ba61-41e5d1f0add6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.transparency(event_1.ICalEventTransparency.OPAQUE);\ne.transparency(null);\nassert_1.default.strictEqual(e.transparency(), null);",
                  "err": {},
                  "uuid": "ed0d4890-b83f-4b47-b09f-bcad5d1f9792",
                  "parentUUID": "3b2c1fde-34ba-4f13-ba61-41e5d1f0add6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\ne.transparency(event_1.ICalEventTransparency.OPAQUE);\nassert_1.default.strictEqual(e.transparency(), 'OPAQUE');",
                  "err": {},
                  "uuid": "031ad188-736c-4561-8873-273a05de8e71",
                  "parentUUID": "3b2c1fde-34ba-4f13-ba61-41e5d1f0add6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({}, new calendar_1.default());\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.transparency('COOKING');\n}, /TRANSPARENT, OPAQUE/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.transparency(Infinity);\n}, /TRANSPARENT, OPAQUE/);\nassert_1.default.throws(function () {\n    // @ts-ignore\n    e.transparency(-1);\n}, /TRANSPARENT, OPAQUE/);",
                  "err": {},
                  "uuid": "778631d7-e763-484d-9dd7-8c048d2d6180",
                  "parentUUID": "3b2c1fde-34ba-4f13-ba61-41e5d1f0add6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f164817-061a-4f1d-a013-55cd41e7b014",
                "a0e42503-4b68-4a93-975e-db87b3264e71",
                "ed0d4890-b83f-4b47-b09f-bcad5d1f9792",
                "031ad188-736c-4561-8873-273a05de8e71",
                "778631d7-e763-484d-9dd7-8c048d2d6180"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7c675dc3-61f8-4c6b-80ac-3b5a45e86bd4",
              "title": "_generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without start",
                  "fullTitle": "ical-generator Event _generate() shoult throw an error without start",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    summary: 'Example Event'\n}, new calendar_1.default());\nassert_1.default.throws(function () {\n    e.toString();\n}, /`start`/);",
                  "err": {},
                  "uuid": "76a218e0-4e07-4385-a76b-ce4ca2e4bbd8",
                  "parentUUID": "7c675dc3-61f8-4c6b-80ac-3b5a45e86bd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event _generate() should make use of escaping",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new event_1.default({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Hel\\\\\\\\lo\\nW;orl,d'\n}, new calendar_1.default());\nassert_1.default.ok(e.toString().indexOf('Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d') > -1);",
                  "err": {},
                  "uuid": "f6e12938-35d2-4bb8-a015-3d0731f019a7",
                  "parentUUID": "7c675dc3-61f8-4c6b-80ac-3b5a45e86bd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event _generate() should render correct UIDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nconst event = new event_1.default({\n    id: 42,\n    start: moment_timezone_1.default(),\n    summary: ':)'\n}, cal);\nassert_1.default.ok(event.toString().indexOf('UID:42\\r') > -1);",
                  "err": {},
                  "uuid": "1dae32ba-f8c5-43e4-9801-0f2c9813f1f5",
                  "parentUUID": "7c675dc3-61f8-4c6b-80ac-3b5a45e86bd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event _generate() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new calendar_1.default();\nlet event = new event_1.default({\n    start: moment_timezone_1.default(),\n    end: moment_timezone_1.default(),\n    repeating: {\n        freq: types_1.ICalEventRepeatingFreq.WEEKLY\n    }\n}, cal);\nassert_1.default.ok(!event.toString().includes('WKST'), 'without WKST');\nevent = new event_1.default({\n    start: moment_timezone_1.default(),\n    end: moment_timezone_1.default(),\n    repeating: {\n        freq: types_1.ICalEventRepeatingFreq.WEEKLY,\n        startOfWeek: types_1.ICalWeekday.SU\n    }\n}, cal);\nassert_1.default.ok(event.toString().includes('WKST'), 'with WKST');",
                  "err": {},
                  "uuid": "efa4266a-0094-40af-b20b-d80d89aebe82",
                  "parentUUID": "7c675dc3-61f8-4c6b-80ac-3b5a45e86bd4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76a218e0-4e07-4385-a76b-ce4ca2e4bbd8",
                "f6e12938-35d2-4bb8-a015-3d0731f019a7",
                "1dae32ba-f8c5-43e4-9801-0f2c9813f1f5",
                "efa4266a-0094-40af-b20b-d80d89aebe82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "35a775ae-1f8d-49e4-9c22-b74346e9a0cc",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be a function",
              "fullTitle": "ical-generator Index should be a function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert_1.default.strictEqual(typeof src_1.default, 'function');",
              "err": {},
              "uuid": "f486f21f-40ad-4467-baea-8b5d278e2324",
              "parentUUID": "35a775ae-1f8d-49e4-9c22-b74346e9a0cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a ICalCalendar",
              "fullTitle": "ical-generator Index should return a ICalCalendar",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert_1.default.ok(src_1.default() instanceof calendar_1.default);",
              "err": {},
              "uuid": "8ca5fdcc-1fb6-427e-9d6c-1d1623d7b18a",
              "parentUUID": "35a775ae-1f8d-49e4-9c22-b74346e9a0cc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f486f21f-40ad-4467-baea-8b5d278e2324",
            "8ca5fdcc-1fb6-427e-9d6c-1d1623d7b18a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8d2ac254-5ff7-4900-b002-b9ce193c78eb",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4f1f6e01-693d-4224-8fb6-970440b959b3",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: new Date('Sun May 01 2016 00:00:00 GMT+0200 (CEST)'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "1956f096-fdab-45a4-b377-f4812cc46843",
                  "parentUUID": "4f1f6e01-693d-4224-8fb6-970440b959b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Brazil/East',\n    events: [{\n            start: new Date('Sun May 01 2016 00:00:00 GMT-3'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "14d42b6a-5956-4a24-b4a1-f31c4c1dfdb2",
                  "parentUUID": "4f1f6e01-693d-4224-8fb6-970440b959b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1956f096-fdab-45a4-b377-f4812cc46843",
                "14d42b6a-5956-4a24-b4a1-f31c4c1dfdb2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "96e353a1-e24a-4c76-95c7-09dca321d0f5",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: new Date('Sun May 01 2016 00:00:00 GMT+0200 (CEST)'),\n            end: new Date('Sun May 01 2016 02:00:00 GMT+0200 (CEST)'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [types_1.ICalWeekday.SU],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "a99f2b02-a35b-40d1-b982-406408f08183",
                  "parentUUID": "96e353a1-e24a-4c76-95c7-09dca321d0f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking the first elemnt of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking the first elemnt of the byDay array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: new Date('Sun May 01 2016 00:00:00 GMT+0200 (CEST)'),\n            end: new Date('Sun May 01 2016 02:00:00 GMT+0200 (CEST)'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [types_1.ICalWeekday.MO, types_1.ICalWeekday.FR],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "9195eed5-e2f1-48cb-af62-99cd0f53e672",
                  "parentUUID": "96e353a1-e24a-4c76-95c7-09dca321d0f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a99f2b02-a35b-40d1-b982-406408f08183",
                "9195eed5-e2f1-48cb-af62-99cd0f53e672"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0ffaa881-f693-4193-b158-4596605ae2cf",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: new Date(1553219772000),\n            end: new Date(1553219772000),\n            recurrenceId: new Date(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "db3ecb78-ae2c-4532-9331-accbfbc679c5",
                  "parentUUID": "0ffaa881-f693-4193-b158-4596605ae2cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: new Date(1553219772000),\n            end: new Date(1553219772000),\n            recurrenceId: new Date(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "c2ec93dd-675f-4808-b5ba-74f54264f76a",
                  "parentUUID": "0ffaa881-f693-4193-b158-4596605ae2cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: new Date(1553219772000),\n            end: new Date(1553219772000),\n            recurrenceId: new Date(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "34416be1-bcdb-4d34-9cd7-7587a01a8aeb",
                  "parentUUID": "0ffaa881-f693-4193-b158-4596605ae2cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db3ecb78-ae2c-4532-9331-accbfbc679c5",
                "c2ec93dd-675f-4808-b5ba-74f54264f76a",
                "34416be1-bcdb-4d34-9cd7-7587a01a8aeb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "daa57d97-c089-40e3-8090-ccacb081821c",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: '2020-08-13T00:00:00+01:00',\n            summary: 'Example Event',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: '2020-12-13T00:00:00+01:00'\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('EXDATE;TZID=Europe/Berlin:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "51d95eb6-25af-43cd-a724-a07c89045220",
                  "parentUUID": "daa57d97-c089-40e3-8090-ccacb081821c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = src_1.default({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'America/New_York',\n    events: [{\n            start: '2020-08-13T00:00:00-05:00',\n            summary: 'Example Event',\n            repeating: {\n                freq: types_1.ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: '2020-12-13T00:00:00-05:00'\n            }\n        }]\n});\nconst str = calendar.toString();\nassert_1.default.ok(str.indexOf('EXDATE;TZID=America/New_York:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "16b482d8-9b9c-41ac-83c1-686294ebf8eb",
                  "parentUUID": "daa57d97-c089-40e3-8090-ccacb081821c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51d95eb6-25af-43cd-a724-a07c89045220",
                "16b482d8-9b9c-41ac-83c1-686294ebf8eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "061a5e41-94d0-4268-beb2-218659fd1005",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0e5f2833-b009-4bde-b06a-5cfaefcb7959",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "timezone=0 dateonly=0 floating=0",
                  "fullTitle": "ICalTools formatDate() timezone=0 dateonly=0 floating=0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.formatDate(null, '2018-07-05T18:24:00.052Z', false, false), '20180705T182400Z');",
                  "err": {},
                  "uuid": "40dd50bd-834b-4ae6-9efd-231898305830",
                  "parentUUID": "0e5f2833-b009-4bde-b06a-5cfaefcb7959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "timezone=0 dateonly=0 floating=1",
                  "fullTitle": "ICalTools formatDate() timezone=0 dateonly=0 floating=1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.formatDate(null, '2018-07-05T18:24:00.052Z', false, true), '20180705T182400');",
                  "err": {},
                  "uuid": "cb8a0ef7-8506-4479-9c20-e821598be513",
                  "parentUUID": "0e5f2833-b009-4bde-b06a-5cfaefcb7959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "timezone=0 dateonly=1 floating=0",
                  "fullTitle": "ICalTools formatDate() timezone=0 dateonly=1 floating=0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.formatDate(null, '2018-07-05T18:24:00.052Z', true, false), '20180705');",
                  "err": {},
                  "uuid": "3e25c867-0cf2-4c20-b10f-2d02448d2653",
                  "parentUUID": "0e5f2833-b009-4bde-b06a-5cfaefcb7959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "timezone=0 dateonly=1 floating=1",
                  "fullTitle": "ICalTools formatDate() timezone=0 dateonly=1 floating=1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.formatDate(null, '2018-07-05T18:24:00.052Z', true, true), '20180705');",
                  "err": {},
                  "uuid": "28097674-0e60-42f9-a79c-2d6cfb66194c",
                  "parentUUID": "0e5f2833-b009-4bde-b06a-5cfaefcb7959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "timezone=1 dateonly=0 floating=0",
                  "fullTitle": "ICalTools formatDate() timezone=1 dateonly=0 floating=0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.formatDate('Europe/Berlin', '2018-07-05T18:24:00.052Z', false, false), '20180705T182400Z');",
                  "err": {},
                  "uuid": "321f5361-9c16-4f5f-be53-a48274118ae2",
                  "parentUUID": "0e5f2833-b009-4bde-b06a-5cfaefcb7959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "timezone=1 dateonly=0 floating=1",
                  "fullTitle": "ICalTools formatDate() timezone=1 dateonly=0 floating=1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.formatDate('Europe/Berlin', '2018-07-05T18:24:00.052Z', false, true), '20180705T202400');",
                  "err": {},
                  "uuid": "fd9abc80-8464-441d-80e4-46a12f6ee266",
                  "parentUUID": "0e5f2833-b009-4bde-b06a-5cfaefcb7959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "timezone=1 dateonly=1 floating=0",
                  "fullTitle": "ICalTools formatDate() timezone=1 dateonly=1 floating=0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.formatDate('Europe/Berlin', '2018-07-05T18:24:00.052Z', true, false), '20180705');",
                  "err": {},
                  "uuid": "4a080672-fe5e-4fbb-b975-14e755f5c8a3",
                  "parentUUID": "0e5f2833-b009-4bde-b06a-5cfaefcb7959",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "timezone=1 dateonly=1 floating=1",
                  "fullTitle": "ICalTools formatDate() timezone=1 dateonly=1 floating=1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.formatDate('Europe/Berlin', '2018-07-05T18:24:00.052Z', true, true), '20180705');",
                  "err": {},
                  "uuid": "ea6427c7-4a77-4bb9-8979-362b7ffcb7d9",
                  "parentUUID": "0e5f2833-b009-4bde-b06a-5cfaefcb7959",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40dd50bd-834b-4ae6-9efd-231898305830",
                "cb8a0ef7-8506-4479-9c20-e821598be513",
                "3e25c867-0cf2-4c20-b10f-2d02448d2653",
                "28097674-0e60-42f9-a79c-2d6cfb66194c",
                "321f5361-9c16-4f5f-be53-a48274118ae2",
                "fd9abc80-8464-441d-80e4-46a12f6ee266",
                "4a080672-fe5e-4fbb-b975-14e755f5c8a3",
                "ea6427c7-4a77-4bb9-8979-362b7ffcb7d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e9e7e76-d12d-49c8-8a4b-450b02d59fb2",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed = { timezone: 'Europe/Berlin' };\nassert_1.default.strictEqual(tools_1.formatDateTZ('Europe/Berlin', 'DSTART', '2018-07-02T15:48:05.000Z', ed), 'DSTART;TZID=Europe/Berlin:20180702T174805');",
                  "err": {},
                  "uuid": "3b94edc4-9063-4de1-89da-cf189912832e",
                  "parentUUID": "7e9e7e76-d12d-49c8-8a4b-450b02d59fb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.formatDateTZ(null, 'DSTART', '2018-07-02T15:48:05.000Z', {}), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "9118bb2e-c779-4dcd-be10-28ced82c1d28",
                  "parentUUID": "7e9e7e76-d12d-49c8-8a4b-450b02d59fb2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b94edc4-9063-4de1-89da-cf189912832e",
                "9118bb2e-c779-4dcd-be10-28ced82c1d28"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "066c8025-f9b4-4b47-a15d-de10a777b166",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.escape('Lorem \\\\ipsum'), 'Lorem \\\\\\\\ipsum');",
                  "err": {},
                  "uuid": "9ea679b6-d693-43d0-9a7e-7d974b407854",
                  "parentUUID": "066c8025-f9b4-4b47-a15d-de10a777b166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.escape('Lorem ;ipsum'), 'Lorem \\\\;ipsum');",
                  "err": {},
                  "uuid": "01beceab-78af-48b6-8e52-307641f53197",
                  "parentUUID": "066c8025-f9b4-4b47-a15d-de10a777b166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.escape('Lorem, ipsum'), 'Lorem\\\\, ipsum');",
                  "err": {},
                  "uuid": "92d5804d-9171-45d2-b3d1-a36b350dca0b",
                  "parentUUID": "066c8025-f9b4-4b47-a15d-de10a777b166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.escape('Lorem \\ripsum'), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "a714b034-1cad-4b67-8e94-36b6073f6106",
                  "parentUUID": "066c8025-f9b4-4b47-a15d-de10a777b166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.escape('Lorem \\nipsum'), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "67b3c308-8fd6-4e51-a2c8-f64edcd4d6be",
                  "parentUUID": "066c8025-f9b4-4b47-a15d-de10a777b166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.escape('Lorem \\r\\nipsum'), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "0faf361e-9eb3-4f3e-8d65-7914702e4125",
                  "parentUUID": "066c8025-f9b4-4b47-a15d-de10a777b166",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ea679b6-d693-43d0-9a7e-7d974b407854",
                "01beceab-78af-48b6-8e52-307641f53197",
                "92d5804d-9171-45d2-b3d1-a36b350dca0b",
                "a714b034-1cad-4b67-8e94-36b6073f6106",
                "67b3c308-8fd6-4e51-a2c8-f64edcd4d6be",
                "0faf361e-9eb3-4f3e-8d65-7914702e4125"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc5eba6b-53f2-4d25-9c2f-39d093e63cfd",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.foldLines('12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981'), '12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "58420ea2-1188-4dc0-ab5b-da284f70dd8b",
                  "parentUUID": "cc5eba6b-53f2-4d25-9c2f-39d093e63cfd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.strictEqual(tools_1.foldLines('👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981'), '👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "9182e7ec-764b-4964-884a-68af6a288b2a",
                  "parentUUID": "cc5eba6b-53f2-4d25-9c2f-39d093e63cfd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58420ea2-1188-4dc0-ab5b-da284f70dd8b",
                "9182e7ec-764b-4964-884a-68af6a288b2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}